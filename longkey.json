[
    {
        "question": "How to connect PostgreSQL with NestJS?",
        "label": "nestjs,postgresql",
        "language": "en",
        "context": "To connect PostgreSQL with NestJS, you need to use the `@nestjs/typeorm` library and configure `TypeOrmModule`.",
        "answer": "The steps to connect PostgreSQL with NestJS are as follows:\n\n1. Install the necessary packages:\n - `npm install @nestjs/typeorm typeorm pg`\n\n2. Configure `TypeOrmModule` in `app.module.ts`:\n ```typescript\n import { Module } from '@nestjs/common';\n import { TypeOrmModule } from '@nestjs/typeorm';\n import { YourEntity } from './your-entity.entity';\n\n @Module({\n imports: [\n TypeOrmModule.forRoot({\n type: 'postgres',\n host: 'localhost',\n port: 5432,\n username: 'your-username',\n password: 'your-password',\n database: 'your-database',\n entities: [YourEntity],\n synchronize: true,\n }),\n ],\n })\n export class AppModule {}\n ```\n\n3. Create an entity for your data table:\n ```typescript\n import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n @Entity()\n export class YourEntity {\n @PrimaryGeneratedColumn()\n id: number;\n\n @Column()\n name: string;\n }\n ```\n\n4. Start the application:\n - `npm run start`\n\nOnce you complete the above steps, NestJS will connect to your PostgreSQL database.",
        "start_char": 0,
        "end_char": 1037,
        "key_answer": "The steps to connect PostgreSQL with NestJS are as follows:\n\n1. Install the necessary packages:\n - `npm install @nestjs/typeorm typeorm pg`\n\n2. Configure `TypeOrmModule` in `app.module.ts`:\n ```typescript\n import { Module } from '@nestjs/common';\n import { TypeOrmModule } from '@nestjs/typeorm';\n import { YourEntity } from './your-entity.entity';\n\n @Module({\n imports: [\n TypeOrmModule.forRoot({\n type: 'postgres',\n host: 'localhost',\n port: 5432,\n username: 'your-username',\n password: 'your-password',\n database: 'your-database',\n entities: [YourEntity],\n synchronize: true,\n }),\n ],\n })\n export class AppModule {}\n ```\n\n3. Create an entity for your data table:\n ```typescript\n import { Entity, PrimaryGeneratedColumn, Column } from 'typeorm';\n\n @Entity()\n export class YourEntity {\n @PrimaryGeneratedColumn()\n id: number;\n\n @Column()\n name: string;\n }\n ```\n\n4. Start the application:\n - `npm run start`\n\nOnce you complete the above steps, NestJS will connect to your PostgreSQL database."
    },
    {
        "question": "How to deploy a Node.js application to Heroku?",
        "label": "nodejs,heroku",
        "language": "en",
        "context": "Heroku is a cloud platform that allows you to deploy and manage Node.js applications easily.",
        "answer": "The steps to deploy a Node.js application to Heroku are as follows:\n\n1. Install Heroku CLI:\n - Download and install Heroku CLI from the official website.\n\n2. Log in to Heroku:\n - Open the terminal and run the command `heroku login`.\n\n3. Create a new app on Heroku:\n- Run the command `heroku create your-app-name`.\n\n4. Push the source code to Heroku:\n- Make sure you have committed your source code to Git.\n- Run the command `git push heroku master`.\n\n5. Open the app:\n - Run the command `heroku open` to open the app in your browser.\n\nOnce you complete the above steps, your Node.js app will be deployed to Heroku.",
        "start_char": 0,
        "end_char": 632,
        "key_answer": "The steps to deploy a Node.js application to Heroku are as follows:\n\n1. Install Heroku CLI:\n - Download and install Heroku CLI from the official website.\n\n2. Log in to Heroku:\n - Open the terminal and run the command `heroku login`.\n\n3. Create a new app on Heroku:\n- Run the command `heroku create your-app-name`.\n\n4. Push the source code to Heroku:\n- Make sure you have committed your source code to Git.\n- Run the command `git push heroku master`.\n\n5. Open the app:\n - Run the command `heroku open` to open the app in your browser.\n\nOnce you complete the above steps, your Node.js app will be deployed to Heroku."
    },
    {
        "question": "How to use Docker to containerize a Python application?",
        "label": "docker,python",
        "language": "en",
        "context": "Docker allows you to create and manage containers for your application.",
        "answer": "The steps to containerize a Python application using Docker are as follows:\n\n1. Create a `Dockerfile` file in the root directory of the application:\n ```dockerfile\n FROM python:3.8\n WORKDIR /app\n COPY . .\n RUN pip install -r requirements.txt\n CMD [\"python\", \"app.py\"]\n ```\n\n2. Build the Docker image:\n - Run command `docker build -t your-image-name .`\n\n3. Running the container from the image:\n - Run the command `docker run -p 5000:5000 your-image-name`.\n\nOnce you have completed the above steps, your Python application will be running in a Docker container.",
        "start_char": 0,
        "end_char": 581,
        "key_answer": "The steps to containerize a Python application using Docker are as follows:\n\n1. Create a `Dockerfile` file in the root directory of the application:\n ```dockerfile\n FROM python:3.8\n WORKDIR /app\n COPY . .\n RUN pip install -r requirements.txt\n CMD [\"python\", \"app.py\"]\n ```\n\n2. Build the Docker image:\n - Run command `docker build -t your-image-name .`\n\n3. Running the container from the image:\n - Run the command `docker run -p 5000:5000 your-image-name`.\n\nOnce you have completed the above steps, your Python application will be running in a Docker container."
    },
    {
        "question": "How to configure Nginx as a reverse proxy for a Node.js application?",
        "label": "nginx,nodejs",
        "language": "en",
        "context": "Nginx can be used as a reverse proxy to forward requests to a Node.js application.",
        "answer": "The steps to configure Nginx as a reverse proxy for a Node.js application are as follows:\n\n1. Install Nginx:\n - On Ubuntu, run the commands `sudo apt update` and `sudo apt install nginx`.\n\n2. Create a configuration file for the application:\n - Create a new file in the `/etc/nginx/sites-available/` directory with your application name.\n - Add the following configuration:\n ```nginx\n server {\n listen 80;\n server_name your_domain.com;\n\n location / {\n proxy_pass http://localhost:3000;\n proxy_http_version 1.1;\n proxy_set_header Upgrade $http_upgrade;\n proxy_set_header Connection 'upgrade';\n proxy_set_header Host $host;\n proxy_cache_bypass $http_upgrade;\n }\n }\n ```\n\n3. Enable configuration:\n- Create a link to the `sites-enabled` directory: `sudo ln -s /etc/nginx/sites-available/your_app /etc/nginx/sites-enabled/`.\n\n4. Test Nginx configuration:\n- Run the command `sudo nginx -t` to check for errors.\n\n5. Restart Nginx:\n- Run the command `sudo systemctl restart nginx`.\n\nOnce you complete the above steps, Nginx will forward requests to your Node.js application.",
        "start_char": 0,
        "end_char": 1098,
        "key_answer": "The steps to configure Nginx as a reverse proxy for a Node.js application are as follows:\n\n1. Install Nginx:\n - On Ubuntu, run the commands `sudo apt update` and `sudo apt install nginx`.\n\n2. Create a configuration file for the application:\n - Create a new file in the `/etc/nginx/sites-available/` directory with your application name.\n - Add the following configuration:\n ```nginx\n server {\n listen 80;\n server_name your_domain.com;\n\n location / {\n proxy_pass http://localhost:3000;\n proxy_http_version 1.1;\n proxy_set_header Upgrade $http_upgrade;\n proxy_set_header Connection 'upgrade';\n proxy_set_header Host $host;\n proxy_cache_bypass $http_upgrade;\n }\n }\n ```\n\n3. Enable configuration:\n- Create a link to the `sites-enabled` directory: `sudo ln -s /etc/nginx/sites-available/your_app /etc/nginx/sites-enabled/`.\n\n4. Test Nginx configuration:\n- Run the command `sudo nginx -t` to check for errors.\n\n5. Restart Nginx:\n- Run the command `sudo systemctl restart nginx`.\n\nOnce you complete the above steps, Nginx will forward requests to your Node.js application."
    },
    {
        "question": "How to deploy a React application to Vercel?",
        "label": "react,vercel",
        "language": "en",
        "context": "Vercel is a ng to deploy React applications easily.",
        "answer": "The steps to deploy a React application to Vercel are as follows:\n\n1. Install Vercel CLI:\n- Run the command `npm install -g vercel` to install Vercel CLI.\n\n2. Log in to Vercel:\n- Run the command `vercel login` and enter your email.\n\n3. Deploy the application:\n- In the root directory of the React application, run the command `vercel`.\n- Follow the instructions to complete the deployment process.\n\n4. Open the application:\n - After successful deployment, Vercel will provide a URL for you to access the application.\n\nOnce you complete the above steps, your React application will be deployed on Vercel.",
        "start_char": 0,
        "end_char": 618,
        "key_answer": "The steps to deploy a React application to Vercel are as follows:\n\n1. Install Vercel CLI:\n- Run the command `npm install -g vercel` to install Vercel CLI.\n\n2. Log in to Vercel:\n- Run the command `vercel login` and enter your email.\n\n3. Deploy the application:\n- In the root directory of the React application, run the command `vercel`.\n- Follow the instructions to complete the deployment process.\n\n4. Open the application:\n - After successful deployment, Vercel will provide a URL for you to access the application.\n\nOnce you complete the above steps, your React application will be deployed on Vercel."
    },
    {
        "question": "How to use WebSocket in a Node.js application?",
        "label": "nodejs,websocket",
        "language": "en",
        "context": "WebSocket allows two-way communication between the client and the server in real time.",
        "answer": "The steps to use WebSocket in a Node.js application are as follows:\n\n1. Install the `ws` library:\n - Run the command `npm install ws`.\n\n2. Create a WebSocket server:\n ```javascript\n const WebSocket = require('ws');\n const server = new WebSocket.Server({ port: 8080 });\n\n server.on('connection', (socket) => {\n socket.on('message', (message) => {\n console.log(`Received: ${message}`);\n socket.send('Hello from server!');\n });\n });\n ```\n\n3. Connect from client:\n ```javascript\n const socket = new WebSocket('ws://localhost:8080');\n socket.onopen = () => {\n socket.send('Hello from client!');\n };\n socket.onmessage = (event) => {\n console.log(`Received: ${event.data}`);\n };\n ```\n\nOnce you complete the above steps, your Node.js application will be able to communicate in real-time via WebSocket.",
        "start_char": 0,
        "end_char": 822,
        "key_answer": "The steps to use WebSocket in a Node.js application are as follows:\n\n1. Install the `ws` library:\n - Run the command `npm install ws`.\n\n2. Create a WebSocket server:\n ```javascript\n const WebSocket = require('ws');\n const server = new WebSocket.Server({ port: 8080 });\n\n server.on('connection', (socket) => {\n socket.on('message', (message) => {\n console.log(`Received: ${message}`);\n socket.send('Hello from server!');\n });\n });\n ```\n\n3. Connect from client:\n ```javascript\n const socket = new WebSocket('ws://localhost:8080');\n socket.onopen = () => {\n socket.send('Hello from client!');\n };\n socket.onmessage = (event) => {\n console.log(`Received: ${event.data}`);\n };\n ```\n\nOnce you complete the above steps, your Node.js application will be able to communicate in real-time via WebSocket."
    },
    {
        "question": "How to use GraphQL in an Express application?",
        "label": "express,graphql",
        "language": "en",
        "context": "GraphQL is a query language for APIs, allowing you to request the exact data you need.",
        "answer": "Steps to use GraphQL in Express apps are as follows:\n\n1. Install the required packages:\n - Run the command `npm install express graphql express-graphql`.\n\n2. Create the GraphQL schema:\n ```javascript\n const { GraphQLSchema, GraphQLObjectType, GraphQLString } = require('graphql');\n\n const RootQuery = new GraphQLObjectType({\n name: 'RootQueryType',\n fields: {\n hello: {\n type: GraphQLString,\n resolve() {\n return 'Hello world!';\n }\n }\n }\n });\n\n const schema = new GraphQLSchema({\n query: RootQuery\n });\n ```\n\n3. Configure Express to use GraphQL:\n ```javascript\n const express = require('express');\n const { graphqlHTTP } = require('express-graphql');\n const app = express();\n\n app.use('/graphql', graphqlHTTP({\n schema: schema,\n graphiql: true,\n }));\n\n app.listen(4000, () => {\n console.log('Server is running on http://localhost:4000/graphql');\n });\n ```\n\nOnce you complete the above steps, you can access the GraphQL API at `http://localhost:4000/graphql`.",
        "start_char": 0,
        "end_char": 1000,
        "key_answer": "Steps to use GraphQL in Express apps are as follows:\n\n1. Install the required packages:\n - Run the command `npm install express graphql express-graphql`.\n\n2. Create the GraphQL schema:\n ```javascript\n const { GraphQLSchema, GraphQLObjectType, GraphQLString } = require('graphql');\n\n const RootQuery = new GraphQLObjectType({\n name: 'RootQueryType',\n fields: {\n hello: {\n type: GraphQLString,\n resolve() {\n return 'Hello world!';\n }\n }\n }\n });\n\n const schema = new GraphQLSchema({\n query: RootQuery\n });\n ```\n\n3. Configure Express to use GraphQL:\n ```javascript\n const express = require('express');\n const { graphqlHTTP } = require('express-graphql');\n const app = express();\n\n app.use('/graphql', graphqlHTTP({\n schema: schema,\n graphiql: true,\n }));\n\n app.listen(4000, () => {\n console.log('Server is running on http://localhost:4000/graphql');\n });\n ```\n\nOnce you complete the above steps, you can access the GraphQL API at `http://localhost:4000/graphql`."
    },
    {
        "question": "How to use Firebase Authentication in a React app?",
        "label": "react,firebase",
        "language": "en",
        "context": "Firebase Authentication provides easy user authentication methods for web applications.",
        "answer": "The steps to use Firebase Authentication in a React app are as follows:\n\n1. Install Firebase:\n - Run the command `npm install firebase`.\n\n2. Configure Firebase in the app:\n ```javascript\n import firebase from 'firebase/app';\n import 'firebase/auth';\n\n const firebaseConfig = {\n apiKey: 'YOUR_API_KEY',\n authDomain: 'YOUR_AUTH_DOMAIN',\n projectId: 'YOUR_PROJECT_ID',\n storageBucket: 'YOUR_STORAGE_BUCKET',\n messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n appId: 'YOUR_APP_ID'\n };\n\n firebase.initializeApp(firebaseConfig);\n ```\n\n3. Add login functionality:\n ```javascript\n const handleLogin = async () => {\n const email = 'user@example.com';\n const password = 'password';\n try {\n await firebase.auth().signInWithEmailAndPassword(email, password);\n console.log('User logged in');\n } catch (error) {\n console.error(error);\n }\n };\n ```\n\nOnce you complete the above steps, you should be able to authenticate users in your React app via Firebase.",
        "start_char": 0,
        "end_char": 975,
        "key_answer": "The steps to use Firebase Authentication in a React app are as follows:\n\n1. Install Firebase:\n - Run the command `npm install firebase`.\n\n2. Configure Firebase in the app:\n ```javascript\n import firebase from 'firebase/app';\n import 'firebase/auth';\n\n const firebaseConfig = {\n apiKey: 'YOUR_API_KEY',\n authDomain: 'YOUR_AUTH_DOMAIN',\n projectId: 'YOUR_PROJECT_ID',\n storageBucket: 'YOUR_STORAGE_BUCKET',\n messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n appId: 'YOUR_APP_ID'\n };\n\n firebase.initializeApp(firebaseConfig);\n ```\n\n3. Add login functionality:\n ```javascript\n const handleLogin = async () => {\n const email = 'user@example.com';\n const password = 'password';\n try {\n await firebase.auth().signInWithEmailAndPassword(email, password);\n console.log('User logged in');\n } catch (error) {\n console.error(error);\n }\n };\n ```\n\nOnce you complete the above steps, you should be able to authenticate users in your React app via Firebase."
    },
    {
        "question": "How to configure an Angular app with REST API?",
        "label": "angular,api",
        "language": "en",
        "context": "Angular can easily connect to REST API to get and send data.",
        "answer": "The steps to configure an Angular application with REST API are as follows:\n\n1. Create a service to call the API:\n ```typescript\n import { Injectable } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Observable } from 'rxjs';\n\n @Injectable({\n providedIn: 'root'\n })\n export class ApiService {\n private apiUrl = 'https://api.example.com/data';\n\n constructor(private http: HttpClient) {}\n\n getData(): Observable<any> {\n return this.http.get(this.apiUrl);\n }\n }\n ```\n\n2. Using service in component:\n ```typescript\n import { Component, OnInit } from '@angular/core';\n import { ApiService } from './api.service';\n\n @Component({\n selector: 'app-data',\n templateUrl: './data.component.html'\n })\n export class DataComponent implements OnInit {\n data: any;\n\n constructor(private apiService: ApiService) {}\n\n ngOnInit() {\n this.apiService.getData().subscribe(response => {\n this.data = response;\n });\n }\n }\n ```\n\n3. Display data in template:\n ```html\n <div *ngFor=\"let item of data\">\n <p>{{ item.name }}</p>\n </div>\n ```\n\nOnce you complete the above steps, your Angular application will be able to fetch data from the REST API.",
        "start_char": 0,
        "end_char": 1206,
        "key_answer": "The steps to configure an Angular application with REST API are as follows:\n\n1. Create a service to call the API:\n ```typescript\n import { Injectable } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Observable } from 'rxjs';\n\n @Injectable({\n providedIn: 'root'\n })\n export class ApiService {\n private apiUrl = 'https://api.example.com/data';\n\n constructor(private http: HttpClient) {}\n\n getData(): Observable<any> {\n return this.http.get(this.apiUrl);\n }\n }\n ```\n\n2. Using service in component:\n ```typescript\n import { Component, OnInit } from '@angular/core';\n import { ApiService } from './api.service';\n\n @Component({\n selector: 'app-data',\n templateUrl: './data.component.html'\n })\n export class DataComponent implements OnInit {\n data: any;\n\n constructor(private apiService: ApiService) {}\n\n ngOnInit() {\n this.apiService.getData().subscribe(response => {\n this.data = response;\n });\n }\n }\n ```\n\n3. Display data in template:\n ```html\n <div *ngFor=\"let item of data\">\n <p>{{ item.name }}</p>\n </div>\n ```\n\nOnce you complete the above steps, your Angular application will be able to fetch data from the REST API."
    },
    {
        "question": "How to use Redux in a React application?",
        "label": "react,redux",
        "language": "en",
        "context": "Redux is a popular state management library for React applications.",
        "answer": "The steps to use Redux in a React application are as follows:\n\n1. Install Redux and React-Redux:\n - Run the command `npm install redux react-redux`.\n\n2. Create store:\n ```javascript\n import { createStore } from 'redux';\n import rootReducer from './reducers';\n\n const store = createStore(rootReducer);\n ```\n\n3. Provide a store for the application:\n ```javascript\n import React from 'react';\n import ReactDOM from 'react-dom';\n import { Provider } from 'react-redux';\n import App from './App';\n import store from './store';\n\n ReactDOM.render(\n <Provider store={store}>\n <App />\n </Provider>,\n document.getElementById('root')\n );\n ```\n\n4. Create reducer:\n ```javascript\n const initialState = { count: 0 };\n\n const counterReducer = (state = initialState, action) => {\n switch (action.type) {\n case 'INCREMENT':\n return { ...state, count: state.count + 1 };\n case 'DECREMENT':\n return { ...state, count: state.count - 1 };\n default:\n return state;\n }\n };\n export default counterReducer;\n ```\n\n5. Connect the component to Redux:\n ```javascript\n import React from 'react';\n import { useSelector, useDispatch } from 'react-redux';\n\n const Counter = () => {\n const count = useSelector(state => state.count);\n const dispatch = useDispatch();\n\n return (\n <div>\n <h1>{count}</h1>\n <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n </div>\n );\n };\n ```\n\nOnce you've completed the above steps, your React app should be able to manage state with Redux.",
        "start_char": 0,
        "end_char": 1587,
        "key_answer": "The steps to use Redux in a React application are as follows:\n\n1. Install Redux and React-Redux:\n - Run the command `npm install redux react-redux`.\n\n2. Create store:\n ```javascript\n import { createStore } from 'redux';\n import rootReducer from './reducers';\n\n const store = createStore(rootReducer);\n ```\n\n3. Provide a store for the application:\n ```javascript\n import React from 'react';\n import ReactDOM from 'react-dom';\n import { Provider } from 'react-redux';\n import App from './App';\n import store from './store';\n\n ReactDOM.render(\n <Provider store={store}>\n <App />\n </Provider>,\n document.getElementById('root')\n );\n ```\n\n4. Create reducer:\n ```javascript\n const initialState = { count: 0 };\n\n const counterReducer = (state = initialState, action) => {\n switch (action.type) {\n case 'INCREMENT':\n return { ...state, count: state.count + 1 };\n case 'DECREMENT':\n return { ...state, count: state.count - 1 };\n default:\n return state;\n }\n };\n export default counterReducer;\n ```\n\n5. Connect the component to Redux:\n ```javascript\n import React from 'react';\n import { useSelector, useDispatch } from 'react-redux';\n\n const Counter = () => {\n const count = useSelector(state => state.count);\n const dispatch = useDispatch();\n\n return (\n <div>\n <h1>{count}</h1>\n <button onClick={() => dispatch({ type: 'INCREMENT' })}>+</button>\n <button onClick={() => dispatch({ type: 'DECREMENT' })}>-</button>\n </div>\n );\n };\n ```\n\nOnce you've completed the above steps, your React app should be able to manage state with Redux."
    },
    {
        "question": "How to use Axios to call API in a Vue.js application?",
        "label": "vue,axios",
        "language": "en",
        "context": "Axios is a popular library for making HTTP requests in Vue.js applications.",
        "answer": "The steps to use Axios to call API in Vue.js applications are as follows:\n\n1. Install Axios:\n - Run the command `npm install axios`.\n\n2. Create a service to call API:\n ```javascript\n import axios from 'axios';\n\n export const apiService = {\n getData() {\n return axios.get('https://api.example.com/data');\n }\n };\n ```\n\n3. Using the service in the component:\n ```javascript\n <template>\n <div>\n <ul>\n <li v-for=\"item in data\" :key=\"item.id\">{{ item.name }}</li>\n </ul>\n </div>\n </template>\n\n <script>\n import { apiService } from './apiService';\n\n export default {\n data() {\n return {\n data: []\n };\n },\n mounted() {\n apiService.getData().then(response => {\n this.data = response.data;\n });\n }\n };\n </script>\n ```\n\nOnce you've completed the above steps, your Vue.js app should be able to fetch data from the API using Axios.",
        "start_char": 0,
        "end_char": 866,
        "key_answer": "The steps to use Axios to call API in Vue.js applications are as follows:\n\n1. Install Axios:\n - Run the command `npm install axios`.\n\n2. Create a service to call API:\n ```javascript\n import axios from 'axios';\n\n export const apiService = {\n getData() {\n return axios.get('https://api.example.com/data');\n }\n };\n ```\n\n3. Using the service in the component:\n ```javascript\n <template>\n <div>\n <ul>\n <li v-for=\"item in data\" :key=\"item.id\">{{ item.name }}</li>\n </ul>\n </div>\n </template>\n\n <script>\n import { apiService } from './apiService';\n\n export default {\n data() {\n return {\n data: []\n };\n },\n mounted() {\n apiService.getData().then(response => {\n this.data = response.data;\n });\n }\n };\n </script>\n ```\n\nOnce you've completed the above steps, your Vue.js app should be able to fetch data from the API using Axios."
    },
    {
        "question": "How to use TypeScript in an Angular application?",
        "label": "angular,typescript",
        "language": "en",
        "context": "Angular is built on TypeScript, allowing you to use TypeScript features in your applications.",
        "answer": "Steps to use TypeScript in an Angular application are as follows:\n\n1. Create a new component:\n - Run the command `ng generate component your-component`.\n\n2. Use TypeScript in the component:\n ```typescript\n import { Component } from '@angular/core';\n\n @Component({\n selector: 'app-your-component',\n templateUrl: './your-component.component.html'\n })\n export class YourComponent {\n title: string = 'Hello, Angular!';\n }\n ```\n\n3. Display data in template:\n ```html\n <h1>{{ title }}</h1>\n ```\n\nOnce you complete the above steps, you will be able to use TypeScript in your Angular application.",
        "start_char": 0,
        "end_char": 611,
        "key_answer": "Steps to use TypeScript in an Angular application are as follows:\n\n1. Create a new component:\n - Run the command `ng generate component your-component`.\n\n2. Use TypeScript in the component:\n ```typescript\n import { Component } from '@angular/core';\n\n @Component({\n selector: 'app-your-component',\n templateUrl: './your-component.component.html'\n })\n export class YourComponent {\n title: string = 'Hello, Angular!';\n }\n ```\n\n3. Display data in template:\n ```html\n <h1>{{ title }}</h1>\n ```\n\nOnce you complete the above steps, you will be able to use TypeScript in your Angular application."
    },
    {
        "question": "How to use Bootstrap in a React application?",
        "label": "react,bootstrap",
        "language": "en",
        "context": "Bootstrap is a popular CSS framework for creating beautiful and responsive user interfaces.",
        "answer": "The steps to use Bootstrap in a React application are as follows:\n\n1. Install Bootstrap:\n - Run the command `npm install bootstrap`.\n\n2. Import Bootstrap into the application:\n ```javascript\n import 'bootstrap/dist/css/bootstrap.min.css';\n ```\n\n3. Using Bootstrap classes in components:\n ```javascript\n const App = () => {\n return (\n <div className=\"container\">\n <h1 className=\"text-center\">Welcome to React</h1>\n <button className=\"btn btn-primary\">Click Me</button>\n </div>\n );\n };\n ```\n\nOnce you complete the above steps, your React application will be able to use Bootstrap components.",
        "start_char": 0,
        "end_char": 617,
        "key_answer": "The steps to use Bootstrap in a React application are as follows:\n\n1. Install Bootstrap:\n - Run the command `npm install bootstrap`.\n\n2. Import Bootstrap into the application:\n ```javascript\n import 'bootstrap/dist/css/bootstrap.min.css';\n ```\n\n3. Using Bootstrap classes in components:\n ```javascript\n const App = () => {\n return (\n <div className=\"container\">\n <h1 className=\"text-center\">Welcome to React</h1>\n <button className=\"btn btn-primary\">Click Me</button>\n </div>\n );\n };\n ```\n\nOnce you complete the above steps, your React application will be able to use Bootstrap components."
    },
    {
        "question": "How to configure an Angular application with REST API?",
        "label": "angular,api",
        "language": "en",
        "context": "Angular can easily connect to REST API to fetch and send data.",
        "answer": "The steps to configure an Angular application with REST API are as follows:\n\n1. Create a service to call the API:\n ```typescript\n import { Injectable } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Observable } from 'rxjs';\n\n @Injectable({\n providedIn: 'root'\n })\n export class ApiService {\n private apiUrl = 'https://api.example.com/data';\n\n constructor(private http: HttpClient) {}\n\n getData(): Observable<any> {\n return this.http.get(this.apiUrl);\n }\n }\n ```\n\n2. Using service in component:\n ```typescript\n import { Component, OnInit } from '@angular/core';\n import { ApiService } from './api.service';\n\n @Component({\n selector: 'app-data',\n templateUrl: './data.component.html'\n })\n export class DataComponent implements OnInit {\n data: any;\n\n constructor(private apiService: ApiService) {}\n\n ngOnInit() {\n this.apiService.getData().subscribe(response => {\n this.data = response;\n });\n }\n }\n ```\n\n3. Display data in template:\n ```html\n <div *ngFor=\"let item of data\">\n <p>{{ item.name }}</p>\n </div>\n ```\n\nOnce you complete the above steps, your Angular application will be able to fetch data from the REST API.",
        "start_char": 0,
        "end_char": 1206,
        "key_answer": "The steps to configure an Angular application with REST API are as follows:\n\n1. Create a service to call the API:\n ```typescript\n import { Injectable } from '@angular/core';\n import { HttpClient } from '@angular/common/http';\n import { Observable } from 'rxjs';\n\n @Injectable({\n providedIn: 'root'\n })\n export class ApiService {\n private apiUrl = 'https://api.example.com/data';\n\n constructor(private http: HttpClient) {}\n\n getData(): Observable<any> {\n return this.http.get(this.apiUrl);\n }\n }\n ```\n\n2. Using service in component:\n ```typescript\n import { Component, OnInit } from '@angular/core';\n import { ApiService } from './api.service';\n\n @Component({\n selector: 'app-data',\n templateUrl: './data.component.html'\n })\n export class DataComponent implements OnInit {\n data: any;\n\n constructor(private apiService: ApiService) {}\n\n ngOnInit() {\n this.apiService.getData().subscribe(response => {\n this.data = response;\n });\n }\n }\n ```\n\n3. Display data in template:\n ```html\n <div *ngFor=\"let item of data\">\n <p>{{ item.name }}</p>\n </div>\n ```\n\nOnce you complete the above steps, your Angular application will be able to fetch data from the REST API."
    },
    {
        "question": "How to use Axios to call API in a Vue.js app?",
        "label": "vue,axios",
        "language": "en",
        "context": "Axios is a popular library for making HTTP requests in Vue.js apps.",
        "answer": "The steps to use Axios to call API in a Vue.js app are as follows:\n\n1. Install Axios:\n- Run the command `npm install axios`.\n\n2. Create a service to call the API:\n ```javascript\n import axios from 'axios';\n\n export const apiService = {\n getData() {\n return axios.get('https://api.example.com/data');\n }\n };\n ```\n\n3. Using the service in the component:\n ```javascript\n <template>\n <div>\n <ul>\n <li v-for=\"item in data\" :key=\"item.id\">{{ item.name }}</li>\n </ul>\n </div>\n </template>\n\n <script>\n import { apiService } from './apiService';\n\n export default {\n data() {\n return {\n data: []\n };\n },\n mounted() {\n apiService.getData().then(response => {\n this.data = response.data;\n });\n }\n };\n </script>\n ```\n\nOnce you've completed the above steps, your Vue.js app should be able to fetch data from the API using Axios.",
        "start_char": 0,
        "end_char": 862,
        "key_answer": "The steps to use Axios to call API in a Vue.js app are as follows:\n\n1. Install Axios:\n- Run the command `npm install axios`.\n\n2. Create a service to call the API:\n ```javascript\n import axios from 'axios';\n\n export const apiService = {\n getData() {\n return axios.get('https://api.example.com/data');\n }\n };\n ```\n\n3. Using the service in the component:\n ```javascript\n <template>\n <div>\n <ul>\n <li v-for=\"item in data\" :key=\"item.id\">{{ item.name }}</li>\n </ul>\n </div>\n </template>\n\n <script>\n import { apiService } from './apiService';\n\n export default {\n data() {\n return {\n data: []\n };\n },\n mounted() {\n apiService.getData().then(response => {\n this.data = response.data;\n });\n }\n };\n </script>\n ```\n\nOnce you've completed the above steps, your Vue.js app should be able to fetch data from the API using Axios."
    },
    {
        "question": "How to create a RESTful API using Express and MongoDB?",
        "label": "express,mongodb",
        "language": "en",
        "context": "Express is a web framework for Node.js, and MongoDB is a NoSQL database.",
        "answer": "The steps to create a RESTful API using Express and MongoDB are as follows:\n\n1. Set up a new Node.js project:\n   - Run `npm init -y` to create a package.json file.\n\n2. Install required packages:\n   - Run `npm install express mongoose body-parser`.\n\n3. Create a basic Express server:\n   ```javascript\n   const express = require('express');\n   const bodyParser = require('body-parser');\n   const mongoose = require('mongoose');\n\n   const app = express();\n   app.use(bodyParser.json());\n\n   mongoose.connect('mongodb://localhost/my_database', { useNewUrlParser: true, useUnifiedTopology: true });\n   ```\n\n4. Define a Mongoose model:\n   ```javascript\n   const Item = mongoose.model('Item', new mongoose.Schema({ name: String }));\n   ```\n\n5. Create RESTful routes:\n   ```javascript\n   app.get('/items', async (req, res) => {\n       const items = await Item.find();\n       res.send(items);\n   });\n\n   app.post('/items', async (req, res) => {\n       const item = new Item(req.body);\n       await item.save();\n       res.send(item);\n   });\n   ```\n\n6. Start the server:\n   ```javascript\n   app.listen(3000, () => console.log('Server running on port 3000')); \n   ```\n\nOnce you've completed the above steps, your Express application should be able to handle basic RESTful API requests with MongoDB.",
        "start_char": 0,
        "end_char": 1331,
        "key_answer": "The steps to create a RESTful API using Express and MongoDB are as follows:\n\n1. Set up a new Node.js project:\n   - Run `npm init -y` to create a package.json file.\n\n2. Install required packages:\n   - Run `npm install express mongoose body-parser`.\n\n3. Create a basic Express server:\n   ```javascript\n   const express = require('express');\n   const bodyParser = require('body-parser');\n   const mongoose = require('mongoose');\n\n   const app = express();\n   app.use(bodyParser.json());\n\n   mongoose.connect('mongodb://localhost/my_database', { useNewUrlParser: true, useUnifiedTopology: true });\n   ```\n\n4. Define a Mongoose model:\n   ```javascript\n   const Item = mongoose.model('Item', new mongoose.Schema({ name: String }));\n   ```\n\n5. Create RESTful routes:\n   ```javascript\n   app.get('/items', async (req, res) => {\n       const items = await Item.find();\n       res.send(items);\n   });\n\n   app.post('/items', async (req, res) => {\n       const item = new Item(req.body);\n       await item.save();\n       res.send(item);\n   });\n   ```\n\n6. Start the server:\n   ```javascript\n   app.listen(3000, () => console.log('Server running on port 3000')); \n   ```\n\nOnce you've completed the above steps, your Express application should be able to handle basic RESTful API requests with MongoDB."
    },
    {
        "question": "How to use Docker Compose to manage multi-container applications?",
        "label": "docker,compose",
        "language": "en",
        "context": "Docker Compose simplifies the management of multi-container Docker applications.",
        "answer": "The steps to use Docker Compose are as follows:\n\n1. Create a `docker-compose.yml` file:\n   ```yaml\n   version: '3'\n   services:\n     web:\n       image: nginx\n       ports:\n         - '80:80'\n     db:\n       image: postgres\n       environment:\n         POSTGRES_PASSWORD: mysecretpassword\n   ```\n   - This file defines a web service using Nginx and a database service using PostgreSQL.\n\n2. Start the application:\n   - Run the command `docker-compose up` to start both services defined in the `docker-compose.yml` file.\n\n3. Access the web service:\n   - Open a web browser and navigate to `http://localhost` to see the Nginx welcome page.\n\n4. Stop the application:\n   - Use `docker-compose down` to stop and remove the containers defined in the Compose file.",
        "start_char": 0,
        "end_char": 779,
        "key_answer": "The steps to use Docker Compose are as follows:\n\n1. Create a `docker-compose.yml` file:\n   ```yaml\n   version: '3'\n   services:\n     web:\n       image: nginx\n       ports:\n         - '80:80'\n     db:\n       image: postgres\n       environment:\n         POSTGRES_PASSWORD: mysecretpassword\n   ```\n   - This file defines a web service using Nginx and a database service using PostgreSQL.\n\n2. Start the application:\n   - Run the command `docker-compose up` to start both services defined in the `docker-compose.yml` file.\n\n3. Access the web service:\n   - Open a web browser and navigate to `http://localhost` to see the Nginx welcome page.\n\n4. Stop the application:\n   - Use `docker-compose down` to stop and remove the containers defined in the Compose file."
    },
    {
        "question": "How to use Vue Router in a Vue.js application?",
        "label": "vue,router",
        "language": "en",
        "context": "Vue Router is the official router for Vue.js, enabling navigation between components.",
        "answer": "The steps to use Vue Router in a Vue.js application are as follows:\n\n1. Install Vue Router:\n   - Run the command `npm install vue-router`.\n\n2. Create a router configuration:\n   ```javascript\n   import Vue from 'vue';\n   import Router from 'vue-router';\n   import Home from './components/Home.vue';\n   import About from './components/About.vue';\n\n   Vue.use(Router);\n\n   export default new Router({\n       routes: [\n           { path: '/', component: Home },\n           { path: '/about', component: About }\n       ]\n   });\n   ```\n\n3. Integrate the router into your Vue instance:\n   ```javascript\n   import Vue from 'vue';\n   import App from './App.vue';\n   import router from './router';\n\n   new Vue({\n       render: h => h(App),\n       router\n   }).$mount('#app');\n   ```\n\n4. Use `<router-view>` in your App component:\n   ```html\n   <template>\n       <div id=\"app\">\n           <router-view></router-view>\n       </div>\n   </template>\n   ```\n\nOnce you've completed the above steps, your Vue.js application should be able to navigate between the Home and About components using Vue Router.",
        "start_char": 0,
        "end_char": 1132,
        "key_answer": "The steps to use Vue Router in a Vue.js application are as follows:\n\n1. Install Vue Router:\n   - Run the command `npm install vue-router`.\n\n2. Create a router configuration:\n   ```javascript\n   import Vue from 'vue';\n   import Router from 'vue-router';\n   import Home from './components/Home.vue';\n   import About from './components/About.vue';\n\n   Vue.use(Router);\n\n   export default new Router({\n       routes: [\n           { path: '/', component: Home },\n           { path: '/about', component: About }\n       ]\n   });\n   ```\n\n3. Integrate the router into your Vue instance:\n   ```javascript\n   import Vue from 'vue';\n   import App from './App.vue';\n   import router from './router';\n\n   new Vue({\n       render: h => h(App),\n       router\n   }).$mount('#app');\n   ```\n\n4. Use `<router-view>` in your App component:\n   ```html\n   <template>\n       <div id=\"app\">\n           <router-view></router-view>\n       </div>\n   </template>\n   ```\n\nOnce you've completed the above steps, your Vue.js application should be able to navigate between the Home and About components using Vue Router."
    },
    {
        "question": "How to implement authentication in a Node.js application?",
        "label": "nodejs,authentication",
        "language": "en",
        "context": "Implementing authentication is crucial for securing applications.",
        "answer": "The steps to implement authentication in a Node.js application are as follows:\n\n1. Install required packages:\n   - Run `npm install express bcryptjs jsonwebtoken`.\n\n2. Set up Express server:\n   ```javascript\n   const express = require('express');\n   const bcrypt = require('bcryptjs');\n   const jwt = require('jsonwebtoken');\n   const app = express();\n   app.use(express.json());\n   ```\n\n3. Create a user model (for example, using Mongoose):\n   ```javascript\n   const User = mongoose.model('User ', new mongoose.Schema({\n       username: { type: String, required: true },\n       password: { type: String, required: true }\n   }));\n   ```\n\n4. Create registration and login routes:\n   ```javascript\n   app.post('/register', async (req, res) => {\n       const hashedPassword = await bcrypt.hash(req.body.password, 10);\n       const user = new User({ username: req.body.username, password: hashedPassword });\n       await user.save();\n       res.status(201).send();\n   });\n\n   app.post('/login', async (req, res) => {\n       const user = await User.findOne({ username: req.body.username });\n       if (!user || !(await bcrypt.compare(req.body.password, user.password))) {\n           return res.status(400).send('Invalid credentials');\n       }\n       const token = jwt.sign({ id: user._id }, 'secret', { expiresIn: '1h' });\n       res.json({ token });\n   });\n   ```\n\n5. Start the server:\n   ```javascript\n   app.listen(3000, () => console.log('Server running on port 3000'));\n   ```\n\nOnce you've completed the above steps, your Node.js application should be able to handle user registration and authentication.",
        "start_char": 0,
        "end_char": 1651,
        "key_answer": "The steps to implement authentication in a Node.js application are as follows:\n\n1. Install required packages:\n   - Run `npm install express bcryptjs jsonwebtoken`.\n\n2. Set up Express server:\n   ```javascript\n   const express = require('express');\n   const bcrypt = require('bcryptjs');\n   const jwt = require('jsonwebtoken');\n   const app = express();\n   app.use(express.json());\n   ```\n\n3. Create a user model (for example, using Mongoose):\n   ```javascript\n   const User = mongoose.model('User ', new mongoose.Schema({\n       username: { type: String, required: true },\n       password: { type: String, required: true }\n   }));\n   ```\n\n4. Create registration and login routes:\n   ```javascript\n   app.post('/register', async (req, res) => {\n       const hashedPassword = await bcrypt.hash(req.body.password, 10);\n       const user = new User({ username: req.body.username, password: hashedPassword });\n       await user.save();\n       res.status(201).send();\n   });\n\n   app.post('/login', async (req, res) => {\n       const user = await User.findOne({ username: req.body.username });\n       if (!user || !(await bcrypt.compare(req.body.password, user.password))) {\n           return res.status(400).send('Invalid credentials');\n       }\n       const token = jwt.sign({ id: user._id }, 'secret', { expiresIn: '1h' });\n       res.json({ token });\n   });\n   ```\n\n5. Start the server:\n   ```javascript\n   app.listen(3000, () => console.log('Server running on port 3000'));\n   ```\n\nOnce you've completed the above steps, your Node.js application should be able to handle user registration and authentication."
    },
    {
        "question": "How to implement a simple CRUD application using Angular and Spring Boot?",
        "label": "angular,springboot",
        "language": "en",
        "context": "Combining Angular with Spring Boot allows for a full-stack application.",
        "answer": "The steps to implement a simple CRUD application using Angular and Spring Boot are as follows:\n\n1. Set up Spring Boot application:\n   - Create a new Spring Boot project using Spring Initializr with dependencies for Spring Web and Spring Data JPA.\n\n2. Create a model class:\n   ```java\n   @Entity\n   public class Item {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n       private String name;\n   }\n   ```\n\n3. Create a repository interface:\n   ```java\n   public interface ItemRepository extends JpaRepository<Item, Long> {}\n   ```\n\n4. Create a REST controller:\n   ```java\n   @RestController\n   @RequestMapping(\"/api/items\")\n   public class ItemController {\n       @Autowired\n       private ItemRepository itemRepository;\n\n       @GetMapping\n       public List<Item> getAllItems() {\n           return itemRepository.findAll();\n       }\n\n       @PostMapping\n       public Item createItem(@RequestBody Item item) {\n           return itemRepository.save(item);\n       }\n   }\n   ```\n\n5. Set up Angular application:\n   - Create a new Angular application using `ng new my-app`.\n\n6. Create a service to interact with the API:\n   ```javascript\n   import { Injectable } from '@angular/core';\n   import { HttpClient } from '@angular/common/http';\n   import { Observable } from 'rxjs';\n\n   @Injectable({ providedIn: 'root' })\n   export class ItemService {\n       private apiUrl = 'http://localhost:8080/api/items';\n\n       constructor(private http: HttpClient) {}\n\n       getItems(): Observable<Item[]> {\n           return this.http.get<Item[]>(this.apiUrl);\n       }\n\n       createItem(item: Item): Observable<Item> {\n           return this.http.post<Item>(this.apiUrl, item);\n       }\n   }\n   ```\n\n7. Use the service in a component:\n   ```javascript\n   import { Component, OnInit } from '@angular/core';\n   import { ItemService } from './item.service';\n\n   @Component({ selector: 'app-item-list', templateUrl: './item-list.component.html' })\n   export class ItemListComponent implements OnInit {\n       items: Item[] = [];\n\n       constructor(private itemService: ItemService) {}\n\n       ngOnInit() {\n           this.itemService.getItems().subscribe(data => this.items = data);\n       }\n   }\n   ```\n\nOnce you've completed the above steps, your Angular application should be able to perform CRUD operations with the Spring Boot backend.",
        "start_char": 0,
        "end_char": 2456,
        "key_answer": "The steps to implement a simple CRUD application using Angular and Spring Boot are as follows:\n\n1. Set up Spring Boot application:\n   - Create a new Spring Boot project using Spring Initializr with dependencies for Spring Web and Spring Data JPA.\n\n2. Create a model class:\n   ```java\n   @Entity\n   public class Item {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n       private String name;\n   }\n   ```\n\n3. Create a repository interface:\n   ```java\n   public interface ItemRepository extends JpaRepository<Item, Long> {}\n   ```\n\n4. Create a REST controller:\n   ```java\n   @RestController\n   @RequestMapping(\"/api/items\")\n   public class ItemController {\n       @Autowired\n       private ItemRepository itemRepository;\n\n       @GetMapping\n       public List<Item> getAllItems() {\n           return itemRepository.findAll();\n       }\n\n       @PostMapping\n       public Item createItem(@RequestBody Item item) {\n           return itemRepository.save(item);\n       }\n   }\n   ```\n\n5. Set up Angular application:\n   - Create a new Angular application using `ng new my-app`.\n\n6. Create a service to interact with the API:\n   ```javascript\n   import { Injectable } from '@angular/core';\n   import { HttpClient } from '@angular/common/http';\n   import { Observable } from 'rxjs';\n\n   @Injectable({ providedIn: 'root' })\n   export class ItemService {\n       private apiUrl = 'http://localhost:8080/api/items';\n\n       constructor(private http: HttpClient) {}\n\n       getItems(): Observable<Item[]> {\n           return this.http.get<Item[]>(this.apiUrl);\n       }\n\n       createItem(item: Item): Observable<Item> {\n           return this.http.post<Item>(this.apiUrl, item);\n       }\n   }\n   ```\n\n7. Use the service in a component:\n   ```javascript\n   import { Component, OnInit } from '@angular/core';\n   import { ItemService } from './item.service';\n\n   @Component({ selector: 'app-item-list', templateUrl: './item-list.component.html' })\n   export class ItemListComponent implements OnInit {\n       items: Item[] = [];\n\n       constructor(private itemService: ItemService) {}\n\n       ngOnInit() {\n           this.itemService.getItems().subscribe(data => this.items = data);\n       }\n   }\n   ```\n\nOnce you've completed the above steps, your Angular application should be able to perform CRUD operations with the Spring Boot backend."
    },
    {
        "question": "How to use Git for version control in a project?",
        "label": "git,versioncontrol",
        "language": "en",
        "context": "Git is a distributed version control system that helps manage code changes.",
        "answer": "The steps to use Git for version control are as follows:\n\n1. Initialize a new Git repository:\n   - Run `git init` in your project directory.\n\n2. Add files to the staging area:\n   - Use `git add .` to stage all files or `git add filename` to stage specific files.\n\n3. Commit changes:\n   - Run `git commit -m 'Initial commit'` to save your changes with a message.\n\n4. Create a new branch:\n   - Use `git checkout -b new-branch-name` to create and switch to a new branch.\n\n5. Push changes to a remote repository:\n   - First, add a remote repository using `git remote add origin https://github.com/username/repo.git`.\n   - Then push changes using `git push -u origin new-branch-name`.\n\n6. Pull changes from a remote repository:\n   - Use `git pull origin branch-name` to fetch and merge changes from the remote repository.\n\n7. View commit history:\n   - Run `git log` to see the commit history.",
        "start_char": 0,
        "end_char": 909,
        "key_answer": "The steps to use Git for version control are as follows:\n\n1. Initialize a new Git repository:\n   - Run `git init` in your project directory.\n\n2. Add files to the staging area:\n   - Use `git add .` to stage all files or `git add filename` to stage specific files.\n\n3. Commit changes:\n   - Run `git commit -m 'Initial commit'` to save your changes with a message.\n\n4. Create a new branch:\n   - Use `git checkout -b new-branch-name` to create and switch to a new branch.\n\n5. Push changes to a remote repository:\n   - First, add a remote repository using `git remote add origin https://github.com/username/repo.git`.\n   - Then push changes using `git push -u origin new-branch-name`.\n\n6. Pull changes from a remote repository:\n   - Use `git pull origin branch-name` to fetch and merge changes from the remote repository.\n\n7. View commit history:\n   - Run `git log` to see the commit history."
    },
    {
        "question": "How to implement error handling in a JavaScript application?",
        "label": "javascript,errorhandling",
        "language": "en",
        "context": "Error handling is crucial for maintaining application stability.",
        "answer": "The steps to implement error handling in a JavaScript application are as follows:\n\n1. Use try-catch blocks:\n   ```javascript\n   try {\n       // Code that may throw an error\n   } catch (error) {\n       console.error('Error occurred:', error);\n   }\n   ```\n\n2. Handle asynchronous errors:\n   - For Promises:\n   ```javascript\n   someAsyncFunction()\n       .then(result => {\n           // Handle result\n       })\n       .catch(error => {\n           console.error('Async error:', error);\n       });\n   ```\n   - For async/await:\n   ```javascript\n   async function fetchData() {\n       try {\n           const response = await fetch('https://api.example.com/data');\n           const data = await response.json();\n       } catch (error) {\n           console.error('Fetch error:', error);\n       }\n   }\n   ```\n\n3. Use global error handlers:\n   - For browser errors:\n   ```javascript\n   window.onerror = function(message, source, lineno, colno, error) {\n       console.error('Global error:', message);\n   };\n   ```\n\n4. Log errors to an external service:\n   - Use services like Sentry or Loggly to track errors in production.",
        "start_char": 0,
        "end_char": 1155,
        "key_answer": "The steps to implement error handling in a JavaScript application are as follows:\n\n1. Use try-catch blocks:\n   ```javascript\n   try {\n       // Code that may throw an error\n   } catch (error) {\n       console.error('Error occurred:', error);\n   }\n   ```\n\n2. Handle asynchronous errors:\n   - For Promises:\n   ```javascript\n   someAsyncFunction()\n       .then(result => {\n           // Handle result\n       })\n       .catch(error => {\n           console.error('Async error:', error);\n       });\n   ```\n   - For async/await:\n   ```javascript\n   async function fetchData() {\n       try {\n           const response = await fetch('https://api.example.com/data');\n           const data = await response.json();\n       } catch (error) {\n           console.error('Fetch error:', error);\n       }\n   }\n   ```\n\n3. Use global error handlers:\n   - For browser errors:\n   ```javascript\n   window.onerror = function(message, source, lineno, colno, error) {\n       console.error('Global error:', message);\n   };\n   ```\n\n4. Log errors to an external service:\n   - Use services like Sentry or Loggly to track errors in production."
    },
    {
        "question": "How to use Python's Flask framework to create a web application?",
        "label": "python,flask",
        "language": "en",
        "context": "Flask is a lightweight WSGI web application framework in Python.",
        "answer": "The steps to create a web application using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a basic Flask application:\n   ```python\n   from flask import Flask\n   app = Flask(__name__)\n\n   @app.route('/')\n   def home():\n       return 'Hello, Flask!'\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n3. Run the application:\n   - Execute the script using `python app.py`.\n\n4. Access the application:\n   - Open a web browser and navigate to `http://127.0.0.1:5000` to see your Flask application running.",
        "start_char": 0,
        "end_char": 572,
        "key_answer": "The steps to create a web application using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a basic Flask application:\n   ```python\n   from flask import Flask\n   app = Flask(__name__)\n\n   @app.route('/')\n   def home():\n       return 'Hello, Flask!'\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n3. Run the application:\n   - Execute the script using `python app.py`.\n\n4. Access the application:\n   - Open a web browser and navigate to `http://127.0.0.1:5000` to see your Flask application running."
    },
    {
        "question": "How to implement a simple chat application using Socket.IO and Node.js?",
        "label": "nodejs,socketio",
        "language": "en",
        "context": "Socket.IO enables real-time, bidirectional communication between web clients and servers.",
        "answer": "The steps to implement a simple chat application using Socket.IO and Node.js are as follows:\n\n1. Set up a new Node.js project:\n   - Run `npm init -y` to create a package.json file.\n\n2. Install required packages:\n   - Run `npm install express socket.io`.\n\n3. Create a basic Express server with Socket.IO:\n   ```javascript\n   const express = require('express');\n   const http = require('http');\n   const socketIo = require('socket.io');\n\n   const app = express();\n   const server = http.createServer(app);\n   const io = socketIo(server);\n\n   app.get('/', (req, res) => {\n       res.sendFile(__dirname + '/index.html');\n   });\n\n   io.on('connection', (socket) => {\n       console.log('A user connected');\n       socket.on('chat message', (msg) => {\n           io.emit('chat message', msg);\n       });\n       socket.on('disconnect', () => {\n           console.log('User  disconnected');\n       });\n   });\n\n   server.listen(3000, () => {\n       console.log('Server running on port 3000');\n   });\n   ```\n\n4. Create an HTML file (index.html):\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Chat App</title>\n       <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n       <script src=\"https://cdn.socket.io/4.0.0/socket.io.min.js\"></script>\n       <script>\n           $(function () {\n               var socket = io();\n               $('form').submit(function() {\n                   socket.emit('chat message', $('#m').val());\n                   $('#m').val('');\n                   return false;\n               });\n               socket.on('chat message', function(msg) {\n                   $('#messages').append($('<li>').text(msg));\n               });\n           });\n       </script>\n   </head>\n   <body>\n       <ul id=\"messages\"></ul>\n       <form action=\"\">\n           <input id=\"m\" autocomplete=\"off\" /><button>Send</button>\n       </form>\n   </body>\n   </html>\n   ```\n\n5. Run the application:\n   - Execute the script using `node app.js`.\n\n6. Open a web browser:\n   - Navigate to `http://localhost:3000` to see your chat application in action.",
        "start_char": 0,
        "end_char": 2158,
        "key_answer": "The steps to implement a simple chat application using Socket.IO and Node.js are as follows:\n\n1. Set up a new Node.js project:\n   - Run `npm init -y` to create a package.json file.\n\n2. Install required packages:\n   - Run `npm install express socket.io`.\n\n3. Create a basic Express server with Socket.IO:\n   ```javascript\n   const express = require('express');\n   const http = require('http');\n   const socketIo = require('socket.io');\n\n   const app = express();\n   const server = http.createServer(app);\n   const io = socketIo(server);\n\n   app.get('/', (req, res) => {\n       res.sendFile(__dirname + '/index.html');\n   });\n\n   io.on('connection', (socket) => {\n       console.log('A user connected');\n       socket.on('chat message', (msg) => {\n           io.emit('chat message', msg);\n       });\n       socket.on('disconnect', () => {\n           console.log('User  disconnected');\n       });\n   });\n\n   server.listen(3000, () => {\n       console.log('Server running on port 3000');\n   });\n   ```\n\n4. Create an HTML file (index.html):\n   ```html\n   <!DOCTYPE html>\n   <html>\n   <head>\n       <title>Chat App</title>\n       <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n       <script src=\"https://cdn.socket.io/4.0.0/socket.io.min.js\"></script>\n       <script>\n           $(function () {\n               var socket = io();\n               $('form').submit(function() {\n                   socket.emit('chat message', $('#m').val());\n                   $('#m').val('');\n                   return false;\n               });\n               socket.on('chat message', function(msg) {\n                   $('#messages').append($('<li>').text(msg));\n               });\n           });\n       </script>\n   </head>\n   <body>\n       <ul id=\"messages\"></ul>\n       <form action=\"\">\n           <input id=\"m\" autocomplete=\"off\" /><button>Send</button>\n       </form>\n   </body>\n   </html>\n   ```\n\n5. Run the application:\n   - Execute the script using `node app.js`.\n\n6. Open a web browser:\n   - Navigate to `http://localhost:3000` to see your chat application in action."
    },
    {
        "question": "How to use the Fetch API to make HTTP requests in JavaScript?",
        "label": "javascript,fetch",
        "language": "en",
        "context": "The Fetch API provides a modern way to make HTTP requests in JavaScript.",
        "answer": "The steps to use the Fetch API to make HTTP requests are as follows:\n\n1. Make a GET request:\n   ```javascript\n   fetch('https://api.example.com/data')\n       .then(response => {\n           if (!response.ok) {\n               throw new Error('Network response was not ok');\n           }\n           return response.json();\n       })\n       .then(data => console.log(data))\n       .catch(error => console.error('There was a problem with the fetch operation:', error));\n   ```\n\n2. Make a POST request:\n   ```javascript\n   fetch('https://api.example.com/data', {\n       method: 'POST',\n       headers: {\n           'Content-Type': 'application/json'\n       },\n       body: JSON.stringify({ key: 'value' })\n   })\n       .then(response => response.json())\n       .then(data => console.log(data))\n       .catch(error => console.error('Error:', error));\n   ```\n\n3. Handle errors:\n   - Use `.catch()` to handle any errors that occur during the fetch operation.",
        "start_char": 0,
        "end_char": 979,
        "key_answer": "The steps to use the Fetch API to make HTTP requests are as follows:\n\n1. Make a GET request:\n   ```javascript\n   fetch('https://api.example.com/data')\n       .then(response => {\n           if (!response.ok) {\n               throw new Error('Network response was not ok');\n           }\n           return response.json();\n       })\n       .then(data => console.log(data))\n       .catch(error => console.error('There was a problem with the fetch operation:', error));\n   ```\n\n2. Make a POST request:\n   ```javascript\n   fetch('https://api.example.com/data', {\n       method: 'POST',\n       headers: {\n           'Content-Type': 'application/json'\n       },\n       body: JSON.stringify({ key: 'value' })\n   })\n       .then(response => response.json())\n       .then(data => console.log(data))\n       .catch(error => console.error('Error:', error));\n   ```\n\n3. Handle errors:\n   - Use `.catch()` to handle any errors that occur during the fetch operation."
    },
    {
        "question": "How to create a simple Python web application using Flask?",
        "label": "python,flask",
        "language": "en",
        "context": "Flask is a lightweight web framework for Python.",
        "answer": "The steps to create a simple web application using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a basic Flask application:\n   ```python\n   from flask import Flask\n   app = Flask(__name__)\n\n   @app.route('/')\n   def home():\n       return 'Hello, Flask!'\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n3. Run the application:\n   - Execute the script using `python app.py`.\n\n4. Access the application:\n   - Open a web browser and navigate to `http://127.0.0.1:5000` to see your Flask application running.",
        "start_char": 0,
        "end_char": 579,
        "key_answer": "The steps to create a simple web application using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a basic Flask application:\n   ```python\n   from flask import Flask\n   app = Flask(__name__)\n\n   @app.route('/')\n   def home():\n       return 'Hello, Flask!'\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n3. Run the application:\n   - Execute the script using `python app.py`.\n\n4. Access the application:\n   - Open a web browser and navigate to `http://127.0.0.1:5000` to see your Flask application running."
    },
    {
        "question": "How to use Git to manage version control in a project?",
        "label": "git,versioncontrol",
        "language": "en",
        "context": "Git is a distributed version control system that helps manage code changes.",
        "answer": "The steps to use Git for version control are as follows:\n\n1. Initialize a new Git repository:\n   - Run `git init` in your project directory.\n\n2. Add files to the staging area:\n   - Use `git add .` to stage all files or `git add filename` to stage specific files.\n\n3. Commit changes:\n   - Run `git commit -m 'Initial commit'` to save your changes with a message.\n\n4. Create a new branch:\n   - Use `git checkout -b new-branch-name` to create and switch to a new branch.\n\n5. Push changes to a remote repository:\n   - First, add a remote repository using `git remote add origin https://github.com/username/repo.git`.\n   - Then push changes using `git push -u origin new-branch-name`.\n\n6. Pull changes from a remote repository:\n   - Use `git pull origin branch-name` to fetch and merge changes from the remote repository.\n\n7. View commit history:\n   - Run `git log` to see the commit history.",
        "start_char": 0,
        "end_char": 909,
        "key_answer": "The steps to use Git for version control are as follows:\n\n1. Initialize a new Git repository:\n   - Run `git init` in your project directory.\n\n2. Add files to the staging area:\n   - Use `git add .` to stage all files or `git add filename` to stage specific files.\n\n3. Commit changes:\n   - Run `git commit -m 'Initial commit'` to save your changes with a message.\n\n4. Create a new branch:\n   - Use `git checkout -b new-branch-name` to create and switch to a new branch.\n\n5. Push changes to a remote repository:\n   - First, add a remote repository using `git remote add origin https://github.com/username/repo.git`.\n   - Then push changes using `git push -u origin new-branch-name`.\n\n6. Pull changes from a remote repository:\n   - Use `git pull origin branch-name` to fetch and merge changes from the remote repository.\n\n7. View commit history:\n   - Run `git log` to see the commit history."
    },
    {
        "question": "How to create a simple CRUD application using Angular and Spring Boot?",
        "label": "angular,springboot",
        "language": "en",
        "context": "Combining Angular with Spring Boot allows for a full-stack application.",
        "answer": "The steps to create a simple CRUD application using Angular and Spring Boot are as follows:\n\n1. Set up Spring Boot application:\n   - Create a new Spring Boot project using Spring Initializr with dependencies for Spring Web and Spring Data JPA.\n\n2. Create a model class:\n   ```java\n   @Entity\n   public class Item {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n       private String name;\n   }\n   ```\n\n3. Create a repository interface:\n   ```java\n   public interface ItemRepository extends JpaRepository<Item, Long> {}\n   ```\n\n4. Create a REST controller:\n   ```java\n   @RestController\n   @RequestMapping(\"/api/items\")\n   public class ItemController {\n       @Autowired\n       private ItemRepository itemRepository;\n\n       @GetMapping\n       public List<Item> getAllItems() {\n           return itemRepository.findAll();\n       }\n\n       @PostMapping\n       public Item createItem(@RequestBody Item item) {\n           return itemRepository.save(item);\n       }\n   }\n   ```\n\n5. Set up Angular application:\n   - Create a new Angular application using `ng new my-app`.\n\n6. Create a service to interact with the API:\n   ```javascript\n   import { Injectable } from '@angular/core';\n   import { HttpClient } from '@angular/common/http';\n   import { Observable } from 'rxjs';\n\n   @Injectable({ providedIn: 'root' })\n   export class ItemService {\n       private apiUrl = 'http://localhost:8080/api/items';\n\n       constructor(private http: HttpClient) {}\n\n       getItems(): Observable<Item[]> {\n           return this.http.get<Item[]>(this.apiUrl);\n       }\n\n       createItem(item: Item): Observable<Item> {\n           return this.http.post<Item>(this.apiUrl, item);\n       }\n   }\n   ```\n\n7. Use the service in a component:\n   ```javascript\n   import { Component, OnInit } from '@angular/core';\n   import { ItemService } from './item.service';\n\n   @Component({ selector: 'app-item-list', templateUrl: './item-list.component.html' })\n   export class ItemListComponent implements OnInit {\n       items: Item[] = [];\n\n       constructor(private itemService: ItemService) {}\n\n       ngOnInit() {\n           this.itemService.getItems().subscribe(data => this.items = data);\n       }\n   }\n   ```\n\nOnce you've completed the above steps, your Angular application should be able to perform CRUD operations with the Spring Boot backend.",
        "start_char": 0,
        "end_char": 2453,
        "key_answer": "The steps to create a simple CRUD application using Angular and Spring Boot are as follows:\n\n1. Set up Spring Boot application:\n   - Create a new Spring Boot project using Spring Initializr with dependencies for Spring Web and Spring Data JPA.\n\n2. Create a model class:\n   ```java\n   @Entity\n   public class Item {\n       @Id\n       @GeneratedValue(strategy = GenerationType.IDENTITY)\n       private Long id;\n       private String name;\n   }\n   ```\n\n3. Create a repository interface:\n   ```java\n   public interface ItemRepository extends JpaRepository<Item, Long> {}\n   ```\n\n4. Create a REST controller:\n   ```java\n   @RestController\n   @RequestMapping(\"/api/items\")\n   public class ItemController {\n       @Autowired\n       private ItemRepository itemRepository;\n\n       @GetMapping\n       public List<Item> getAllItems() {\n           return itemRepository.findAll();\n       }\n\n       @PostMapping\n       public Item createItem(@RequestBody Item item) {\n           return itemRepository.save(item);\n       }\n   }\n   ```\n\n5. Set up Angular application:\n   - Create a new Angular application using `ng new my-app`.\n\n6. Create a service to interact with the API:\n   ```javascript\n   import { Injectable } from '@angular/core';\n   import { HttpClient } from '@angular/common/http';\n   import { Observable } from 'rxjs';\n\n   @Injectable({ providedIn: 'root' })\n   export class ItemService {\n       private apiUrl = 'http://localhost:8080/api/items';\n\n       constructor(private http: HttpClient) {}\n\n       getItems(): Observable<Item[]> {\n           return this.http.get<Item[]>(this.apiUrl);\n       }\n\n       createItem(item: Item): Observable<Item> {\n           return this.http.post<Item>(this.apiUrl, item);\n       }\n   }\n   ```\n\n7. Use the service in a component:\n   ```javascript\n   import { Component, OnInit } from '@angular/core';\n   import { ItemService } from './item.service';\n\n   @Component({ selector: 'app-item-list', templateUrl: './item-list.component.html' })\n   export class ItemListComponent implements OnInit {\n       items: Item[] = [];\n\n       constructor(private itemService: ItemService) {}\n\n       ngOnInit() {\n           this.itemService.getItems().subscribe(data => this.items = data);\n       }\n   }\n   ```\n\nOnce you've completed the above steps, your Angular application should be able to perform CRUD operations with the Spring Boot backend."
    },
    {
        "question": "How to use the Java Stream API for data processing?",
        "label": "java,streamapi",
        "language": "en",
        "context": "The Java Stream API provides a functional approach to processing sequences of elements.",
        "answer": "The steps to use the Java Stream API for data processing are as follows:\n\n1. Create a list of items:\n   ```java\n   List<String> items = Arrays.asList(\"apple\", \"banana\", \"orange\", \"grape\");\n   ```\n\n2. Use streams to filter and process data:\n   ```java\n   List<String> filteredItems = items.stream()\n       .filter(item -> item.startsWith(\"a\"))\n       .collect(Collectors.toList());\n   System.out.println(filteredItems); // Output: [apple]\n   ```\n\n3. Use streams to perform operations like mapping and reducing:\n   ```java\n   int totalLength = items.stream()\n       .map(String::length)\n       .reduce(0, Integer::sum);\n   System.out.println(totalLength); // Output: total length of all items\n   ```\n\n4. Use parallel streams for performance:\n   ```java\n   List<String> parallelFilteredItems = items.parallelStream()\n       .filter(item -> item.length() > 5)\n       .collect(Collectors.toList());\n   ```\n\nOnce you've completed the above steps, you can effectively use the Java Stream API for data processing tasks.",
        "start_char": 0,
        "end_char": 1051,
        "key_answer": "The steps to use the Java Stream API for data processing are as follows:\n\n1. Create a list of items:\n   ```java\n   List<String> items = Arrays.asList(\"apple\", \"banana\", \"orange\", \"grape\");\n   ```\n\n2. Use streams to filter and process data:\n   ```java\n   List<String> filteredItems = items.stream()\n       .filter(item -> item.startsWith(\"a\"))\n       .collect(Collectors.toList());\n   System.out.println(filteredItems); // Output: [apple]\n   ```\n\n3. Use streams to perform operations like mapping and reducing:\n   ```java\n   int totalLength = items.stream()\n       .map(String::length)\n       .reduce(0, Integer::sum);\n   System.out.println(totalLength); // Output: total length of all items\n   ```\n\n4. Use parallel streams for performance:\n   ```java\n   List<String> parallelFilteredItems = items.parallelStream()\n       .filter(item -> item.length() > 5)\n       .collect(Collectors.toList());\n   ```\n\nOnce you've completed the above steps, you can effectively use the Java Stream API for data processing tasks."
    },
    {
        "question": "How to implement a simple machine learning model using Python and scikit-learn?",
        "label": "python,machinelearning,scikit-learn",
        "language": "en",
        "context": "Scikit-learn is a popular library for machine learning in Python.",
        "answer": "The steps to implement a simple machine learning model using Python and scikit-learn are as follows:\n\n1. Install scikit-learn:\n   - Run `pip install scikit-learn`.\n\n2. Import necessary libraries:\n   ```python\n   import numpy as np\n   from sklearn.model_selection import train_test_split\n   from sklearn.datasets import load_iris\n   from sklearn.ensemble import RandomForestClassifier\n   ```\n\n3. Load the dataset:\n   ```python\n   iris = load_iris()\n   X = iris.data\n   y = iris.target\n   ```\n\n4. Split the dataset into training and testing sets:\n   ```python\n   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n   ```\n\n5. Create and train the model:\n   ```python\n   model = RandomForestClassifier()\n   model.fit(X_train, y_train)\n   ```\n\n6. Make predictions:\n   ```python\n   predictions = model.predict(X_test)\n   ```\n\n7. Evaluate the model:\n   ```python\n   from sklearn.metrics import accuracy_score\n   accuracy = accuracy_score(y_test, predictions)\n   print(f'Accuracy: {accuracy}')\n   ```\n\nOnce you've completed the above steps, you will have a simple machine learning model that can classify iris species based on the dataset.",
        "start_char": 0,
        "end_char": 1213,
        "key_answer": "The steps to implement a simple machine learning model using Python and scikit-learn are as follows:\n\n1. Install scikit-learn:\n   - Run `pip install scikit-learn`.\n\n2. Import necessary libraries:\n   ```python\n   import numpy as np\n   from sklearn.model_selection import train_test_split\n   from sklearn.datasets import load_iris\n   from sklearn.ensemble import RandomForestClassifier\n   ```\n\n3. Load the dataset:\n   ```python\n   iris = load_iris()\n   X = iris.data\n   y = iris.target\n   ```\n\n4. Split the dataset into training and testing sets:\n   ```python\n   X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n   ```\n\n5. Create and train the model:\n   ```python\n   model = RandomForestClassifier()\n   model.fit(X_train, y_train)\n   ```\n\n6. Make predictions:\n   ```python\n   predictions = model.predict(X_test)\n   ```\n\n7. Evaluate the model:\n   ```python\n   from sklearn.metrics import accuracy_score\n   accuracy = accuracy_score(y_test, predictions)\n   print(f'Accuracy: {accuracy}')\n   ```\n\nOnce you've completed the above steps, you will have a simple machine learning model that can classify iris species based on the dataset."
    },
    {
        "question": "How to create a simple web server using Node.js?",
        "label": "nodejs,http",
        "language": "en",
        "context": "Node.js allows you to create a web server easily using the built-in HTTP module.",
        "answer": "The steps to create a simple web server using Node.js are as follows:\n\n1. Create a new JavaScript file (e.g., `server.js`).\n\n2. Import the HTTP module:\n   ```javascript\n   const http = require('http');\n   ```\n\n3. Create the server:\n   ```javascript\n   const server = http.createServer((req, res) => {\n       res.statusCode = 200;\n       res.setHeader('Content-Type', 'text/plain');\n       res.end('Hello, World!\\n');\n   });\n   ```\n\n4. Start the server:\n   ```javascript\n   const PORT = 3000;\n   server.listen(PORT, () => {\n       console.log(`Server running at http://localhost:${PORT}/`);\n   });\n   ```\n\n5. Run the server:\n   - Execute the script using `node server.js`.\n\n6. Access the server:\n   - Open a web browser and navigate to `http://localhost:3000` to see the message.",
        "start_char": 0,
        "end_char": 809,
        "key_answer": "The steps to create a simple web server using Node.js are as follows:\n\n1. Create a new JavaScript file (e.g., `server.js`).\n\n2. Import the HTTP module:\n   ```javascript\n   const http = require('http');\n   ```\n\n3. Create the server:\n   ```javascript\n   const server = http.createServer((req, res) => {\n       res.statusCode = 200;\n       res.setHeader('Content-Type', 'text/plain');\n       res.end('Hello, World!\\n');\n   });\n   ```\n\n4. Start the server:\n   ```javascript\n   const PORT = 3000;\n   server.listen(PORT, () => {\n       console.log(`Server running at http://localhost:${PORT}/`);\n   });\n   ```\n\n5. Run the server:\n   - Execute the script using `node server.js`.\n\n6. Access the server:\n   - Open a web browser and navigate to `http://localhost:3000` to see the message."
    },
    {
        "question": "How to use Bootstrap to style a web application?",
        "label": "html,css,bootstrap",
        "language": "en",
        "context": "Bootstrap is a popular CSS framework for building responsive web applications.",
        "answer": "The steps to use Bootstrap to style a web application are as follows:\n\n1. Include Bootstrap in your project:\n   - Add the following CDN link in the `<head>` section of your HTML file:\n   ```html\n   <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n   ```\n\n2. Create a responsive layout:\n   ```html\n   <div class=\"container\">\n       <h1 class=\"text-center\">Welcome to My App</h1>\n       <div class=\"row\">\n           <div class=\"col-md-6\">\n               <p>This is a Bootstrap column.</p>\n           </div>\n           <div class=\"col-md-6\">\n               <p>This is another Bootstrap column.</p>\n           </div>\n       </div>\n   </div>\n   ```\n\n3. Add Bootstrap components:\n   - Use Bootstrap components like buttons, cards, and navbars:\n   ```html\n   <button class=\"btn btn-primary\">Click Me</button>\n   ```\n\n4. Customize styles:\n   - You can override Bootstrap styles by adding your own CSS in a separate stylesheet.",
        "start_char": 0,
        "end_char": 1019,
        "key_answer": "The steps to use Bootstrap to style a web application are as follows:\n\n1. Include Bootstrap in your project:\n   - Add the following CDN link in the `<head>` section of your HTML file:\n   ```html\n   <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n   ```\n\n2. Create a responsive layout:\n   ```html\n   <div class=\"container\">\n       <h1 class=\"text-center\">Welcome to My App</h1>\n       <div class=\"row\">\n           <div class=\"col-md-6\">\n               <p>This is a Bootstrap column.</p>\n           </div>\n           <div class=\"col-md-6\">\n               <p>This is another Bootstrap column.</p>\n           </div>\n       </div>\n   </div>\n   ```\n\n3. Add Bootstrap components:\n   - Use Bootstrap components like buttons, cards, and navbars:\n   ```html\n   <button class=\"btn btn-primary\">Click Me</button>\n   ```\n\n4. Customize styles:\n   - You can override Bootstrap styles by adding your own CSS in a separate stylesheet."
    },
    {
        "question": "How to connect to a MySQL database using Python?",
        "label": "python,mysql",
        "language": "en",
        "context": "Connecting to a MySQL database allows you to perform database operations using Python.",
        "answer": "The steps to connect to a MySQL database using Python are as follows:\n\n1. Install the MySQL connector:\n   - Run `pip install mysql-connector-python`.\n\n2. Import the connector in your Python script:\n   ```python\n   import mysql.connector\n   ```\n\n3. Establish a connection to the database:\n   ```python\n   connection = mysql.connector.connect(\n       host='localhost',\n       user='your_username',\n       password='your_password',\n       database='your_database'\n   )\n   ```\n\n4. Create a cursor object:\n   ```python\n   cursor = connection.cursor()\n   ```\n\n5. Execute a query:\n   ```python\n   cursor.execute('SELECT * FROM your_table')\n   results = cursor.fetchall()\n   for row in results:\n       print(row)\n   ```\n\n6. Close the connection:\n   ```python\n   cursor.close()\n   connection.close()\n   ```\n\nOnce you've completed the above steps, you should be able to connect to your MySQL database and execute queries.",
        "start_char": 0,
        "end_char": 950,
        "key_answer": "The steps to connect to a MySQL database using Python are as follows:\n\n1. Install the MySQL connector:\n   - Run `pip install mysql-connector-python`.\n\n2. Import the connector in your Python script:\n   ```python\n   import mysql.connector\n   ```\n\n3. Establish a connection to the database:\n   ```python\n   connection = mysql.connector.connect(\n       host='localhost',\n       user='your_username',\n       password='your_password',\n       database='your_database'\n   )\n   ```\n\n4. Create a cursor object:\n   ```python\n   cursor = connection.cursor()\n   ```\n\n5. Execute a query:\n   ```python\n   cursor.execute('SELECT * FROM your_table')\n   results = cursor.fetchall()\n   for row in results:\n       print(row)\n   ```\n\n6. Close the connection:\n   ```python\n   cursor.close()\n   connection.close()\n   ```\n\nOnce you've completed the above steps, you should be able to connect to your MySQL database and execute queries."
    },
    {
        "question": "How to create a simple REST API using Flask?",
        "label": "python,flask,api",
        "language": "en",
        "context": "Flask is a lightweight framework for building web applications and APIs in Python.",
        "answer": "The steps to create a simple REST API using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a new Python file (e.g., `app.py`).\n\n3. Import Flask and create an app instance:\n   ```python\n   from flask import Flask, jsonify, request\n   app = Flask(__name__)\n   ```\n\n4. Define a simple route:\n   ```python\n   @app.route('/api/items', methods=['GET'])\n   def get_items():\n       items = [{'id': 1, 'name': 'Item 1'}, {'id': 2, 'name': 'Item 2'}]\n       return jsonify(items)\n   ```\n\n5. Run the application:\n   ```python\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n6. Test the API:\n   - Use a tool like Postman or your web browser to navigate to `http://127.0.0.1:5000/api/items` to see the JSON response.",
        "start_char": 0,
        "end_char": 783,
        "key_answer": "The steps to create a simple REST API using Flask are as follows:\n\n1. Install Flask:\n   - Run `pip install Flask`.\n\n2. Create a new Python file (e.g., `app.py`).\n\n3. Import Flask and create an app instance:\n   ```python\n   from flask import Flask, jsonify, request\n   app = Flask(__name__)\n   ```\n\n4. Define a simple route:\n   ```python\n   @app.route('/api/items', methods=['GET'])\n   def get_items():\n       items = [{'id': 1, 'name': 'Item 1'}, {'id': 2, 'name': 'Item 2'}]\n       return jsonify(items)\n   ```\n\n5. Run the application:\n   ```python\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n6. Test the API:\n   - Use a tool like Postman or your web browser to navigate to `http://127.0.0.1:5000/api/items` to see the JSON response."
    },
    {
        "question": "How to use jQuery to manipulate the DOM?",
        "label": "javascript,jquery,dom",
        "language": "en",
        "context": "jQuery is a fast, small, and feature-rich JavaScript library that simplifies DOM manipulation.",
        "answer": "The steps to use jQuery to manipulate the DOM are as follows:\n\n1. Include jQuery in your HTML file:\n   ```html\n   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n   ```\n\n2. Use jQuery to select elements:\n   ```javascript\n   $(document).ready(function() {\n       $('#myElement').text('Hello, jQuery!');\n   });\n   ```\n\n3. Change CSS styles:\n   ```javascript\n   $('#myElement').css('color', 'blue');\n   ```\n\n4. Add event listeners:\n   ```javascript\n   $('#myButton').click(function() {\n       alert('Button clicked!');\n   });\n   ```\n\n5. Manipulate the DOM:\n   ```javascript\n   $('#myList').append('<li>New Item</li>');\n   ```\n\nOnce you've completed the above steps, you can effectively use jQuery to manipulate the DOM in your web application.",
        "start_char": 0,
        "end_char": 793,
        "key_answer": "The steps to use jQuery to manipulate the DOM are as follows:\n\n1. Include jQuery in your HTML file:\n   ```html\n   <script src=\"https://code.jquery.com/jquery-3.6.0.min.js\"></script>\n   ```\n\n2. Use jQuery to select elements:\n   ```javascript\n   $(document).ready(function() {\n       $('#myElement').text('Hello, jQuery!');\n   });\n   ```\n\n3. Change CSS styles:\n   ```javascript\n   $('#myElement').css('color', 'blue');\n   ```\n\n4. Add event listeners:\n   ```javascript\n   $('#myButton').click(function() {\n       alert('Button clicked!');\n   });\n   ```\n\n5. Manipulate the DOM:\n   ```javascript\n   $('#myList').append('<li>New Item</li>');\n   ```\n\nOnce you've completed the above steps, you can effectively use jQuery to manipulate the DOM in your web application."
    },
    {
        "question": "How to implement pagination in a web application using Angular?",
        "label": "angular,pagination",
        "language": "en",
        "context": "Pagination is essential for displaying large datasets in manageable chunks.",
        "answer": "The steps to implement pagination in an Angular application are as follows:\n\n1. Install Angular Material for UI components:\n   - Run `ng add @angular/material`.\n\n2. Create a component for displaying paginated data:\n   ```bash\n   ng generate component paginated-list\n   ```\n\n3. Import MatPaginatorModule in your module:\n   ```javascript\n   import { MatPaginatorModule } from '@angular/material/paginator';\n   ```\n\n4. Use MatPaginator in your component template:\n   ```html\n   <table mat-table [dataSource]='dataSource'>\n       <!-- Define columns here -->\n   </table>\n   <mat-paginator [pageSizeOptions]='[5, 10, 20]'></mat-paginator>\n   ```\n\n5. Implement pagination logic in your component:\n   ```javascript\n   import { MatPaginator } from '@angular/material/paginator';\n   import { ViewChild } from '@angular/core';\n\n   export class PaginatedListComponent implements OnInit {\n       @ViewChild(MatPaginator) paginator: MatPaginator;\n       dataSource = new Mat TableDataSource();\n\n       ngOnInit() {\n           this.dataSource.paginator = this.paginator;\n           this.loadData();\n       }\n\n       loadData() {\n           // Load your data here and set it to dataSource.data\n       }\n   }\n   ```\n\n6. Style the paginator:\n   - You can customize the paginator's appearance using CSS or Angular Material themes.\n\nOnce you've completed these steps, your Angular application will support pagination for displaying large datasets effectively.",
        "start_char": 0,
        "end_char": 1486,
        "key_answer": "The steps to implement pagination in an Angular application are as follows:\n\n1. Install Angular Material for UI components:\n   - Run `ng add @angular/material`.\n\n2. Create a component for displaying paginated data:\n   ```bash\n   ng generate component paginated-list\n   ```\n\n3. Import MatPaginatorModule in your module:\n   ```javascript\n   import { MatPaginatorModule } from '@angular/material/paginator';\n   ```\n\n4. Use MatPaginator in your component template:\n   ```html\n   <table mat-table [dataSource]='dataSource'>\n       <!-- Define columns here -->\n   </table>\n   <mat-paginator [pageSizeOptions]='[5, 10, 20]'></mat-paginator>\n   ```\n\n5. Implement pagination logic in your component:\n   ```javascript\n   import { MatPaginator } from '@angular/material/paginator';\n   import { ViewChild } from '@angular/core';\n\n   export class PaginatedListComponent implements OnInit {\n       @ViewChild(MatPaginator) paginator: MatPaginator;\n       dataSource = new Mat TableDataSource();\n\n       ngOnInit() {\n           this.dataSource.paginator = this.paginator;\n           this.loadData();\n       }\n\n       loadData() {\n           // Load your data here and set it to dataSource.data\n       }\n   }\n   ```\n\n6. Style the paginator:\n   - You can customize the paginator's appearance using CSS or Angular Material themes.\n\nOnce you've completed these steps, your Angular application will support pagination for displaying large datasets effectively."
    },
    {
        "question": "How to implement a simple to-do list application using React?",
        "label": "react,todolist",
        "language": "en",
        "context": "React is a popular library for building user interfaces, including to-do list applications.",
        "answer": "The steps to implement a simple to-do list application using React are as follows:\n\n1. Create a new React application:\n   ```bash\n   npx create-react-app todo-app\n   cd todo-app\n   ```\n\n2. Create a ToDo component:\n   ```javascript\n   import React, { useState } from 'react';\n\n   function ToDo() {\n       const [tasks, setTasks] = useState([]);\n       const [task, setTask] = useState('');\n\n       const addTask = () => {\n           setTasks([...tasks, task]);\n           setTask('');\n       };\n\n       return (\n           <div>\n               <input type=\"text\" value={task} onChange={(e) => setTask(e.target.value)} />\n               <button onClick={addTask}>Add Task</button>\n               <ul>\n                   {tasks.map((t, index) => <li key={index}>{t}</li>)}\n               </ul>\n           </div>\n       );\n   }\n   export default ToDo;\n   ```\n\n3. Use the ToDo component in your main App component:\n   ```javascript\n   import React from 'react';\n   import ToDo from './ToDo';\n\n   function App() {\n       return (\n           <div className=\"App\">\n               <h1>To-Do List</h1>\n               <ToDo />\n           </div>\n       );\n   }\n   export default App;\n   ```\n\n4. Run the application:\n   - Execute `npm start` to see your to-do list application in action.\n\nOnce you've completed these steps, you will have a functional to-do list application built with React.",
        "start_char": 0,
        "end_char": 1435,
        "key_answer": "The steps to implement a simple to-do list application using React are as follows:\n\n1. Create a new React application:\n   ```bash\n   npx create-react-app todo-app\n   cd todo-app\n   ```\n\n2. Create a ToDo component:\n   ```javascript\n   import React, { useState } from 'react';\n\n   function ToDo() {\n       const [tasks, setTasks] = useState([]);\n       const [task, setTask] = useState('');\n\n       const addTask = () => {\n           setTasks([...tasks, task]);\n           setTask('');\n       };\n\n       return (\n           <div>\n               <input type=\"text\" value={task} onChange={(e) => setTask(e.target.value)} />\n               <button onClick={addTask}>Add Task</button>\n               <ul>\n                   {tasks.map((t, index) => <li key={index}>{t}</li>)}\n               </ul>\n           </div>\n       );\n   }\n   export default ToDo;\n   ```\n\n3. Use the ToDo component in your main App component:\n   ```javascript\n   import React from 'react';\n   import ToDo from './ToDo';\n\n   function App() {\n       return (\n           <div className=\"App\">\n               <h1>To-Do List</h1>\n               <ToDo />\n           </div>\n       );\n   }\n   export default App;\n   ```\n\n4. Run the application:\n   - Execute `npm start` to see your to-do list application in action.\n\nOnce you've completed these steps, you will have a functional to-do list application built with React."
    },
    {
        "question": "How to use CSS Grid to create a responsive layout?",
        "label": "css,grid,responsive",
        "language": "en",
        "context": "CSS Grid is a powerful layout system that allows for responsive design.",
        "answer": "The steps to use CSS Grid to create a responsive layout are as follows:\n\n1. Define a grid container:\n   ```css\n   .grid-container {\n       display: grid;\n       grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n       gap: 10px;\n   }\n   ```\n\n2. Create grid items:\n   ```html\n   <div class=\"grid-container\">\n       <div class=\"grid-item\">Item 1</div>\n       <div class=\"grid-item\">Item 2</div>\n       <div class=\"grid-item\">Item 3</div>\n       <div class=\"grid-item\">Item 4</div>\n   </div>\n   ```\n\n3. Style grid items:\n   ```css\n   .grid-item {\n       background-color: #f0f0f0;\n       padding: 20px;\n       text-align: center;\n   }\n   ```\n\n4. Make it responsive:\n   - The `grid-template-columns` property with `auto-fill` and `minmax` allows the grid to adjust based on the screen size.\n\nOnce you've completed these steps, you will have a responsive layout using CSS Grid.",
        "start_char": 0,
        "end_char": 927,
        "key_answer": "The steps to use CSS Grid to create a responsive layout are as follows:\n\n1. Define a grid container:\n   ```css\n   .grid-container {\n       display: grid;\n       grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n       gap: 10px;\n   }\n   ```\n\n2. Create grid items:\n   ```html\n   <div class=\"grid-container\">\n       <div class=\"grid-item\">Item 1</div>\n       <div class=\"grid-item\">Item 2</div>\n       <div class=\"grid-item\">Item 3</div>\n       <div class=\"grid-item\">Item 4</div>\n   </div>\n   ```\n\n3. Style grid items:\n   ```css\n   .grid-item {\n       background-color: #f0f0f0;\n       padding: 20px;\n       text-align: center;\n   }\n   ```\n\n4. Make it responsive:\n   - The `grid-template-columns` property with `auto-fill` and `minmax` allows the grid to adjust based on the screen size.\n\nOnce you've completed these steps, you will have a responsive layout using CSS Grid."
    },
    {
        "question": "How to implement authentication in a web application using JWT?",
        "label": "jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are a compact way to securely transmit information between parties.",
        "answer": "The steps to implement authentication using JWT are as follows:\n\n1. Install necessary packages:\n   - For Node.js, run `npm install jsonwebtoken bcryptjs`.\n\n2. Create a user model:\n   ```javascript\n   const User = mongoose.model('User ', new mongoose.Schema({\n       username: String,\n       password: String\n   }));\n   ```\n\n3. Create a registration endpoint:\n   ```javascript\n   app.post('/register', async (req, res) => {\n       const hashedPassword = await bcrypt.hash(req.body.password, 10);\n       const user = new User({ username: req.body.username, password: hashedPassword });\n       await user.save();\n       res.status(201).send();\n   });\n   ```\n\n4. Create a login endpoint that issues a JWT:\n   ```javascript\n   app.post('/login', async (req, res) => {\n       const user = await User.findOne({ username: req.body.username });\n       if (!user || !(await bcrypt.compare(req.body.password, user.password))) {\n           return res.status(400).send('Invalid credentials');\n       }\n       const token = jwt.sign({ id: user._id }, 'your_jwt_secret');\n       res.json({ token });\n   });\n   ```\n\n5. Protect routes using middleware:\n   ```javascript\n   function authenticateToken(req, res, next) {\n       const token = req.headers['authorization'] && req.headers['authorization'].split(' ')[1];\n       if (!token) return res.sendStatus(401);\n       jwt.verify(token, 'your_jwt_secret', (err, user) => {\n           if (err) return res.sendStatus(403);\n           req.user = user;\n           next();\n       });\n   }\n   ```\n\n6. Use the middleware to protect routes:\n   ```javascript\n   app.get('/protected', authenticateToken, (req, res) => {\n       res.send('This is a protected route');\n   });\n   ```\n\nOnce you've completed these steps, your web application will have JWT-based authentication.",
        "start_char": 0,
        "end_char": 1850,
        "key_answer": "The steps to implement authentication using JWT are as follows:\n\n1. Install necessary packages:\n   - For Node.js, run `npm install jsonwebtoken bcryptjs`.\n\n2. Create a user model:\n   ```javascript\n   const User = mongoose.model('User ', new mongoose.Schema({\n       username: String,\n       password: String\n   }));\n   ```\n\n3. Create a registration endpoint:\n   ```javascript\n   app.post('/register', async (req, res) => {\n       const hashedPassword = await bcrypt.hash(req.body.password, 10);\n       const user = new User({ username: req.body.username, password: hashedPassword });\n       await user.save();\n       res.status(201).send();\n   });\n   ```\n\n4. Create a login endpoint that issues a JWT:\n   ```javascript\n   app.post('/login', async (req, res) => {\n       const user = await User.findOne({ username: req.body.username });\n       if (!user || !(await bcrypt.compare(req.body.password, user.password))) {\n           return res.status(400).send('Invalid credentials');\n       }\n       const token = jwt.sign({ id: user._id }, 'your_jwt_secret');\n       res.json({ token });\n   });\n   ```\n\n5. Protect routes using middleware:\n   ```javascript\n   function authenticateToken(req, res, next) {\n       const token = req.headers['authorization'] && req.headers['authorization'].split(' ')[1];\n       if (!token) return res.sendStatus(401);\n       jwt.verify(token, 'your_jwt_secret', (err, user) => {\n           if (err) return res.sendStatus(403);\n           req.user = user;\n           next();\n       });\n   }\n   ```\n\n6. Use the middleware to protect routes:\n   ```javascript\n   app.get('/protected', authenticateToken, (req, res) => {\n       res.send('This is a protected route');\n   });\n   ```\n\nOnce you've completed these steps, your web application will have JWT-based authentication."
    },
    {
        "question": "How to create a simple chart using Chart.js?",
        "label": "javascript,chartjs",
        "language": "en",
        "context": "Chart.js is a popular library for creating charts in web applications.",
        "answer": "The steps to create a simple chart using Chart.js are as follows:\n\n1. Include Chart.js in your HTML file:\n   ```html\n   < <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n   ```\n\n2. Create a canvas element for the chart:\n   ```html\n   <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\n   ```\n\n3. Set up the chart data and configuration:\n   ```javascript\n   const ctx = document.getElementById('myChart').getContext('2d');\n   const myChart = new Chart(ctx, {\n       type: 'bar', // Specify the chart type\n       data: {\n           labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n           datasets: [{\n               label: '# of Votes',\n               data: [12, 19, 3, 5, 2, 3],\n               backgroundColor: [\n                   'rgba(255, 99, 132, 0.2)',\n                   'rgba(54, 162, 235, 0.2)',\n                   'rgba(255, 206, 86, 0.2)',\n                   'rgba(75, 192, 192, 0.2)',\n                   'rgba(153, 102, 255, 0.2)',\n                   'rgba(255, 159, 64, 0.2)'\n               ],\n               borderColor: [\n                   'rgba(255, 99, 132, 1)',\n                   'rgba(54, 162, 235, 1)',\n                   'rgba(255, 206, 86, 1)',\n                   'rgba(75, 192, 192, 1)',\n                   'rgba(153, 102, 255, 1)',\n                   'rgba(255, 159, 64, 1)'\n               ],\n               borderWidth: 1\n           }]\n       },\n       options: {\n           scales: {\n               y: {\n                   beginAtZero: true\n               }\n           }\n       }\n   });\n   ```\n\n4. Run your application:\n   - Open your HTML file in a web browser to see the chart rendered on the page.\n\nOnce you've completed these steps, you will have a simple bar chart displayed using Chart.js.",
        "start_char": 0,
        "end_char": 1822,
        "key_answer": "The steps to create a simple chart using Chart.js are as follows:\n\n1. Include Chart.js in your HTML file:\n   ```html\n   < <script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>\n   ```\n\n2. Create a canvas element for the chart:\n   ```html\n   <canvas id=\"myChart\" width=\"400\" height=\"200\"></canvas>\n   ```\n\n3. Set up the chart data and configuration:\n   ```javascript\n   const ctx = document.getElementById('myChart').getContext('2d');\n   const myChart = new Chart(ctx, {\n       type: 'bar', // Specify the chart type\n       data: {\n           labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],\n           datasets: [{\n               label: '# of Votes',\n               data: [12, 19, 3, 5, 2, 3],\n               backgroundColor: [\n                   'rgba(255, 99, 132, 0.2)',\n                   'rgba(54, 162, 235, 0.2)',\n                   'rgba(255, 206, 86, 0.2)',\n                   'rgba(75, 192, 192, 0.2)',\n                   'rgba(153, 102, 255, 0.2)',\n                   'rgba(255, 159, 64, 0.2)'\n               ],\n               borderColor: [\n                   'rgba(255, 99, 132, 1)',\n                   'rgba(54, 162, 235, 1)',\n                   'rgba(255, 206, 86, 1)',\n                   'rgba(75, 192, 192, 1)',\n                   'rgba(153, 102, 255, 1)',\n                   'rgba(255, 159, 64, 1)'\n               ],\n               borderWidth: 1\n           }]\n       },\n       options: {\n           scales: {\n               y: {\n                   beginAtZero: true\n               }\n           }\n       }\n   });\n   ```\n\n4. Run your application:\n   - Open your HTML file in a web browser to see the chart rendered on the page.\n\nOnce you've completed these steps, you will have a simple bar chart displayed using Chart.js."
    },
    {
        "question": "How to implement a simple file upload feature in a web application?",
        "label": "html,upload",
        "language": "en",
        "context": "File upload features are common in web applications for user-generated content.",
        "answer": "The steps to implement a simple file upload feature are as follows:\n\n1. Create an HTML form for file upload:\n   ```html\n   <form id=\"uploadForm\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"file\" required>\n       <button type=\"submit\">Upload</button>\n   </form>\n   ```\n\n2. Handle the form submission using JavaScript:\n   ```javascript\n   document.getElementById('uploadForm').addEventListener('submit', function(event) {\n       event.preventDefault();\n       const formData = new FormData(this);\n       fetch('/upload', {\n           method: 'POST',\n           body: formData\n       })\n       .then(response => response.json())\n       .then(data => console.log(data));\n   });\n   ```\n\n3. Set up a server to handle the file upload:\n   - For example, using Node.js and Express:\n   ```javascript\n   const express = require('express');\n   const multer = require('multer');\n   const upload = multer({ dest: 'uploads/' });\n   const app = express();\n\n   app.post('/upload', upload.single('file'), (req, res) => {\n       res.json({ message: 'File uploaded successfully!', file: req.file });\n   });\n\n   app.listen(3000, () => {\n       console.log('Server running on port 3000');\n   });\n   ```\n\n4. Test the file upload:\n   - Open your HTML file in a web browser, select a file, and click the upload button to see the response.\n\nOnce you've completed these steps, you will have a functional file upload feature in your web application.",
        "start_char": 0,
        "end_char": 1494,
        "key_answer": "The steps to implement a simple file upload feature are as follows:\n\n1. Create an HTML form for file upload:\n   ```html\n   <form id=\"uploadForm\" enctype=\"multipart/form-data\">\n       <input type=\"file\" name=\"file\" required>\n       <button type=\"submit\">Upload</button>\n   </form>\n   ```\n\n2. Handle the form submission using JavaScript:\n   ```javascript\n   document.getElementById('uploadForm').addEventListener('submit', function(event) {\n       event.preventDefault();\n       const formData = new FormData(this);\n       fetch('/upload', {\n           method: 'POST',\n           body: formData\n       })\n       .then(response => response.json())\n       .then(data => console.log(data));\n   });\n   ```\n\n3. Set up a server to handle the file upload:\n   - For example, using Node.js and Express:\n   ```javascript\n   const express = require('express');\n   const multer = require('multer');\n   const upload = multer({ dest: 'uploads/' });\n   const app = express();\n\n   app.post('/upload', upload.single('file'), (req, res) => {\n       res.json({ message: 'File uploaded successfully!', file: req.file });\n   });\n\n   app.listen(3000, () => {\n       console.log('Server running on port 3000');\n   });\n   ```\n\n4. Test the file upload:\n   - Open your HTML file in a web browser, select a file, and click the upload button to see the response.\n\nOnce you've completed these steps, you will have a functional file upload feature in your web application."
    },
    {
        "question": "How to create a simple weather application using the OpenWeatherMap API?",
        "label": "javascript,api,weather",
        "language": "en",
        "context": "Using APIs allows you to fetch real-time data for applications.",
        "answer": "The steps to create a simple weather application using the OpenWeatherMap API are as follows:\n\n1. Sign up for an API key at OpenWeatherMap.\n\n2. Create an HTML file for the application:\n   ```html\n   <div>\n       <input type=\"text\" id=\"city\" placeholder=\"Enter city name\" />\n       <button id=\"getWeather\">Get Weather</button>\n       <div id=\"weatherResult\"></div>\n   </div>\n   ```\n\n3. Add JavaScript to fetch weather data:\n   ```javascript\n   document.getElementById('getWeather').addEventListener('click', function() {\n       const city = document.getElementById('city').value;\n       const apiKey = 'YOUR_API_KEY';\n       fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n           .then(response => response.json())\n           .then(data => {\n               const weather = `Temperature: ${data.main.temp}°C, Weather: ${data.weather[0].description}`;\n               document.getElementById('weatherResult').innerText = weather;\n           })\n           .catch(error => console.error('Error fetching weather data:', error));\n   });\n   ```\n\n4. Style the application using CSS:\n   ```css\n   div {\n       text-align: center;\n       margin-top: 20px;\n   }\n   ```\n\n5. Run the application:\n   - Open your HTML file in a web browser, enter a city name, and click the button to see the weather information.\n\nOnce you've completed these steps, you will have a simple weather application that fetches data from the OpenWeatherMap API.",
        "start_char": 0,
        "end_char": 1522,
        "key_answer": "The steps to create a simple weather application using the OpenWeatherMap API are as follows:\n\n1. Sign up for an API key at OpenWeatherMap.\n\n2. Create an HTML file for the application:\n   ```html\n   <div>\n       <input type=\"text\" id=\"city\" placeholder=\"Enter city name\" />\n       <button id=\"getWeather\">Get Weather</button>\n       <div id=\"weatherResult\"></div>\n   </div>\n   ```\n\n3. Add JavaScript to fetch weather data:\n   ```javascript\n   document.getElementById('getWeather').addEventListener('click', function() {\n       const city = document.getElementById('city').value;\n       const apiKey = 'YOUR_API_KEY';\n       fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n           .then(response => response.json())\n           .then(data => {\n               const weather = `Temperature: ${data.main.temp}°C, Weather: ${data.weather[0].description}`;\n               document.getElementById('weatherResult').innerText = weather;\n           })\n           .catch(error => console.error('Error fetching weather data:', error));\n   });\n   ```\n\n4. Style the application using CSS:\n   ```css\n   div {\n       text-align: center;\n       margin-top: 20px;\n   }\n   ```\n\n5. Run the application:\n   - Open your HTML file in a web browser, enter a city name, and click the button to see the weather information.\n\nOnce you've completed these steps, you will have a simple weather application that fetches data from the OpenWeatherMap API."
    },
    {
        "question": "How to create a simple image gallery using HTML, CSS, and JavaScript?",
        "label": "html,css,javascript,gallery",
        "language": "en",
        "context": "Image galleries are a common feature in web applications for displaying photos.",
        "answer": "The steps to create a simple image gallery are as follows:\n\n1. Create an HTML structure for the gallery:\n   ```html\n   <div class=\"gallery\">\n       <img src=\"image1.jpg\" alt=\"Image 1\" />\n       <img src=\"image2.jpg\" alt=\"Image 2\" />\n       <img src=\"image3.jpg\" alt=\"Image 3\" />\n   </div>\n   ```\n\n2. Style the gallery using CSS:\n   ```css\n   .gallery {\n       display: flex;\n       flex-wrap: wrap;\n   }\n   .gallery img {\n       width: 30%;\n       margin: 5px;\n       border-radius: 5px;\n   }\n   ```\n\n3. Add JavaScript for interactivity (optional):\n   ```javascript\n   const images = document.querySelectorAll('.gallery img');\n   images.forEach(image => {\n       image.addEventListener('click', () => {\n           alert(`You clicked on ${image.alt}`);\n       });\n   });\n   ```\n\n4. Run the application:\n   - Open your HTML file in a web browser to see the image gallery displayed.\n\nOnce you've completed these steps, you will have a simple image gallery that displays images and can respond to user interactions.",
        "start_char": 0,
        "end_char": 1062,
        "key_answer": "The steps to create a simple image gallery are as follows:\n\n1. Create an HTML structure for the gallery:\n   ```html\n   <div class=\"gallery\">\n       <img src=\"image1.jpg\" alt=\"Image 1\" />\n       <img src=\"image2.jpg\" alt=\"Image 2\" />\n       <img src=\"image3.jpg\" alt=\"Image 3\" />\n   </div>\n   ```\n\n2. Style the gallery using CSS:\n   ```css\n   .gallery {\n       display: flex;\n       flex-wrap: wrap;\n   }\n   .gallery img {\n       width: 30%;\n       margin: 5px;\n       border-radius: 5px;\n   }\n   ```\n\n3. Add JavaScript for interactivity (optional):\n   ```javascript\n   const images = document.querySelectorAll('.gallery img');\n   images.forEach(image => {\n       image.addEventListener('click', () => {\n           alert(`You clicked on ${image.alt}`);\n       });\n   });\n   ```\n\n4. Run the application:\n   - Open your HTML file in a web browser to see the image gallery displayed.\n\nOnce you've completed these steps, you will have a simple image gallery that displays images and can respond to user interactions."
    },
    {
        "question": "How to implement a simple chat application using Firebase?",
        "label": "javascript,firebase,chat",
        "language": "en",
        "context": "Firebase provides a real-time database that can be used for chat applications.",
        "answer": "The steps to implement a simple chat application using Firebase are as follows:\n\n1. Set up a Firebase project:\n   - Go to the Firebase console and create a new project.\n\n2. Add Firebase to your web application:\n   - Include the Firebase SDK in your HTML file:\n   ```html\n   <script src=\"https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js\"></script>\n   <script src=\"https://www.gstatic.com/firebasejs/9.0.0/firebase-database.js\"></script>\n   ```html```\n\n3. Initialize Firebase in your JavaScript:\n   ```javascript\n   const firebaseConfig = {\n       apiKey: 'YOUR_API_KEY',\n       authDomain: 'YOUR_AUTH_DOMAIN',\n       databaseURL: 'YOUR_DATABASE_URL',\n       projectId: 'YOUR_PROJECT_ID',\n       storageBucket: 'YOUR_STORAGE_BUCKET',\n       messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n       appId: 'YOUR_APP_ID'\n   };\n   firebase.initializeApp(firebaseConfig);\n   const database = firebase.database();\n   ```\n\n4. Create a simple chat interface:\n   ```html\n   <div>\n       <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\" />\n       <button id=\"sendButton\">Send</button>\n       <ul id=\"messages\"></ul>\n   </div>\n   ```\n\n5. Add JavaScript to send and receive messages:\n   ```javascript\n   document.getElementById('sendButton').addEventListener('click', () => {\n       const message = document.getElementById('messageInput').value;\n       database.ref('messages').push({ text: message });\n       document.getElementById('messageInput').value = '';\n   });\n\n   database.ref('messages').on('child_added', (snapshot) => {\n       const message = snapshot.val().text;\n       const li = document.createElement('li');\n       li.textContent = message;\n       document.getElementById('messages').appendChild(li);\n   });\n   ```\n\n6. Run your application:\n   - Open your HTML file in a web browser to see the chat application in action.\n\nOnce you've completed these steps, you will have a simple chat application using Firebase for real-time messaging.",
        "start_char": 0,
        "end_char": 2034,
        "key_answer": "The steps to implement a simple chat application using Firebase are as follows:\n\n1. Set up a Firebase project:\n   - Go to the Firebase console and create a new project.\n\n2. Add Firebase to your web application:\n   - Include the Firebase SDK in your HTML file:\n   ```html\n   <script src=\"https://www.gstatic.com/firebasejs/9.0.0/firebase-app.js\"></script>\n   <script src=\"https://www.gstatic.com/firebasejs/9.0.0/firebase-database.js\"></script>\n   ```html```\n\n3. Initialize Firebase in your JavaScript:\n   ```javascript\n   const firebaseConfig = {\n       apiKey: 'YOUR_API_KEY',\n       authDomain: 'YOUR_AUTH_DOMAIN',\n       databaseURL: 'YOUR_DATABASE_URL',\n       projectId: 'YOUR_PROJECT_ID',\n       storageBucket: 'YOUR_STORAGE_BUCKET',\n       messagingSenderId: 'YOUR_MESSAGING_SENDER_ID',\n       appId: 'YOUR_APP_ID'\n   };\n   firebase.initializeApp(firebaseConfig);\n   const database = firebase.database();\n   ```\n\n4. Create a simple chat interface:\n   ```html\n   <div>\n       <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\" />\n       <button id=\"sendButton\">Send</button>\n       <ul id=\"messages\"></ul>\n   </div>\n   ```\n\n5. Add JavaScript to send and receive messages:\n   ```javascript\n   document.getElementById('sendButton').addEventListener('click', () => {\n       const message = document.getElementById('messageInput').value;\n       database.ref('messages').push({ text: message });\n       document.getElementById('messageInput').value = '';\n   });\n\n   database.ref('messages').on('child_added', (snapshot) => {\n       const message = snapshot.val().text;\n       const li = document.createElement('li');\n       li.textContent = message;\n       document.getElementById('messages').appendChild(li);\n   });\n   ```\n\n6. Run your application:\n   - Open your HTML file in a web browser to see the chat application in action.\n\nOnce you've completed these steps, you will have a simple chat application using Firebase for real-time messaging."
    },
    {
        "question": "How to create a simple e-commerce product page using HTML and CSS?",
        "label": "html,css,ecommerce",
        "language": "en",
        "context": "E-commerce product pages are essential for online shopping websites.",
        "answer": "The steps to create a simple e-commerce product page are as follows:\n\n1. Create the HTML structure:\n   ```html\n   <div class=\"product\">\n       <img src=\"product.jpg\" alt=\"Product Image\" />\n       <h1>Product Title</h1>\n       <p>Description of the product.</p>\n       <p>Price: $99.99</p>\n       <button>Add to Cart</button>\n   </div>\n   ```\n\n2. Style the product page using CSS:\n   ```css\n   .product {\n       text-align: center;\n       margin: 20px;\n       border: 1px solid #ccc;\n       padding: 20px;\n       border-radius: 5px;\n   }\n   .product img {\n       max-width: 100%;\n       height: auto;\n   }\n   .product button {\n       background-color: #28a745;\n       color: white;\n       border: none;\n       padding: 10px 20px;\n       cursor: pointer;\n   }\n   ```\n\n3. Add interactivity (optional):\n   - Use JavaScript to handle the 'Add to Cart' button click event.\n   ```javascript\n   document.querySelector('button').addEventListener('click', () => {\n       alert('Product added to cart!');\n   });\n   ```\n\n4. Run the application:\n   - Open your HTML file in a web browser to see the product page displayed.\n\nOnce you've completed these steps, you will have a simple e-commerce product page.",
        "start_char": 0,
        "end_char": 1245,
        "key_answer": "The steps to create a simple e-commerce product page are as follows:\n\n1. Create the HTML structure:\n   ```html\n   <div class=\"product\">\n       <img src=\"product.jpg\" alt=\"Product Image\" />\n       <h1>Product Title</h1>\n       <p>Description of the product.</p>\n       <p>Price: $99.99</p>\n       <button>Add to Cart</button>\n   </div>\n   ```\n\n2. Style the product page using CSS:\n   ```css\n   .product {\n       text-align: center;\n       margin: 20px;\n       border: 1px solid #ccc;\n       padding: 20px;\n       border-radius: 5px;\n   }\n   .product img {\n       max-width: 100%;\n       height: auto;\n   }\n   .product button {\n       background-color: #28a745;\n       color: white;\n       border: none;\n       padding: 10px 20px;\n       cursor: pointer;\n   }\n   ```\n\n3. Add interactivity (optional):\n   - Use JavaScript to handle the 'Add to Cart' button click event.\n   ```javascript\n   document.querySelector('button').addEventListener('click', () => {\n       alert('Product added to cart!');\n   });\n   ```\n\n4. Run the application:\n   - Open your HTML file in a web browser to see the product page displayed.\n\nOnce you've completed these steps, you will have a simple e-commerce product page."
    },
    {
        "question": "How to use MongoDB with Mongoose in a Node.js application?",
        "label": "nodejs,mongodb,mongoose",
        "language": "en",
        "context": "Mongoose is an ODM library for MongoDB and Node.js, providing a schema-based solution to model data.",
        "answer": "Steps:\n\n1. Install dependencies:\n - `npm install mongoose`\n\n2. Connect to MongoDB:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n```\n\n3. Define a schema:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Create and save documents:\n```javascript\nconst newUser = new User({ name: 'Alice', email: 'alice@example.com' });\nnewUser.save();\n```\n\n**Reference**: https://mongoosejs.com/docs/index.html",
        "start_char": 0,
        "end_char": 636,
        "key_answer": "Steps:\n\n1. Install dependencies:\n - `npm install mongoose`\n\n2. Connect to MongoDB:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n```\n\n3. Define a schema:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Create and save documents:\n```javascript\nconst newUser = new User({ name: 'Alice', email: 'alice@example.com' });\nnewUser.save();\n```\n\n**Reference**: https://mongoosejs.com/docs/index.html"
    },
    {
        "question": "How to implement authentication using JWT in Express.js?",
        "label": "nodejs,express,jwt,authentication",
        "language": "en",
        "context": "JWT (JSON Web Token) is a compact and secure way of transmitting information between parties as a JSON object.",
        "answer": "Steps:\n\n1. Install required packages:\n - `npm install jsonwebtoken bcryptjs express`\n\n2. Create a token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ id: user._id }, 'secretKey', { expiresIn: '1h' });\n```\n\n3. Verify token in middleware:\n```javascript\nfunction authenticateToken(req, res, next) {\n  const token = req.header('Authorization');\n  if (!token) return res.sendStatus(401);\n\n  jwt.verify(token, 'secretKey', (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n```\n\n4. Apply middleware to protected routes:\n```javascript\napp.get('/dashboard', authenticateToken, (req, res) => {\n  res.send('Protected route');\n});\n```\n\n**Reference**: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 779,
        "key_answer": "Steps:\n\n1. Install required packages:\n - `npm install jsonwebtoken bcryptjs express`\n\n2. Create a token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ id: user._id }, 'secretKey', { expiresIn: '1h' });\n```\n\n3. Verify token in middleware:\n```javascript\nfunction authenticateToken(req, res, next) {\n  const token = req.header('Authorization');\n  if (!token) return res.sendStatus(401);\n\n  jwt.verify(token, 'secretKey', (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n```\n\n4. Apply middleware to protected routes:\n```javascript\napp.get('/dashboard', authenticateToken, (req, res) => {\n  res.send('Protected route');\n});\n```\n\n**Reference**: https://jwt.io/introduction/"
    },
    {
        "question": "How to create a responsive layout using Tailwind CSS?",
        "label": "css,tailwind,responsive-design",
        "language": "en",
        "context": "Tailwind CSS is a utility-first CSS framework that enables rapid UI development with responsive design support.",
        "answer": "Steps:\n\n1. Add Tailwind CSS to your project:\n - Follow setup guide: https://tailwindcss.com/docs/installation\n\n2. Use responsive utility classes:\n```html\n<div class=\"p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12\">\n  Responsive padding at different breakpoints\n</div>\n```\n\n3. Use grid or flexbox layout:\n```html\n<div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n  <div class=\"bg-gray-100 p-4\">Box 1</div>\n  <div class=\"bg-gray-200 p-4\">Box 2</div>\n  <div class=\"bg-gray-300 p-4\">Box 3</div>\n</div>\n```\n\n**Reference**: https://tailwindcss.com/docs/responsive-design",
        "start_char": 0,
        "end_char": 584,
        "key_answer": "Steps:\n\n1. Add Tailwind CSS to your project:\n - Follow setup guide: https://tailwindcss.com/docs/installation\n\n2. Use responsive utility classes:\n```html\n<div class=\"p-4 sm:p-6 md:p-8 lg:p-10 xl:p-12\">\n  Responsive padding at different breakpoints\n</div>\n```\n\n3. Use grid or flexbox layout:\n```html\n<div class=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n  <div class=\"bg-gray-100 p-4\">Box 1</div>\n  <div class=\"bg-gray-200 p-4\">Box 2</div>\n  <div class=\"bg-gray-300 p-4\">Box 3</div>\n</div>\n```\n\n**Reference**: https://tailwindcss.com/docs/responsive-design"
    },
    {
        "question": "How to center a div using CSS Flexbox?",
        "label": "frontend,css,flexbox",
        "language": "en",
        "context": "Centering elements is a common layout task in frontend development, and Flexbox provides a simple solution.",
        "answer": "To center a `div` using CSS Flexbox both vertically and horizontally:\n\n1. Wrap your target `div` inside a container.\n2. Apply Flexbox styles to the container.\n\n```html\n<div class=\"flex-container\">\n  <div class=\"centered-box\">Centered content</div>\n</div>\n```\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: center; /* centers horizontally */\n  align-items: center;     /* centers vertically */\n  height: 100vh;\n}\n\n.centered-box {\n  width: 200px;\n  height: 100px;\n  background-color: lightblue;\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox",
        "start_char": 0,
        "end_char": 656,
        "key_answer": "To center a `div` using CSS Flexbox both vertically and horizontally:\n\n1. Wrap your target `div` inside a container.\n2. Apply Flexbox styles to the container.\n\n```html\n<div class=\"flex-container\">\n  <div class=\"centered-box\">Centered content</div>\n</div>\n```\n\n```css\n.flex-container {\n  display: flex;\n  justify-content: center; /* centers horizontally */\n  align-items: center;     /* centers vertically */\n  height: 100vh;\n}\n\n.centered-box {\n  width: 200px;\n  height: 100px;\n  background-color: lightblue;\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_flexible_box_layout/Basic_concepts_of_flexbox"
    },
    {
        "question": "How to make API requests using Fetch in JavaScript?",
        "label": "frontend,javascript,fetch",
        "language": "en",
        "context": "Fetch API is a modern interface that allows you to make HTTP requests in JavaScript.",
        "answer": "To make API requests using Fetch API in JavaScript:\n\n1. Use the `fetch()` method to make a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. For POST requests:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Ly',\n    age: 21\n  })\n})\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
        "start_char": 0,
        "end_char": 732,
        "key_answer": "To make API requests using Fetch API in JavaScript:\n\n1. Use the `fetch()` method to make a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. For POST requests:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    name: 'Ly',\n    age: 21\n  })\n})\n.then(response => response.json())\n.then(result => console.log(result))\n.catch(error => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
    },
    {
        "question": "How to create a REST API using Express.js?",
        "label": "backend,nodejs,express,api",
        "language": "en",
        "context": "Express.js is a Node.js framework used to build REST APIs easily.",
        "answer": "Steps to create a REST API using Express.js:\n\n1. Initialize the project:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create `index.js`:\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello from API!' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n3. Run the server:\n```bash\nnode index.js\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 561,
        "key_answer": "Steps to create a REST API using Express.js:\n\n1. Initialize the project:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create `index.js`:\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = 3000;\n\napp.use(express.json());\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello from API!' });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n3. Run the server:\n```bash\nnode index.js\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to implement JWT authentication in Node.js?",
        "label": "backend,nodejs,auth,jwt",
        "language": "en",
        "context": "JWT (JSON Web Token) is a standard used for securely transmitting information between parties as a JSON object.",
        "answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a `login.js` route handler:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n\n  // Validate user\n  if (username === 'user' && bcrypt.compareSync(password, hashedPassword)) {\n    const token = jwt.sign({ username }, 'secretkey', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(400).send('Invalid credentials');\n  }\n});\n```\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 670,
        "key_answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a `login.js` route handler:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n\n  // Validate user\n  if (username === 'user' && bcrypt.compareSync(password, hashedPassword)) {\n    const token = jwt.sign({ username }, 'secretkey', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(400).send('Invalid credentials');\n  }\n});\n```\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to use Redis for caching in a Node.js application?",
        "label": "backend,nodejs,redis,caching",
        "language": "en",
        "context": "Redis is an in-memory data structure store that is commonly used as a cache and message broker.",
        "answer": "To use Redis for caching in Node.js:\n\n1. Install Redis and `redis` package:\n```bash\nnpm install redis\n```\n\n2. Connect to Redis in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set and get cache data:\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', function(err, reply) {\n  console.log(reply); // Output: 'value'\n});\n```\n\n📚 Reference: https://redis.io/documentation",
        "start_char": 0,
        "end_char": 553,
        "key_answer": "To use Redis for caching in Node.js:\n\n1. Install Redis and `redis` package:\n```bash\nnpm install redis\n```\n\n2. Connect to Redis in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set and get cache data:\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', function(err, reply) {\n  console.log(reply); // Output: 'value'\n});\n```\n\n📚 Reference: https://redis.io/documentation"
    },
    {
        "question": "How to integrate Stripe payment gateway in Node.js?",
        "label": "backend,nodejs,stripe,payments",
        "language": "en",
        "context": "Stripe is a popular payment gateway for processing online payments in web applications.",
        "answer": "To integrate Stripe payment gateway in Node.js:\n\n1. Install Stripe SDK:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your app:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n\napp.post('/payment', async (req, res) => {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: 1000, // amount in cents\n      currency: 'usd',\n      payment_method: req.body.payment_method,\n      confirm: true\n    });\n    res.json({ success: true, paymentIntent });\n  } catch (error) {\n    res.status(500).send(error.message);\n  }\n});\n```\n\n📚 Reference: https://stripe.com/docs/payments",
        "start_char": 0,
        "end_char": 646,
        "key_answer": "To integrate Stripe payment gateway in Node.js:\n\n1. Install Stripe SDK:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your app:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n\napp.post('/payment', async (req, res) => {\n  try {\n    const paymentIntent = await stripe.paymentIntents.create({\n      amount: 1000, // amount in cents\n      currency: 'usd',\n      payment_method: req.body.payment_method,\n      confirm: true\n    });\n    res.json({ success: true, paymentIntent });\n  } catch (error) {\n    res.status(500).send(error.message);\n  }\n});\n```\n\n📚 Reference: https://stripe.com/docs/payments"
    },
    {
        "question": "How to use GraphQL with Express.js?",
        "label": "backend,nodejs,graphql,express",
        "language": "en",
        "context": "GraphQL is a query language for your API, and Express.js can be used to create a server for GraphQL.",
        "answer": "Steps to use GraphQL with Express.js:\n\n1. Install required packages:\n```bash\nnpm install express graphql express-graphql\n```\n\n2. Set up a simple GraphQL server:\n```javascript\nconst express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type Query {\n    message: String\n  }\n`);\n\nconst rootValue = { message: 'Hello from GraphQL' };\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema,\n  rootValue,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Server running on port 4000'));`\n```\n\n📚 Reference: https://www.graphql.org/",
        "start_char": 0,
        "end_char": 681,
        "key_answer": "Steps to use GraphQL with Express.js:\n\n1. Install required packages:\n```bash\nnpm install express graphql express-graphql\n```\n\n2. Set up a simple GraphQL server:\n```javascript\nconst express = require('express');\nconst { graphqlHTTP } = require('express-graphql');\nconst { buildSchema } = require('graphql');\n\nconst schema = buildSchema(`\n  type Query {\n    message: String\n  }\n`);\n\nconst rootValue = { message: 'Hello from GraphQL' };\n\nconst app = express();\napp.use('/graphql', graphqlHTTP({\n  schema,\n  rootValue,\n  graphiql: true,\n}));\n\napp.listen(4000, () => console.log('Server running on port 4000'));`\n```\n\n📚 Reference: https://www.graphql.org/"
    },
    {
        "question": "How to implement server-side pagination in Node.js?",
        "label": "backend,nodejs,pagination",
        "language": "en",
        "context": "Server-side pagination is a technique to limit the number of items sent to the client, improving performance for large datasets.",
        "answer": "Steps to implement server-side pagination in Node.js:\n\n1. Use query parameters to specify the `page` and `limit`:\n```javascript\napp.get('/items', (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const skip = (page - 1) * limit;\n\n  // Fetch data with pagination logic\n  Item.find().skip(skip).limit(limit).exec((err, items) => {\n    res.json(items);\n  });\n});\n```\n\n2. Example request: `/items?page=2&limit=10`\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link",
        "start_char": 0,
        "end_char": 567,
        "key_answer": "Steps to implement server-side pagination in Node.js:\n\n1. Use query parameters to specify the `page` and `limit`:\n```javascript\napp.get('/items', (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const skip = (page - 1) * limit;\n\n  // Fetch data with pagination logic\n  Item.find().skip(skip).limit(limit).exec((err, items) => {\n    res.json(items);\n  });\n});\n```\n\n2. Example request: `/items?page=2&limit=10`\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Link"
    },
    {
        "question": "How to implement OAuth2 authentication in Node.js?",
        "label": "backend,nodejs,auth,oauth2",
        "language": "en",
        "context": "OAuth2 is an authorization framework that allows third-party services to exchange credentials for access tokens.",
        "answer": "Steps to implement OAuth2 authentication in Node.js:\n\n1. Install passport and OAuth2 strategy:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2').Strategy;\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://provider.com/oauth2/authorize',\n  tokenURL: 'https://provider.com/oauth2/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  User.findOrCreate({ oauthId: profile.id }, function (err, user) {\n    return done(err, user);\n  });\n}));\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 804,
        "key_answer": "Steps to implement OAuth2 authentication in Node.js:\n\n1. Install passport and OAuth2 strategy:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2').Strategy;\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://provider.com/oauth2/authorize',\n  tokenURL: 'https://provider.com/oauth2/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  User.findOrCreate({ oauthId: profile.id }, function (err, user) {\n    return done(err, user);\n  });\n}));\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to handle file uploads in Node.js with Multer?",
        "label": "backend,nodejs,upload,files,multer",
        "language": "en",
        "context": "Multer is a Node.js middleware for handling `multipart/form-data` used for uploading files.",
        "answer": "To handle file uploads in Node.js using Multer:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your application:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n3. Create an `uploads/` folder to store files.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 657,
        "key_answer": "To handle file uploads in Node.js using Multer:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your application:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n3. Create an `uploads/` folder to store files.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to use WebSockets with Express.js for real-time communication?",
        "label": "backend,nodejs,express,websockets",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single, long-lived connection, commonly used for real-time communication in web apps.",
        "answer": "To use WebSockets with Express.js for real-time communication:\n\n1. Install `socket.io` package:\n```bash\nnpm install socket.io\n```\n\n2. Set up WebSocket server in your Express app:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('disconnect', () => {\n    console.log('user disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Emit events on the client side to communicate with the server.\n\n📚 Reference: https://socket.io/docs/",
        "start_char": 0,
        "end_char": 760,
        "key_answer": "To use WebSockets with Express.js for real-time communication:\n\n1. Install `socket.io` package:\n```bash\nnpm install socket.io\n```\n\n2. Set up WebSocket server in your Express app:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('disconnect', () => {\n    console.log('user disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Emit events on the client side to communicate with the server.\n\n📚 Reference: https://socket.io/docs/"
    },
    {
        "question": "How to integrate Google OAuth2 login in a Node.js application?",
        "label": "backend,nodejs,oauth2,google,auth",
        "language": "en",
        "context": "Google OAuth2 provides a secure way to allow users to sign in with their Google account.",
        "answer": "To integrate Google OAuth2 login in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, function(token, tokenSecret, profile, done) {\n  return done(null, profile);\n}));\n```\n\n3. Add routes for authentication and callback:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['https://www.googleapis.com/auth/plus.login'] }));\n\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), function(req, res) {\n  res.redirect('/');\n});\n```\n\n📚 Reference: https://developers.google.com/identity/protocols/oauth2",
        "start_char": 0,
        "end_char": 991,
        "key_answer": "To integrate Google OAuth2 login in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, function(token, tokenSecret, profile, done) {\n  return done(null, profile);\n}));\n```\n\n3. Add routes for authentication and callback:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['https://www.googleapis.com/auth/plus.login'] }));\n\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), function(req, res) {\n  res.redirect('/');\n});\n```\n\n📚 Reference: https://developers.google.com/identity/protocols/oauth2"
    },
    {
        "question": "How to use Redis in a Node.js application?",
        "label": "backend,nodejs,redis",
        "language": "en",
        "context": "Redis is an open-source, in-memory data structure store, used as a database, cache, and message broker.",
        "answer": "To use Redis in a Node.js application:\n\n1. Install `redis` package:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set and get values from Redis:\n```javascript\nclient.set('myKey', 'some value', redis.print);\nclient.get('myKey', (err, reply) => {\n  console.log(reply); // Will print 'some value'\n});\n```\n\n📚 Reference: https://redis.io/documentation",
        "start_char": 0,
        "end_char": 562,
        "key_answer": "To use Redis in a Node.js application:\n\n1. Install `redis` package:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set and get values from Redis:\n```javascript\nclient.set('myKey', 'some value', redis.print);\nclient.get('myKey', (err, reply) => {\n  console.log(reply); // Will print 'some value'\n});\n```\n\n📚 Reference: https://redis.io/documentation"
    },
    {
        "question": "How to use Sequelize with PostgreSQL in a Node.js application?",
        "label": "backend,nodejs,sequelize,postgresql",
        "language": "en",
        "context": "Sequelize is a promise-based Node.js ORM that supports various SQL-based databases, including PostgreSQL.",
        "answer": "Steps to use Sequelize with PostgreSQL in Node.js:\n\n1. Install Sequelize and PostgreSQL driver:\n```bash\nnpm install sequelize pg pg-hstore\n```\n\n2. Set up Sequelize connection:\n```javascript\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize('postgres://username:password@localhost:5432/mydb');\n\nsequelize.authenticate().then(() => {\n  console.log('Connection has been established successfully.');\n}).catch(err => {\n  console.error('Unable to connect to the database:', err);\n});\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  age: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n  }\n});\n```\n\n4. Synchronize the model and interact with the database:\n```javascript\nUser.sync().then(() => {\n  return User.create({ name: 'John Doe', age: 30 });\n});\n```\n\n📚 Reference: https://sequelize.org/docs/",
        "start_char": 0,
        "end_char": 960,
        "key_answer": "Steps to use Sequelize with PostgreSQL in Node.js:\n\n1. Install Sequelize and PostgreSQL driver:\n```bash\nnpm install sequelize pg pg-hstore\n```\n\n2. Set up Sequelize connection:\n```javascript\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize('postgres://username:password@localhost:5432/mydb');\n\nsequelize.authenticate().then(() => {\n  console.log('Connection has been established successfully.');\n}).catch(err => {\n  console.error('Unable to connect to the database:', err);\n});\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false,\n  },\n  age: {\n    type: Sequelize.INTEGER,\n    allowNull: false,\n  }\n});\n```\n\n4. Synchronize the model and interact with the database:\n```javascript\nUser.sync().then(() => {\n  return User.create({ name: 'John Doe', age: 30 });\n});\n```\n\n📚 Reference: https://sequelize.org/docs/"
    },
    {
        "question": "How to deploy a Node.js application on Heroku?",
        "label": "backend,nodejs,heroku,deployment",
        "language": "en",
        "context": "Heroku is a cloud platform that enables developers to build, run, and operate applications entirely in the cloud.",
        "answer": "To deploy a Node.js application on Heroku:\n\n1. Install Heroku CLI:\n```bash\nnpm install -g heroku\n```\n\n2. Initialize a git repository in your project folder:\n```bash\ngit init\n```\n\n3. Create a Heroku app:\n```bash\nheroku create your-app-name\n```\n\n4. Add a `Procfile` in your root directory (this tells Heroku how to run your app):\n```bash\nweb: node index.js\n```\n\n5. Push your code to Heroku:\n```bash\ngit add .\ngit commit -m \"Initial commit\"\ngit push heroku master\n```\n\n6. Open your app in the browser:\n```bash\nheroku open\n```\n\n📚 Reference: https://devcenter.heroku.com/articles/git",
        "start_char": 0,
        "end_char": 614,
        "key_answer": "To deploy a Node.js application on Heroku:\n\n1. Install Heroku CLI:\n```bash\nnpm install -g heroku\n```\n\n2. Initialize a git repository in your project folder:\n```bash\ngit init\n```\n\n3. Create a Heroku app:\n```bash\nheroku create your-app-name\n```\n\n4. Add a `Procfile` in your root directory (this tells Heroku how to run your app):\n```bash\nweb: node index.js\n```\n\n5. Push your code to Heroku:\n```bash\ngit add .\ngit commit -m \"Initial commit\"\ngit push heroku master\n```\n\n6. Open your app in the browser:\n```bash\nheroku open\n```\n\n📚 Reference: https://devcenter.heroku.com/articles/git"
    },
    {
        "question": "How to implement JWT authentication in a Node.js application?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are used for securely transmitting information between client and server as a JSON object.",
        "answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n\n2. Create a route to issue JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'john' }; // Example user\n  const token = jwt.sign(user, 'secretkey', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n\n3. Create a middleware to verify the JWT token:\n```javascript\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!token) return res.sendStatus(403);\n\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n}\n```\n\n4. Protect routes with JWT middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.json({ message: 'This is a protected route' });\n});\n```\n\n📚 Reference: https://jwt.io/",
        "start_char": 0,
        "end_char": 1054,
        "key_answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n\n2. Create a route to issue JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst express = require('express');\nconst app = express();\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'john' }; // Example user\n  const token = jwt.sign(user, 'secretkey', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n\n3. Create a middleware to verify the JWT token:\n```javascript\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!token) return res.sendStatus(403);\n\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n}\n```\n\n4. Protect routes with JWT middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.json({ message: 'This is a protected route' });\n});\n```\n\n📚 Reference: https://jwt.io/"
    },
    {
        "question": "How to configure CORS in an Express.js application?",
        "label": "backend,nodejs,express,cors",
        "language": "en",
        "context": "CORS (Cross-Origin Resource Sharing) is a mechanism to allow or restrict resources on a web server based on the origin of the request.",
        "answer": "Steps to configure CORS in an Express.js application:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n\n2. Use CORS middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors()); // Allow all domains by default\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. To restrict CORS to certain origins, you can configure it:\n```javascript\napp.use(cors({ origin: 'http://example.com' }));\n```\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 662,
        "key_answer": "Steps to configure CORS in an Express.js application:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n\n2. Use CORS middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors()); // Allow all domains by default\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. To restrict CORS to certain origins, you can configure it:\n```javascript\napp.use(cors({ origin: 'http://example.com' }));\n```\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to integrate Stripe for payments in a Node.js application?",
        "label": "backend,nodejs,stripe,payments",
        "language": "en",
        "context": "Stripe is a payment processing platform that allows you to accept payments in your applications.",
        "answer": "Steps to integrate Stripe in a Node.js application:\n\n1. Install the Stripe package:\n```bash\nnpm install stripe\n```\n\n2. Set up your Stripe secret key:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n```\n\n3. Create a payment intent on the server:\n```javascript\napp.post('/create-payment-intent', async (req, res) => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000, // The amount in cents\n    currency: 'usd',\n  });\n  res.send({ clientSecret: paymentIntent.client_secret });\n});\n```\n\n4. On the client side, use the Stripe.js library to handle the payment:\n```javascript\nconst stripe = Stripe('your-publishable-key');\nconst { clientSecret } = await fetch('/create-payment-intent').then(res => res.json());\nconst {error} = await stripe.confirmCardPayment(clientSecret, { payment_method: cardElement });\n```\n\n📚 Reference: https://stripe.com/docs/payments",
        "start_char": 0,
        "end_char": 929,
        "key_answer": "Steps to integrate Stripe in a Node.js application:\n\n1. Install the Stripe package:\n```bash\nnpm install stripe\n```\n\n2. Set up your Stripe secret key:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n```\n\n3. Create a payment intent on the server:\n```javascript\napp.post('/create-payment-intent', async (req, res) => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000, // The amount in cents\n    currency: 'usd',\n  });\n  res.send({ clientSecret: paymentIntent.client_secret });\n});\n```\n\n4. On the client side, use the Stripe.js library to handle the payment:\n```javascript\nconst stripe = Stripe('your-publishable-key');\nconst { clientSecret } = await fetch('/create-payment-intent').then(res => res.json());\nconst {error} = await stripe.confirmCardPayment(clientSecret, { payment_method: cardElement });\n```\n\n📚 Reference: https://stripe.com/docs/payments"
    },
    {
        "question": "How to deploy an Angular application to Firebase Hosting?",
        "label": "frontend,angular,firebase,hosting,deployment",
        "language": "en",
        "context": "Firebase Hosting is a service provided by Firebase for hosting web applications with fast and secure delivery.",
        "answer": "Steps to deploy an Angular application to Firebase Hosting:\n\n1. Install Firebase CLI globally:\n```bash\nnpm install -g firebase-tools\n```\n\n2. Login to Firebase CLI:\n```bash\nfirebase login\n```\n\n3. Initialize Firebase in your project directory:\n```bash\nfirebase init\n```\n\n4. Choose Firebase Hosting and select your Firebase project.\n\n5. Build your Angular app for production:\n```bash\nng build --prod\n```\n\n6. Deploy the application to Firebase Hosting:\n```bash\nfirebase deploy\n```\n\n📚 Reference: https://firebase.google.com/docs/hosting",
        "start_char": 0,
        "end_char": 560,
        "key_answer": "Steps to deploy an Angular application to Firebase Hosting:\n\n1. Install Firebase CLI globally:\n```bash\nnpm install -g firebase-tools\n```\n\n2. Login to Firebase CLI:\n```bash\nfirebase login\n```\n\n3. Initialize Firebase in your project directory:\n```bash\nfirebase init\n```\n\n4. Choose Firebase Hosting and select your Firebase project.\n\n5. Build your Angular app for production:\n```bash\nng build --prod\n```\n\n6. Deploy the application to Firebase Hosting:\n```bash\nfirebase deploy\n```\n\n📚 Reference: https://firebase.google.com/docs/hosting"
    },
    {
        "question": "How to use Python for web scraping?",
        "label": "python,web-scraping",
        "language": "en",
        "context": "Web scraping is the process of extracting data from websites using a script or program.",
        "answer": "Steps to use Python for web scraping:\n\n1. Install required libraries:\n```bash\npip install requests beautifulsoup4\n```\n\n2. Make an HTTP request to fetch the page content:\n```python\nimport requests\nurl = 'https://example.com'\nresponse = requests.get(url)\n```\n\n3. Parse the HTML content with BeautifulSoup:\n```python\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n```\n\n4. Extract data from the page:\n```python\ntitle = soup.find('h1').text\nprint(title)\n```\n\n📚 Reference: https://realpython.com/beautiful-soup-web-scraper-python/",
        "start_char": 0,
        "end_char": 587,
        "key_answer": "Steps to use Python for web scraping:\n\n1. Install required libraries:\n```bash\npip install requests beautifulsoup4\n```\n\n2. Make an HTTP request to fetch the page content:\n```python\nimport requests\nurl = 'https://example.com'\nresponse = requests.get(url)\n```\n\n3. Parse the HTML content with BeautifulSoup:\n```python\nfrom bs4 import BeautifulSoup\nsoup = BeautifulSoup(response.content, 'html.parser')\n```\n\n4. Extract data from the page:\n```python\ntitle = soup.find('h1').text\nprint(title)\n```\n\n📚 Reference: https://realpython.com/beautiful-soup-web-scraper-python/"
    },
    {
        "question": "How to use Python to automate sending emails?",
        "label": "python,automation,email",
        "language": "en",
        "context": "Python can be used to automate tasks like sending emails using libraries such as `smtplib`.",
        "answer": "Steps to use Python for sending automated emails:\n\n1. Import the necessary libraries:\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n```\n\n2. Set up the email details:\n```python\nsender_email = 'your-email@example.com'\nreceiver_email = 'receiver-email@example.com'\npassword = 'your-email-password'\n```\n\n3. Create the email message:\n```python\nmessage = MIMEMultipart()\nmessage['From'] = sender_email\nmessage['To'] = receiver_email\nmessage['Subject'] = 'Automated Email'\nbody = 'This is an automated email.'\nmessage.attach(MIMEText(body, 'plain'))\n```\n\n4. Send the email:\n```python\nwith smtplib.SMTP('smtp.gmail.com', 587) as server:\n  server.starttls()\n  server.login(sender_email, password)\n  text = message.as_string()\n  server.sendmail(sender_email, receiver_email, text)\n```\n\n📚 Reference: https://realpython.com/python-send-email/#sending-email-with-python",
        "start_char": 0,
        "end_char": 954,
        "key_answer": "Steps to use Python for sending automated emails:\n\n1. Import the necessary libraries:\n```python\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n```\n\n2. Set up the email details:\n```python\nsender_email = 'your-email@example.com'\nreceiver_email = 'receiver-email@example.com'\npassword = 'your-email-password'\n```\n\n3. Create the email message:\n```python\nmessage = MIMEMultipart()\nmessage['From'] = sender_email\nmessage['To'] = receiver_email\nmessage['Subject'] = 'Automated Email'\nbody = 'This is an automated email.'\nmessage.attach(MIMEText(body, 'plain'))\n```\n\n4. Send the email:\n```python\nwith smtplib.SMTP('smtp.gmail.com', 587) as server:\n  server.starttls()\n  server.login(sender_email, password)\n  text = message.as_string()\n  server.sendmail(sender_email, receiver_email, text)\n```\n\n📚 Reference: https://realpython.com/python-send-email/#sending-email-with-python"
    },
    {
        "question": "How to use Docker for containerizing a Node.js application?",
        "label": "backend,nodejs,docker,containerization",
        "language": "en",
        "context": "Docker is a platform for automating the deployment of applications inside lightweight, portable containers.",
        "answer": "Steps to use Docker for containerizing a Node.js application:\n\n1. Install Docker on your machine:\n   Follow the instructions at https://docs.docker.com/get-docker/\n\n2. Create a `Dockerfile` in the root of your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package.json .\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ['npm', 'start']\n```\n\n3. Build the Docker image:\n```bash\ndocker build -t node-app .\n```\n\n4. Run the Docker container:\n```bash\ndocker run -p 3000:3000 node-app\n```\n\n5. Your Node.js app is now running in a Docker container.\n\n📚 Reference: https://www.docker.com/",
        "start_char": 0,
        "end_char": 615,
        "key_answer": "Steps to use Docker for containerizing a Node.js application:\n\n1. Install Docker on your machine:\n   Follow the instructions at https://docs.docker.com/get-docker/\n\n2. Create a `Dockerfile` in the root of your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package.json .\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ['npm', 'start']\n```\n\n3. Build the Docker image:\n```bash\ndocker build -t node-app .\n```\n\n4. Run the Docker container:\n```bash\ndocker run -p 3000:3000 node-app\n```\n\n5. Your Node.js app is now running in a Docker container.\n\n📚 Reference: https://www.docker.com/"
    },
    {
        "question": "How to set up and use MongoDB in a Node.js application?",
        "label": "backend,nodejs,mongodb",
        "language": "en",
        "context": "MongoDB is a NoSQL database that uses a document-oriented data model. It is widely used in Node.js applications for data storage.",
        "answer": "Steps to set up and use MongoDB in a Node.js application:\n\n1. Install MongoDB locally or use a cloud service like MongoDB Atlas.\n\n2. Install `mongoose` package to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n\n3. Connect to MongoDB in your Node.js app:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nmongoose.connection.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n```\n\n4. Define a model for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  age: Number,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n5. Create and save data to MongoDB:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 30 });\nnewUser.save().then(() => console.log('User saved!'));\n```\n\n📚 Reference: https://mongoosejs.com/",
        "start_char": 0,
        "end_char": 946,
        "key_answer": "Steps to set up and use MongoDB in a Node.js application:\n\n1. Install MongoDB locally or use a cloud service like MongoDB Atlas.\n\n2. Install `mongoose` package to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n\n3. Connect to MongoDB in your Node.js app:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n\nmongoose.connection.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n```\n\n4. Define a model for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  age: Number,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n5. Create and save data to MongoDB:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 30 });\nnewUser.save().then(() => console.log('User saved!'));\n```\n\n📚 Reference: https://mongoosejs.com/"
    },
    {
        "question": "How to use Git for version control in a Node.js project?",
        "label": "backend,nodejs,git,version-control",
        "language": "en",
        "context": "Git is a distributed version control system that helps track changes in source code during software development.",
        "answer": "Steps to use Git for version control in a Node.js project:\n\n1. Initialize a Git repository in your project folder:\n```bash\ngit init\n```\n\n2. Add files to the staging area:\n```bash\ngit add .\n```\n\n3. Commit the changes:\n```bash\ngit commit -m \"Initial commit\"\n```\n\n4. Set up a remote repository (e.g., GitHub):\n```bash\ngit remote add origin https://github.com/your-username/your-repo.git\n```\n\n5. Push your code to the remote repository:\n```bash\ngit push -u origin master\n```\n\n6. Pull changes from the remote repository (if collaborating with others):\n```bash\ngit pull origin master\n```\n\n📚 Reference: https://git-scm.com/",
        "start_char": 0,
        "end_char": 650,
        "key_answer": "Steps to use Git for version control in a Node.js project:\n\n1. Initialize a Git repository in your project folder:\n```bash\ngit init\n```\n\n2. Add files to the staging area:\n```bash\ngit add .\n```\n\n3. Commit the changes:\n```bash\ngit commit -m \"Initial commit\"\n```\n\n4. Set up a remote repository (e.g., GitHub):\n```bash\ngit remote add origin https://github.com/your-username/your-repo.git\n```\n\n5. Push your code to the remote repository:\n```bash\ngit push -u origin master\n```\n\n6. Pull changes from the remote repository (if collaborating with others):\n```bash\ngit pull origin master\n```\n\n📚 Reference: https://git-scm.com/"
    },
    {
        "question": "How to implement a RESTful API using Express.js?",
        "label": "backend,nodejs,express,api",
        "language": "en",
        "context": "RESTful APIs are a set of rules and conventions for building HTTP-based services in a stateless manner.",
        "answer": "Steps to implement a RESTful API using Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up the Express application:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json()); // To parse JSON bodies\n```\n\n3. Define routes for your API:\n```javascript\napp.get('/api/users', (req, res) => {\n  res.json({ users: ['John', 'Jane'] });\n});\n\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).json(newUser);\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('API is running on http://localhost:3000');\n});\n```\n\n5. Test the API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/",
        "start_char": 0,
        "end_char": 747,
        "key_answer": "Steps to implement a RESTful API using Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up the Express application:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json()); // To parse JSON bodies\n```\n\n3. Define routes for your API:\n```javascript\napp.get('/api/users', (req, res) => {\n  res.json({ users: ['John', 'Jane'] });\n});\n\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).json(newUser);\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('API is running on http://localhost:3000');\n});\n```\n\n5. Test the API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/"
    },
    {
        "question": "How to use JWT with Passport.js in a Node.js application?",
        "label": "backend,nodejs,jwt,passport,authentication",
        "language": "en",
        "context": "Passport.js is a popular authentication middleware for Node.js that can integrate with various strategies, including JWT.",
        "answer": "Steps to use JWT with Passport.js in a Node.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install passport passport-jwt jsonwebtoken express\n```\n\n2. Set up Passport with JWT strategy:\n```javascript\nconst passport = require('passport');\nconst { Strategy, ExtractJwt } = require('passport-jwt');\nconst jwtSecret = 'your-secret-key';\n\npassport.use(new Strategy({\n  secretOrKey: jwtSecret,\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n}, (jwtPayload, done) => {\n  // Verify the user based on JWT payload\n  done(null, jwtPayload);\n}));\n```\n\n3. Protect your routes with Passport's JWT authentication:\n```javascript\napp.get('/protected', passport.authenticate('jwt', { session: false }), (req, res) => {\n  res.json({ message: 'This is a protected route' });\n});\n```\n\n4. Generate a JWT token and send it to the client during login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, jwtSecret, { expiresIn: '1h' });\nres.json({ token });\n```\n\n📚 Reference: https://www.passportjs.org/packages/passport-jwt/",
        "start_char": 0,
        "end_char": 1105,
        "key_answer": "Steps to use JWT with Passport.js in a Node.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install passport passport-jwt jsonwebtoken express\n```\n\n2. Set up Passport with JWT strategy:\n```javascript\nconst passport = require('passport');\nconst { Strategy, ExtractJwt } = require('passport-jwt');\nconst jwtSecret = 'your-secret-key';\n\npassport.use(new Strategy({\n  secretOrKey: jwtSecret,\n  jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n}, (jwtPayload, done) => {\n  // Verify the user based on JWT payload\n  done(null, jwtPayload);\n}));\n```\n\n3. Protect your routes with Passport's JWT authentication:\n```javascript\napp.get('/protected', passport.authenticate('jwt', { session: false }), (req, res) => {\n  res.json({ message: 'This is a protected route' });\n});\n```\n\n4. Generate a JWT token and send it to the client during login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, jwtSecret, { expiresIn: '1h' });\nres.json({ token });\n```\n\n📚 Reference: https://www.passportjs.org/packages/passport-jwt/"
    },
    {
        "question": "How to implement server-side rendering (SSR) with React?",
        "label": "frontend,react,ssr",
        "language": "en",
        "context": "Server-side rendering (SSR) with React allows rendering the initial HTML page on the server before sending it to the client, improving SEO and performance.",
        "answer": "Steps to implement SSR with React:\n\n1. Set up an Express server to handle the React app rendering:\n```bash\nnpm install express react-dom/server\n```\n\n2. Create a basic Express server (`server.js`):\n```javascript\nconst express = require('express');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst App = require('./src/App');\n\nconst app = express();\n\napp.use(express.static('public')); // Serve static assets\n\napp.get('*', (req, res) => {\n  const appString = ReactDOMServer.renderToString(<App />);\n  res.send(`<!DOCTYPE html><html><head><title>SSR React</title></head><body><div id=\"root\">${appString}</div></body></html>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n```\n\n3. Set up Babel and Webpack to transpile React JSX syntax for the server.\n\n4. Make sure to use `ReactDOMServer.renderToString()` for SSR instead of `ReactDOM.render()`.\n\n5. Now, your React app will render on the server and send a fully rendered page to the client.\n\n📚 Reference: https://reactjs.org/docs/react-dom-server.html",
        "start_char": 0,
        "end_char": 1116,
        "key_answer": "Steps to implement SSR with React:\n\n1. Set up an Express server to handle the React app rendering:\n```bash\nnpm install express react-dom/server\n```\n\n2. Create a basic Express server (`server.js`):\n```javascript\nconst express = require('express');\nconst React = require('react');\nconst ReactDOMServer = require('react-dom/server');\nconst App = require('./src/App');\n\nconst app = express();\n\napp.use(express.static('public')); // Serve static assets\n\napp.get('*', (req, res) => {\n  const appString = ReactDOMServer.renderToString(<App />);\n  res.send(`<!DOCTYPE html><html><head><title>SSR React</title></head><body><div id=\"root\">${appString}</div></body></html>`);\n});\n\napp.listen(3000, () => {\n  console.log('Server is listening on port 3000');\n});\n```\n\n3. Set up Babel and Webpack to transpile React JSX syntax for the server.\n\n4. Make sure to use `ReactDOMServer.renderToString()` for SSR instead of `ReactDOM.render()`.\n\n5. Now, your React app will render on the server and send a fully rendered page to the client.\n\n📚 Reference: https://reactjs.org/docs/react-dom-server.html"
    },
    {
        "question": "How to use Redux for state management in React?",
        "label": "frontend,react,redux,statemanagement",
        "language": "en",
        "context": "Redux is a state management library for JavaScript applications, commonly used with React to manage the state in a predictable way.",
        "answer": "Steps to use Redux in a React application:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create actions to describe state changes:\n```javascript\n// actions.js\nexport const increment = () => ({ type: 'INCREMENT' });\n```\n\n3. Create a reducer to manage the state:\n```javascript\n// reducer.js\nconst initialState = { count: 0 };\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n```\n\n4. Create a store to hold the application state:\n```javascript\n// store.js\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\n\nconst store = createStore(counterReducer);\nexport default store;\n```\n\n5. Wrap your React app with the `Provider` component to connect it to the Redux store:\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n6. Use `useDispatch` and `useSelector` hooks in your components to interact with the Redux store:\n```javascript\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increment } from './actions';\n\nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/",
        "start_char": 0,
        "end_char": 1738,
        "key_answer": "Steps to use Redux in a React application:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create actions to describe state changes:\n```javascript\n// actions.js\nexport const increment = () => ({ type: 'INCREMENT' });\n```\n\n3. Create a reducer to manage the state:\n```javascript\n// reducer.js\nconst initialState = { count: 0 };\n\nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n```\n\n4. Create a store to hold the application state:\n```javascript\n// store.js\nimport { createStore } from 'redux';\nimport counterReducer from './reducer';\n\nconst store = createStore(counterReducer);\nexport default store;\n```\n\n5. Wrap your React app with the `Provider` component to connect it to the Redux store:\n```javascript\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n6. Use `useDispatch` and `useSelector` hooks in your components to interact with the Redux store:\n```javascript\nimport { useDispatch, useSelector } from 'react-redux';\nimport { increment } from './actions';\n\nconst Counter = () => {\n  const count = useSelector(state => state.count);\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => dispatch(increment())}>Increment</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/"
    },
    {
        "question": "How to set up an ESLint configuration for a Node.js project?",
        "label": "backend,nodejs,eslint,code-quality",
        "language": "en",
        "context": "ESLint is a static code analysis tool used to find and fix problems in JavaScript code, improving code quality and consistency.",
        "answer": "Steps to set up ESLint for a Node.js project:\n\n1. Install ESLint as a development dependency:\n```bash\nnpm install --save-dev eslint\n```\n\n2. Initialize ESLint configuration:\n```bash\nnpx eslint --init\n```\n\n3. Follow the prompts to choose the style and rules you prefer (e.g., Airbnb, Standard, etc.).\n\n4. Create or edit `.eslintrc.js` file to configure rules:\n```javascript\nmodule.exports = {\n  env: {\n    node: true,\n    es6: true,\n  },\n  extends: ['eslint:recommended', 'plugin:node/recommended'],\n  rules: {\n    'no-console': 'warn',\n  },\n};\n```\n\n5. Add an `eslint` script to `package.json`:\n```json\n\"scripts\": {\n  \"lint\": \"eslint .\"\n}\n```\n\n6. Run ESLint to check your code:\n```bash\nnpm run lint\n```\n\n📚 Reference: https://eslint.org/",
        "start_char": 0,
        "end_char": 780,
        "key_answer": "Steps to set up ESLint for a Node.js project:\n\n1. Install ESLint as a development dependency:\n```bash\nnpm install --save-dev eslint\n```\n\n2. Initialize ESLint configuration:\n```bash\nnpx eslint --init\n```\n\n3. Follow the prompts to choose the style and rules you prefer (e.g., Airbnb, Standard, etc.).\n\n4. Create or edit `.eslintrc.js` file to configure rules:\n```javascript\nmodule.exports = {\n  env: {\n    node: true,\n    es6: true,\n  },\n  extends: ['eslint:recommended', 'plugin:node/recommended'],\n  rules: {\n    'no-console': 'warn',\n  },\n};\n```\n\n5. Add an `eslint` script to `package.json`:\n```json\n\"scripts\": {\n  \"lint\": \"eslint .\"\n}\n```\n\n6. Run ESLint to check your code:\n```bash\nnpm run lint\n```\n\n📚 Reference: https://eslint.org/"
    },
    {
        "question": "How to use the Fetch API in JavaScript to make HTTP requests?",
        "label": "frontend,js,fetch,api",
        "language": "en",
        "context": "The Fetch API is a modern JavaScript API used for making HTTP requests in web applications.",
        "answer": "Steps to use the Fetch API in JavaScript:\n\n1. Make a GET request to fetch data from an API:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. Make a POST request to send data to an API:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ name: 'John Doe', age: 30 }),\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Handle errors using `.catch()` to catch any issues with the request.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
        "start_char": 0,
        "end_char": 805,
        "key_answer": "Steps to use the Fetch API in JavaScript:\n\n1. Make a GET request to fetch data from an API:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. Make a POST request to send data to an API:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  body: JSON.stringify({ name: 'John Doe', age: 30 }),\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Handle errors using `.catch()` to catch any issues with the request.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
    },
    {
        "question": "How to optimize React performance with React.memo?",
        "label": "frontend,react,performance",
        "language": "en",
        "context": "React.memo is a higher-order component used to optimize performance by memoizing functional components and preventing unnecessary re-renders.",
        "answer": "Steps to use React.memo for performance optimization:\n\n1. Wrap the component with `React.memo`:\n```javascript\nimport React from 'react';\n\nconst MyComponent = ({ prop1, prop2 }) => {\n  console.log('Component re-rendered');\n  return <div>{prop1} {prop2}</div>;\n};\n\nexport default React.memo(MyComponent);\n```\n\n2. `React.memo` will prevent the component from re-rendering if the props haven't changed.\n\n3. Use `React.memo` with functional components to improve performance by avoiding unnecessary re-renders.\n\n4. You can also pass a custom comparison function to `React.memo` if you need more control over prop comparison:\n```javascript\nexport default React.memo(MyComponent, (prevProps, nextProps) => {\n  return prevProps.prop1 === nextProps.prop1 && prevProps.prop2 === nextProps.prop2;\n});\n```\n\n5. Use `React.memo` when the component has heavy rendering or when the props are expensive to compute.\n\n📚 Reference: https://reactjs.org/docs/react-api.html#reactmemo",
        "start_char": 0,
        "end_char": 988,
        "key_answer": "Steps to use React.memo for performance optimization:\n\n1. Wrap the component with `React.memo`:\n```javascript\nimport React from 'react';\n\nconst MyComponent = ({ prop1, prop2 }) => {\n  console.log('Component re-rendered');\n  return <div>{prop1} {prop2}</div>;\n};\n\nexport default React.memo(MyComponent);\n```\n\n2. `React.memo` will prevent the component from re-rendering if the props haven't changed.\n\n3. Use `React.memo` with functional components to improve performance by avoiding unnecessary re-renders.\n\n4. You can also pass a custom comparison function to `React.memo` if you need more control over prop comparison:\n```javascript\nexport default React.memo(MyComponent, (prevProps, nextProps) => {\n  return prevProps.prop1 === nextProps.prop1 && prevProps.prop2 === nextProps.prop2;\n});\n```\n\n5. Use `React.memo` when the component has heavy rendering or when the props are expensive to compute.\n\n📚 Reference: https://reactjs.org/docs/react-api.html#reactmemo"
    },
    {
        "question": "How to implement a REST API using Express in Node.js?",
        "label": "backend,nodejs,express,rest-api",
        "language": "en",
        "context": "Express is a minimal and flexible Node.js web application framework used for building web APIs.",
        "answer": "Steps to implement a REST API using Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express app (`app.js`):\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Add a route to handle GET requests:\n```javascript\napp.get('/api/users', (req, res) => {\n  const users = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n  res.json(users);\n});\n```\n\n4. Add a route to handle POST requests:\n```javascript\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  // Add user to database\n  res.status(201).json(newUser);\n});\n```\n\n5. Use Express middleware to handle JSON request bodies:\n```javascript\napp.use(express.json());\n```\n\n6. Test the API with tools like Postman or CURL.\n\n📚 Reference: https://expressjs.com/",
        "start_char": 0,
        "end_char": 963,
        "key_answer": "Steps to implement a REST API using Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express app (`app.js`):\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Add a route to handle GET requests:\n```javascript\napp.get('/api/users', (req, res) => {\n  const users = [{ id: 1, name: 'John' }, { id: 2, name: 'Jane' }];\n  res.json(users);\n});\n```\n\n4. Add a route to handle POST requests:\n```javascript\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  // Add user to database\n  res.status(201).json(newUser);\n});\n```\n\n5. Use Express middleware to handle JSON request bodies:\n```javascript\napp.use(express.json());\n```\n\n6. Test the API with tools like Postman or CURL.\n\n📚 Reference: https://expressjs.com/"
    },
    {
        "question": "How to connect a Node.js application to a MongoDB database?",
        "label": "backend,nodejs,mongodb,db",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. Mongoose is often used to connect Node.js applications to MongoDB.",
        "answer": "Steps to connect a Node.js application to MongoDB:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Create a connection to the MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.error('MongoDB connection error:', err));\n```\n\n3. Define a schema for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  email: String,\n});\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Perform CRUD operations, such as creating a new user:\n```javascript\nconst newUser = new User({ name: 'John Doe', email: 'john@example.com' });\nnewUser.save()\n  .then(() => console.log('User saved'))\n  .catch(err => console.error('Error saving user:', err));\n```\n\n📚 Reference: https://mongoosejs.com/",
        "start_char": 0,
        "end_char": 970,
        "key_answer": "Steps to connect a Node.js application to MongoDB:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Create a connection to the MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.error('MongoDB connection error:', err));\n```\n\n3. Define a schema for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  email: String,\n});\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Perform CRUD operations, such as creating a new user:\n```javascript\nconst newUser = new User({ name: 'John Doe', email: 'john@example.com' });\nnewUser.save()\n  .then(() => console.log('User saved'))\n  .catch(err => console.error('Error saving user:', err));\n```\n\n📚 Reference: https://mongoosejs.com/"
    },
    {
        "question": "How to deploy a React application to Heroku?",
        "label": "frontend,react,heroku,deployment",
        "language": "en",
        "context": "Heroku is a cloud platform that allows developers to deploy, manage, and scale applications quickly.",
        "answer": "Steps to deploy a React application to Heroku:\n\n1. Install the Heroku CLI:\nVisit https://devcenter.heroku.com/articles/heroku-cli and follow the installation instructions for your operating system.\n\n2. Build the React application:\n```bash\nnpm run build\n```\nThis will generate a `build/` directory that contains the optimized production files.\n\n3. Create a `server.js` file in the root of your project:\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(process.env.PORT || 3000, () => {\n  console.log('Server is running');\n});\n```\n\n4. Create a `Procfile` in the root of your project with the following content:\n```txt\nweb: node server.js\n```\n\n5. Push your code to Heroku:\n```bash\nheroku create\ngit push heroku master\n```\n\n6. Visit your application on the provided Heroku URL.\n\n📚 Reference: https://devcenter.heroku.com/articles/git",
        "start_char": 0,
        "end_char": 1088,
        "key_answer": "Steps to deploy a React application to Heroku:\n\n1. Install the Heroku CLI:\nVisit https://devcenter.heroku.com/articles/heroku-cli and follow the installation instructions for your operating system.\n\n2. Build the React application:\n```bash\nnpm run build\n```\nThis will generate a `build/` directory that contains the optimized production files.\n\n3. Create a `server.js` file in the root of your project:\n```javascript\nconst express = require('express');\nconst path = require('path');\nconst app = express();\n\napp.use(express.static(path.join(__dirname, 'build')));\n\napp.get('*', (req, res) => {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n\napp.listen(process.env.PORT || 3000, () => {\n  console.log('Server is running');\n});\n```\n\n4. Create a `Procfile` in the root of your project with the following content:\n```txt\nweb: node server.js\n```\n\n5. Push your code to Heroku:\n```bash\nheroku create\ngit push heroku master\n```\n\n6. Visit your application on the provided Heroku URL.\n\n📚 Reference: https://devcenter.heroku.com/articles/git"
    },
    {
        "question": "How to implement error handling in an Express.js application?",
        "label": "backend,express,error-handling",
        "language": "en",
        "context": "Error handling is a key part of building robust APIs and web applications, ensuring that errors are properly managed and communicated to the client.",
        "answer": "Steps to implement error handling in an Express.js application:\n\n1. Use a middleware to handle errors:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n\n2. Define a route that could throw an error:\n```javascript\napp.get('/api/error', (req, res) => {\n  throw new Error('An error occurred');\n});\n```\n\n3. Attach the error handling middleware to the app after defining all your routes:\n```javascript\napp.use(errorHandler);\n```\n\n4. Customize the error handling logic to handle different error types, such as 404 for not found errors or 400 for bad requests.\n```javascript\nfunction errorHandler(err, req, res, next) {\n  if (err.message === 'Not Found') {\n    return res.status(404).send('Resource not found');\n  }\n  res.status(500).send('Server error');\n}\n```\n\n5. Ensure all unhandled errors are caught and properly logged for debugging purposes.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html#error-handling",
        "start_char": 0,
        "end_char": 1049,
        "key_answer": "Steps to implement error handling in an Express.js application:\n\n1. Use a middleware to handle errors:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n\n2. Define a route that could throw an error:\n```javascript\napp.get('/api/error', (req, res) => {\n  throw new Error('An error occurred');\n});\n```\n\n3. Attach the error handling middleware to the app after defining all your routes:\n```javascript\napp.use(errorHandler);\n```\n\n4. Customize the error handling logic to handle different error types, such as 404 for not found errors or 400 for bad requests.\n```javascript\nfunction errorHandler(err, req, res, next) {\n  if (err.message === 'Not Found') {\n    return res.status(404).send('Resource not found');\n  }\n  res.status(500).send('Server error');\n}\n```\n\n5. Ensure all unhandled errors are caught and properly logged for debugging purposes.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html#error-handling"
    },
    {
        "question": "How to use Redux for state management in a React application?",
        "label": "frontend,react,redux,state-management",
        "language": "en",
        "context": "Redux is a state management library for JavaScript applications that is most commonly used with React for managing the application state.",
        "answer": "Steps to use Redux for state management in a React application:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store to hold the state:\n```javascript\nimport { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(counterReducer);\n```\n\n3. Provide the store to the React app using `Provider` from React-Redux:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n4. Use `useSelector` to access the Redux state in a component:\n```javascript\nimport { useSelector } from 'react-redux';\n\nfunction Counter() {\n  const count = useSelector(state => state.count);\n  return <div>{count}</div>;\n}\n```\n\n5. Dispatch actions to modify the state using `useDispatch`:\n```javascript\nimport { useDispatch } from 'react-redux';\n\nfunction IncrementButton() {\n  const dispatch = useDispatch();\n  return <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>;\n}\n```\n\n📚 Reference: https://react-redux.js.org/",
        "start_char": 0,
        "end_char": 1382,
        "key_answer": "Steps to use Redux for state management in a React application:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store to hold the state:\n```javascript\nimport { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nfunction counterReducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(counterReducer);\n```\n\n3. Provide the store to the React app using `Provider` from React-Redux:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n```\n\n4. Use `useSelector` to access the Redux state in a component:\n```javascript\nimport { useSelector } from 'react-redux';\n\nfunction Counter() {\n  const count = useSelector(state => state.count);\n  return <div>{count}</div>;\n}\n```\n\n5. Dispatch actions to modify the state using `useDispatch`:\n```javascript\nimport { useDispatch } from 'react-redux';\n\nfunction IncrementButton() {\n  const dispatch = useDispatch();\n  return <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>;\n}\n```\n\n📚 Reference: https://react-redux.js.org/"
    },
    {
        "question": "How to implement pagination in a React application?",
        "label": "frontend,react,pagination",
        "language": "en",
        "context": "Pagination is a technique used to divide large sets of data into smaller, more manageable parts and improve performance in React applications.",
        "answer": "Steps to implement pagination in a React application:\n\n1. Install the necessary pagination package (optional, or create custom pagination):\n```bash\nnpm install react-paginate\n```\n\n2. Create a pagination component that accepts current page and page count as props:\n```javascript\nimport React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nfunction Pagination({ currentPage, pageCount, onPageChange }) {\n  return (\n    <ReactPaginate\n      pageCount={pageCount}\n      pageRangeDisplayed={5}\n      marginPagesDisplayed={2}\n      onPageChange={onPageChange}\n      containerClassName={'pagination'}\n    />\n  );\n}\n```\n\n3. Handle the page change event in the parent component and fetch the appropriate data:\n```javascript\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [data, setData] = useState([]);\n  const pageCount = 10; // example\n\n  useEffect(() => {\n    fetch(`https://api.example.com/data?page=${currentPage}`)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, [currentPage]);\n\n  return (\n    <div>\n      <Pagination currentPage={currentPage} pageCount={pageCount} onPageChange={({ selected }) => setCurrentPage(selected + 1)} />\n      <ul>{data.map(item => <li key={item.id}>{item.name}</li>)}</ul>\n    </div>\n  );\n}\n```\n\n4. Style the pagination component using CSS.\n\n📚 Reference: https://react-paginate.js.org/",
        "start_char": 0,
        "end_char": 1437,
        "key_answer": "Steps to implement pagination in a React application:\n\n1. Install the necessary pagination package (optional, or create custom pagination):\n```bash\nnpm install react-paginate\n```\n\n2. Create a pagination component that accepts current page and page count as props:\n```javascript\nimport React from 'react';\nimport ReactPaginate from 'react-paginate';\n\nfunction Pagination({ currentPage, pageCount, onPageChange }) {\n  return (\n    <ReactPaginate\n      pageCount={pageCount}\n      pageRangeDisplayed={5}\n      marginPagesDisplayed={2}\n      onPageChange={onPageChange}\n      containerClassName={'pagination'}\n    />\n  );\n}\n```\n\n3. Handle the page change event in the parent component and fetch the appropriate data:\n```javascript\nfunction App() {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [data, setData] = useState([]);\n  const pageCount = 10; // example\n\n  useEffect(() => {\n    fetch(`https://api.example.com/data?page=${currentPage}`)\n      .then(response => response.json())\n      .then(data => setData(data));\n  }, [currentPage]);\n\n  return (\n    <div>\n      <Pagination currentPage={currentPage} pageCount={pageCount} onPageChange={({ selected }) => setCurrentPage(selected + 1)} />\n      <ul>{data.map(item => <li key={item.id}>{item.name}</li>)}</ul>\n    </div>\n  );\n}\n```\n\n4. Style the pagination component using CSS.\n\n📚 Reference: https://react-paginate.js.org/"
    },
    {
        "question": "How to implement Google OAuth in a Node.js application?",
        "label": "backend,nodejs,oauth,google-authentication",
        "language": "en",
        "context": "OAuth allows third-party applications to grant limited access to users' accounts on a service without sharing their credentials.",
        "answer": "Steps to implement Google OAuth in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth credentials on Google Developer Console:\n- Go to https://console.developers.google.com/ and create a new project.\n- Enable the Google+ API.\n- Create OAuth credentials and get the client ID and client secret.\n\n3. Configure Passport with Google OAuth strategy:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'YOUR_GOOGLE_CLIENT_ID',\n  clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```\n\n4. Set up the authentication routes:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));\n\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n5. Handle user session with `express-session`.\n\n📚 Reference: https://www.passportjs.org/packages/passport-google-oauth20/",
        "start_char": 0,
        "end_char": 1273,
        "key_answer": "Steps to implement Google OAuth in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth credentials on Google Developer Console:\n- Go to https://console.developers.google.com/ and create a new project.\n- Enable the Google+ API.\n- Create OAuth credentials and get the client ID and client secret.\n\n3. Configure Passport with Google OAuth strategy:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'YOUR_GOOGLE_CLIENT_ID',\n  clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```\n\n4. Set up the authentication routes:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));\n\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n5. Handle user session with `express-session`.\n\n📚 Reference: https://www.passportjs.org/packages/passport-google-oauth20/"
    },
    {
        "question": "How to set up MongoDB with Mongoose in a Node.js application?",
        "label": "backend,nodejs,mongodb,mongoose",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. Mongoose is an Object Data Modeling (ODM) library for MongoDB and Node.js.",
        "answer": "Steps to set up MongoDB with Mongoose in a Node.js application:\n\n1. Install MongoDB and Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/myDatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nmongoose.connection.once('open', () => {\n  console.log('MongoDB connected');\n});\n```\n\n3. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true }\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create and save a document to the database:\n```javascript\nconst newUser = new User({\n  name: 'John Doe',\n  email: 'john.doe@example.com'\n});\n\nnewUser.save().then(() => {\n  console.log('User saved');\n});\n```\n\n5. Query the database to retrieve documents:\n```javascript\nUser.find({}).then(users => {\n  console.log(users);\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 1107,
        "key_answer": "Steps to set up MongoDB with Mongoose in a Node.js application:\n\n1. Install MongoDB and Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/myDatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nmongoose.connection.once('open', () => {\n  console.log('MongoDB connected');\n});\n```\n\n3. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\n\nconst userSchema = new Schema({\n  name: { type: String, required: true },\n  email: { type: String, required: true, unique: true }\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create and save a document to the database:\n```javascript\nconst newUser = new User({\n  name: 'John Doe',\n  email: 'john.doe@example.com'\n});\n\nnewUser.save().then(() => {\n  console.log('User saved');\n});\n```\n\n5. Query the database to retrieve documents:\n```javascript\nUser.find({}).then(users => {\n  console.log(users);\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to create a REST API using Node.js and Express?",
        "label": "backend,nodejs,express,api",
        "language": "en",
        "context": "A RESTful API is a way of designing networked applications that allows different services to communicate over HTTP.",
        "answer": "Steps to create a REST API using Node.js and Express:\n\n1. Install Express and initialize the project:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json()); // for parsing application/json\n\napp.get('/api/users', (req, res) => {\n  res.send([{ name: 'John' }, { name: 'Jane' }]);\n});\n\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).send(newUser);\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Start the server and test the API endpoints:\n```bash\nnode server.js\n```\n\n4. Use Postman or any HTTP client to test GET and POST requests:\n- GET request: http://localhost:3000/api/users\n- POST request: send a JSON body to http://localhost:3000/api/users\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 958,
        "key_answer": "Steps to create a REST API using Node.js and Express:\n\n1. Install Express and initialize the project:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json()); // for parsing application/json\n\napp.get('/api/users', (req, res) => {\n  res.send([{ name: 'John' }, { name: 'Jane' }]);\n});\n\napp.post('/api/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).send(newUser);\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Start the server and test the API endpoints:\n```bash\nnode server.js\n```\n\n4. Use Postman or any HTTP client to test GET and POST requests:\n- GET request: http://localhost:3000/api/users\n- POST request: send a JSON body to http://localhost:3000/api/users\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to implement JWT (JSON Web Token) authentication in a Node.js application?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JWT (JSON Web Tokens) are a compact and secure way of transmitting information between a client and a server as a JSON object, often used for authentication.",
        "answer": "Steps to implement JWT authentication in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs express\n```\n\n2. Create a JWT signing function:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nfunction generateToken(user) {\n  return jwt.sign({ id: user._id }, 'your-secret-key', { expiresIn: '1h' });\n}\n```\n\n3. Create a login route that authenticates the user and generates a token:\n```javascript\napp.post('/login', (req, res) => {\n  const { email, password } = req.body;\n  // Validate user credentials (check password using bcrypt)\n  // If valid, generate and send JWT\n  const token = generateToken(user);\n  res.json({ token });\n});\n```\n\n4. Create a middleware to verify the token on protected routes:\n```javascript\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization'];\n  if (!token) {\n    return res.status(403).send('Token required');\n  }\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n}\n```\n\n5. Protect routes by using the middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs",
        "start_char": 0,
        "end_char": 1373,
        "key_answer": "Steps to implement JWT authentication in a Node.js application:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs express\n```\n\n2. Create a JWT signing function:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nfunction generateToken(user) {\n  return jwt.sign({ id: user._id }, 'your-secret-key', { expiresIn: '1h' });\n}\n```\n\n3. Create a login route that authenticates the user and generates a token:\n```javascript\napp.post('/login', (req, res) => {\n  const { email, password } = req.body;\n  // Validate user credentials (check password using bcrypt)\n  // If valid, generate and send JWT\n  const token = generateToken(user);\n  res.json({ token });\n});\n```\n\n4. Create a middleware to verify the token on protected routes:\n```javascript\nfunction verifyToken(req, res, next) {\n  const token = req.headers['authorization'];\n  if (!token) {\n    return res.status(403).send('Token required');\n  }\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n}\n```\n\n5. Protect routes by using the middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs"
    },
    {
        "question": "How to optimize the performance of a React application?",
        "label": "frontend,react,performance,optimization",
        "language": "en",
        "context": "Optimizing the performance of a React application is crucial to ensuring fast load times and a smooth user experience.",
        "answer": "Steps to optimize the performance of a React application:\n\n1. Use React's `React.memo` for functional components to prevent unnecessary re-renders:\n```javascript\nconst MyComponent = React.memo(({ data }) => {\n  return <div>{data}</div>;\n});\n```\n\n2. Use `shouldComponentUpdate` for class components to control when re-rendering happens:\n```javascript\nclass MyComponent extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.data !== this.props.data;\n  }\n}\n```\n\n3. Code-split your application using React's `React.lazy` and `Suspense` to load only the necessary parts of your app:\n```javascript\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n<Suspense fallback={<div>Loading...</div>}>\n  <OtherComponent />\n</Suspense>\n```\n\n4. Use the `useEffect` hook to perform side effects only when necessary, avoiding unnecessary re-renders:\n```javascript\nuseEffect(() => {\n  fetchData();\n}, []); // Runs only once, after the initial render\n```\n\n5. Optimize images and assets by using formats like WebP and compressing images.\n\n📚 Reference: https://reactjs.org/docs/optimizing-performance.html",
        "start_char": 0,
        "end_char": 1167,
        "key_answer": "Steps to optimize the performance of a React application:\n\n1. Use React's `React.memo` for functional components to prevent unnecessary re-renders:\n```javascript\nconst MyComponent = React.memo(({ data }) => {\n  return <div>{data}</div>;\n});\n```\n\n2. Use `shouldComponentUpdate` for class components to control when re-rendering happens:\n```javascript\nclass MyComponent extends React.Component {\n  shouldComponentUpdate(nextProps) {\n    return nextProps.data !== this.props.data;\n  }\n}\n```\n\n3. Code-split your application using React's `React.lazy` and `Suspense` to load only the necessary parts of your app:\n```javascript\nconst OtherComponent = React.lazy(() => import('./OtherComponent'));\n\n<Suspense fallback={<div>Loading...</div>}>\n  <OtherComponent />\n</Suspense>\n```\n\n4. Use the `useEffect` hook to perform side effects only when necessary, avoiding unnecessary re-renders:\n```javascript\nuseEffect(() => {\n  fetchData();\n}, []); // Runs only once, after the initial render\n```\n\n5. Optimize images and assets by using formats like WebP and compressing images.\n\n📚 Reference: https://reactjs.org/docs/optimizing-performance.html"
    },
    {
        "question": "How to use WebSockets in a Node.js application?",
        "label": "backend,nodejs,websockets",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single TCP connection, allowing real-time communication between clients and servers.",
        "answer": "Steps to use WebSockets in a Node.js application:\n\n1. Install `ws` package for WebSocket support:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n\n  ws.on('message', (message) => {\n    console.log('Received message: %s', message);\n  });\n\n  ws.send('Hello, client!');\n});\n```\n\n3. Create a WebSocket client to connect to the server:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\n\nws.on('open', () => {\n  ws.send('Hello, server!');\n});\n\nws.on('message', (data) => {\n  console.log('Received message: %s', data);\n});\n```\n\n4. Ensure the server is listening on the correct port and that the client connects properly.\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 905,
        "key_answer": "Steps to use WebSockets in a Node.js application:\n\n1. Install `ws` package for WebSocket support:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n\n  ws.on('message', (message) => {\n    console.log('Received message: %s', message);\n  });\n\n  ws.send('Hello, client!');\n});\n```\n\n3. Create a WebSocket client to connect to the server:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\n\nws.on('open', () => {\n  ws.send('Hello, server!');\n});\n\nws.on('message', (data) => {\n  console.log('Received message: %s', data);\n});\n```\n\n4. Ensure the server is listening on the correct port and that the client connects properly.\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to use React Router for navigation in a React application?",
        "label": "frontend,react,react-router",
        "language": "en",
        "context": "React Router is a popular routing library for React applications that allows you to implement navigation between different views or pages.",
        "answer": "Steps to use React Router for navigation in a React application:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up the `BrowserRouter` component in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n3. Create different components for each route:\n```javascript\nfunction Home() {\n  return <h2>Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Page</h2>;\n}\n```\n\n4. Use `Link` to navigate between pages without reloading the page:\n```javascript\nimport { Link } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <Link to='/'>Home</Link>\n      <Link to='/about'>About</Link>\n    </nav>\n  );\n}\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 1009,
        "key_answer": "Steps to use React Router for navigation in a React application:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up the `BrowserRouter` component in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n```\n\n3. Create different components for each route:\n```javascript\nfunction Home() {\n  return <h2>Home Page</h2>;\n}\n\nfunction About() {\n  return <h2>About Page</h2>;\n}\n```\n\n4. Use `Link` to navigate between pages without reloading the page:\n```javascript\nimport { Link } from 'react-router-dom';\n\nfunction Navigation() {\n  return (\n    <nav>\n      <Link to='/'>Home</Link>\n      <Link to='/about'>About</Link>\n    </nav>\n  );\n}\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to use the fetch API to make HTTP requests in JavaScript?",
        "label": "frontend,js,fetch",
        "language": "en",
        "context": "The Fetch API provides a simple interface for making HTTP requests in JavaScript, allowing you to fetch resources asynchronously.",
        "answer": "Steps to use the fetch API to make HTTP requests in JavaScript:\n\n1. Make a GET request using fetch:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. Make a POST request with JSON data:\n```javascript\nconst postData = { name: 'John', email: 'john@example.com' };\n\nfetch('https://api.example.com/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(postData)\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Handle errors using the `.catch` method for better error management.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
        "start_char": 0,
        "end_char": 860,
        "key_answer": "Steps to use the fetch API to make HTTP requests in JavaScript:\n\n1. Make a GET request using fetch:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n2. Make a POST request with JSON data:\n```javascript\nconst postData = { name: 'John', email: 'john@example.com' };\n\nfetch('https://api.example.com/users', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify(postData)\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Handle errors using the `.catch` method for better error management.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
    },
    {
        "question": "How to handle errors in asynchronous JavaScript using async/await?",
        "label": "frontend,js,async-await,error-handling",
        "language": "en",
        "context": "Async/await is a modern approach in JavaScript for handling asynchronous operations, making the code cleaner and more readable.",
        "answer": "Steps to handle errors in asynchronous JavaScript using async/await:\n\n1. Declare an async function to handle asynchronous code:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n2. Use the `try` block to run the asynchronous code and the `catch` block to handle any errors that occur during the process.\n\n3. Call the async function to execute the operation and catch any errors:\n```javascript\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 734,
        "key_answer": "Steps to handle errors in asynchronous JavaScript using async/await:\n\n1. Declare an async function to handle asynchronous code:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n2. Use the `try` block to run the asynchronous code and the `catch` block to handle any errors that occur during the process.\n\n3. Call the async function to execute the operation and catch any errors:\n```javascript\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to deploy a React application to a production server?",
        "label": "frontend,react,deploy,production",
        "language": "en",
        "context": "Deploying a React application to a production server involves building the app and configuring the server for optimal performance.",
        "answer": "Steps to deploy a React application to a production server:\n\n1. Build the React application for production:\n```bash\nnpm run build\n```\n\n2. Install a static server to serve the build folder:\n```bash\nnpm install -g serve\n```\n\n3. Serve the production build on a local server:\n```bash\nserve -s build\n```\n\n4. Upload the contents of the `build` folder to your production server.\n\n5. Configure your web server (e.g., Nginx or Apache) to serve the React app's static files and set up routing.\n\n📚 Reference: https://reactjs.org/docs/deployment.html",
        "start_char": 0,
        "end_char": 559,
        "key_answer": "Steps to deploy a React application to a production server:\n\n1. Build the React application for production:\n```bash\nnpm run build\n```\n\n2. Install a static server to serve the build folder:\n```bash\nnpm install -g serve\n```\n\n3. Serve the production build on a local server:\n```bash\nserve -s build\n```\n\n4. Upload the contents of the `build` folder to your production server.\n\n5. Configure your web server (e.g., Nginx or Apache) to serve the React app's static files and set up routing.\n\n📚 Reference: https://reactjs.org/docs/deployment.html"
    },
    {
        "question": "How to create a Web API using Flask in Python?",
        "label": "backend,python,flask,api",
        "language": "en",
        "context": "Flask is a lightweight framework for building web applications in Python, including APIs and server-side logic.",
        "answer": "Steps to create a Web API using Flask in Python:\n\n1. Install Flask:\n```bash\npip install flask\n```\n\n2. Create a simple Flask app and define a route:\n```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef get_data():\n  return jsonify({'message': 'Hello, World!'})\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n3. Start the Flask server:\n```bash\npython app.py\n```\n\n4. Test the API using Postman or your browser by navigating to `http://localhost:5000/api`.\n\n5. Add more routes for different endpoints and methods as needed.\n\n📚 Reference: https://flask.palletsprojects.com/en/2.1.x/",
        "start_char": 0,
        "end_char": 669,
        "key_answer": "Steps to create a Web API using Flask in Python:\n\n1. Install Flask:\n```bash\npip install flask\n```\n\n2. Create a simple Flask app and define a route:\n```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef get_data():\n  return jsonify({'message': 'Hello, World!'})\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n3. Start the Flask server:\n```bash\npython app.py\n```\n\n4. Test the API using Postman or your browser by navigating to `http://localhost:5000/api`.\n\n5. Add more routes for different endpoints and methods as needed.\n\n📚 Reference: https://flask.palletsprojects.com/en/2.1.x/"
    },
    {
        "question": "How to integrate a Node.js backend with a React frontend?",
        "label": "backend,nodejs,react,integration",
        "language": "en",
        "context": "Integrating a Node.js backend with a React frontend allows for a full-stack JavaScript application where React handles the user interface and Node.js serves the backend logic.",
        "answer": "Steps to integrate a Node.js backend with a React frontend:\n\n1. Set up a Node.js server using Express:\n```bash\nnpm install express\n```\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'Hello from the backend!' });\n});\n\napp.listen(5000, () => {\n  console.log('Server running on port 5000');\n});\n```\n\n2. Set up the React frontend and make API calls to the backend:\n```bash\nnpx create-react-app frontend\ncd frontend\nnpm start\n```\n\n3. In your React component, use `fetch` to call the backend API:\n```javascript\nfetch('http://localhost:5000/api/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n4. Ensure both the frontend and backend are running on different ports, and use a proxy to avoid CORS issues in development.\n\n📚 Reference: https://reactjs.org/docs/proxying-api-requests-in-development.html",
        "start_char": 0,
        "end_char": 1002,
        "key_answer": "Steps to integrate a Node.js backend with a React frontend:\n\n1. Set up a Node.js server using Express:\n```bash\nnpm install express\n```\n\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'Hello from the backend!' });\n});\n\napp.listen(5000, () => {\n  console.log('Server running on port 5000');\n});\n```\n\n2. Set up the React frontend and make API calls to the backend:\n```bash\nnpx create-react-app frontend\ncd frontend\nnpm start\n```\n\n3. In your React component, use `fetch` to call the backend API:\n```javascript\nfetch('http://localhost:5000/api/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error));\n```\n\n4. Ensure both the frontend and backend are running on different ports, and use a proxy to avoid CORS issues in development.\n\n📚 Reference: https://reactjs.org/docs/proxying-api-requests-in-development.html"
    },
    {
        "question": "How to set up environment variables in a Node.js project?",
        "label": "backend,nodejs,environment-variables",
        "language": "en",
        "context": "Environment variables are used to store sensitive data like API keys and configuration settings outside of your source code.",
        "answer": "Steps to set up environment variables in a Node.js project:\n\n1. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root of your project and add environment variables:\n```\nDB_HOST=localhost\nDB_PORT=5432\nAPI_KEY=your_api_key\n```\n\n3. In your Node.js application, require and configure `dotenv` to load the variables:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DB_HOST); // Output: localhost\n```\n\n4. Use the environment variables throughout your application by accessing them via `process.env`.\n\n5. Ensure `.env` is added to your `.gitignore` file to prevent sensitive data from being committed to version control.\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 752,
        "key_answer": "Steps to set up environment variables in a Node.js project:\n\n1. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root of your project and add environment variables:\n```\nDB_HOST=localhost\nDB_PORT=5432\nAPI_KEY=your_api_key\n```\n\n3. In your Node.js application, require and configure `dotenv` to load the variables:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DB_HOST); // Output: localhost\n```\n\n4. Use the environment variables throughout your application by accessing them via `process.env`.\n\n5. Ensure `.env` is added to your `.gitignore` file to prevent sensitive data from being committed to version control.\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to implement JWT (JSON Web Tokens) authentication in a Node.js application?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) is a compact, URL-safe means of representing claims to be transferred between two parties, often used for authentication and authorization in web applications.",
        "answer": "Steps to implement JWT authentication in a Node.js application:\n\n1. Install the required packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to issue a JWT token after successful login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Validate username and password\n  // If valid, create a JWT\n  const token = jwt.sign({ userId: 1 }, 'your_secret_key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n\n3. Protect routes by verifying the JWT token:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization');\n  if (!token) return res.status(401).json({ message: 'No token, authorization denied' });\n  jwt.verify(token, 'your_secret_key', (err, decoded) => {\n    if (err) return res.status(401).json({ message: 'Token is not valid' });\n    req.user = decoded;\n    next();\n  });\n};\n```\n\n4. Use the `verifyToken` middleware on protected routes.\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 1110,
        "key_answer": "Steps to implement JWT authentication in a Node.js application:\n\n1. Install the required packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to issue a JWT token after successful login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Validate username and password\n  // If valid, create a JWT\n  const token = jwt.sign({ userId: 1 }, 'your_secret_key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n\n3. Protect routes by verifying the JWT token:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization');\n  if (!token) return res.status(401).json({ message: 'No token, authorization denied' });\n  jwt.verify(token, 'your_secret_key', (err, decoded) => {\n    if (err) return res.status(401).json({ message: 'Token is not valid' });\n    req.user = decoded;\n    next();\n  });\n};\n```\n\n4. Use the `verifyToken` middleware on protected routes.\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to implement pagination in a Node.js API?",
        "label": "backend,nodejs,pagination",
        "language": "en",
        "context": "Pagination allows you to split large sets of data into smaller, manageable chunks, improving performance and user experience in APIs.",
        "answer": "Steps to implement pagination in a Node.js API:\n\n1. Calculate the page and limit parameters from the query string:\n```javascript\nconst page = parseInt(req.query.page) || 1;\nconst limit = parseInt(req.query.limit) || 10;\n```\n\n2. Calculate the skip value to determine which records to fetch:\n```javascript\nconst skip = (page - 1) * limit;\n```\n\n3. Fetch the paginated data from your database using skip and limit:\n```javascript\napp.get('/api/posts', async (req, res) => {\n  const posts = await Post.find().skip(skip).limit(limit);\n  res.json(posts);\n});\n```\n\n4. Return metadata like total pages and current page for client-side handling:\n```javascript\nconst totalPosts = await Post.countDocuments();\nconst totalPages = Math.ceil(totalPosts / limit);\nres.json({ posts, totalPages, currentPage: page });\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 893,
        "key_answer": "Steps to implement pagination in a Node.js API:\n\n1. Calculate the page and limit parameters from the query string:\n```javascript\nconst page = parseInt(req.query.page) || 1;\nconst limit = parseInt(req.query.limit) || 10;\n```\n\n2. Calculate the skip value to determine which records to fetch:\n```javascript\nconst skip = (page - 1) * limit;\n```\n\n3. Fetch the paginated data from your database using skip and limit:\n```javascript\napp.get('/api/posts', async (req, res) => {\n  const posts = await Post.find().skip(skip).limit(limit);\n  res.json(posts);\n});\n```\n\n4. Return metadata like total pages and current page for client-side handling:\n```javascript\nconst totalPosts = await Post.countDocuments();\nconst totalPages = Math.ceil(totalPosts / limit);\nres.json({ posts, totalPages, currentPage: page });\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to create a RESTful API with Express.js?",
        "label": "backend,nodejs,express,api",
        "language": "en",
        "context": "Express.js is a minimal and flexible Node.js web application framework that provides a robust set of features to develop web and mobile applications, including the ability to create RESTful APIs.",
        "answer": "Steps to create a RESTful API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up the Express application:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json()); // For parsing application/json\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Create routes for your API:\n```javascript\napp.get('/api/products', (req, res) => {\n  // Get all products\n  res.json(products);\n});\n\napp.post('/api/products', (req, res) => {\n  // Create a new product\n  const newProduct = req.body;\n  products.push(newProduct);\n  res.status(201).json(newProduct);\n});\n```\n\n4. Test the API using Postman or curl.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 800,
        "key_answer": "Steps to create a RESTful API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up the Express application:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json()); // For parsing application/json\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Create routes for your API:\n```javascript\napp.get('/api/products', (req, res) => {\n  // Get all products\n  res.json(products);\n});\n\napp.post('/api/products', (req, res) => {\n  // Create a new product\n  const newProduct = req.body;\n  products.push(newProduct);\n  res.status(201).json(newProduct);\n});\n```\n\n4. Test the API using Postman or curl.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to handle errors in an Express.js application?",
        "label": "backend,nodejs,express,error-handling",
        "language": "en",
        "context": "Error handling is an essential part of building robust Node.js applications, particularly in Express.js, to ensure proper responses for different failure scenarios.",
        "answer": "Steps to handle errors in an Express.js application:\n\n1. Create a middleware to catch errors:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Use `try...catch` blocks to handle errors in async code:\n```javascript\napp.get('/api/data', async (req, res, next) => {\n  try {\n    const data = await getDataFromDatabase();\n    res.json(data);\n  } catch (error) {\n    next(error); // Pass error to the error handling middleware\n  }\n});\n```\n\n3. Customize error handling for different status codes or types of errors (e.g., 404 for not found).\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html",
        "start_char": 0,
        "end_char": 712,
        "key_answer": "Steps to handle errors in an Express.js application:\n\n1. Create a middleware to catch errors:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Use `try...catch` blocks to handle errors in async code:\n```javascript\napp.get('/api/data', async (req, res, next) => {\n  try {\n    const data = await getDataFromDatabase();\n    res.json(data);\n  } catch (error) {\n    next(error); // Pass error to the error handling middleware\n  }\n});\n```\n\n3. Customize error handling for different status codes or types of errors (e.g., 404 for not found).\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html"
    },
    {
        "question": "How to implement role-based access control (RBAC) in a Node.js application?",
        "label": "backend,nodejs,rbac,access-control",
        "language": "en",
        "context": "Role-based access control (RBAC) is a method for restricting system access to authorized users, and is commonly implemented in web applications to control user permissions.",
        "answer": "Steps to implement RBAC in a Node.js application:\n\n1. Define user roles (e.g., 'admin', 'user', 'guest').\n2. Create a middleware to check the user's role for protected routes:\n```javascript\nconst checkRole = (role) => {\n  return (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).json({ message: 'Access Denied' });\n    }\n    next();\n  };\n};\n```\n\n3. Protect routes by using the role-checking middleware:\n```javascript\napp.post('/admin', checkRole('admin'), (req, res) => {\n  res.send('Admin content');\n});\n```\n\n4. Assign roles to users when they register or authenticate.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 692,
        "key_answer": "Steps to implement RBAC in a Node.js application:\n\n1. Define user roles (e.g., 'admin', 'user', 'guest').\n2. Create a middleware to check the user's role for protected routes:\n```javascript\nconst checkRole = (role) => {\n  return (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).json({ message: 'Access Denied' });\n    }\n    next();\n  };\n};\n```\n\n3. Protect routes by using the role-checking middleware:\n```javascript\napp.post('/admin', checkRole('admin'), (req, res) => {\n  res.send('Admin content');\n});\n```\n\n4. Assign roles to users when they register or authenticate.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to use WebSockets for real-time communication in a Node.js application?",
        "label": "backend,nodejs,websockets,real-time",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single TCP connection, and are commonly used in real-time applications like chat apps, live notifications, and gaming.",
        "answer": "Steps to use WebSockets for real-time communication in a Node.js application:\n\n1. Install the `ws` library:\n```bash\nnpm install ws\n```\n\n2. Set up a WebSocket server in Node.js:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n  ws.on('message', (message) => {\n    console.log('Received:', message);\n    ws.send('Hello from server');\n  });\n});\n```\n\n3. Connect to the WebSocket server from the frontend using JavaScript:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  console.log('Connected to server');\n  socket.send('Hello from client');\n};\n\nsocket.onmessage = (event) => {\n  console.log('Received from server:', event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 876,
        "key_answer": "Steps to use WebSockets for real-time communication in a Node.js application:\n\n1. Install the `ws` library:\n```bash\nnpm install ws\n```\n\n2. Set up a WebSocket server in Node.js:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n  ws.on('message', (message) => {\n    console.log('Received:', message);\n    ws.send('Hello from server');\n  });\n});\n```\n\n3. Connect to the WebSocket server from the frontend using JavaScript:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  console.log('Connected to server');\n  socket.send('Hello from client');\n};\n\nsocket.onmessage = (event) => {\n  console.log('Received from server:', event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to use JWT (JSON Web Tokens) for authentication in a Node.js application?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are a compact, URL-safe means of representing claims to be transferred between two parties, often used for authentication and authorization in web applications.",
        "answer": "Steps to use JWT for authentication in a Node.js application:\n\n1. Install the `jsonwebtoken` library:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a JWT when the user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst token = jwt.sign({ userId: user._id }, 'your_secret_key', { expiresIn: '1h' });\n```\n\n3. Send the token in the response to the client:\n```javascript\nres.json({ token });\n```\n\n4. Verify the JWT in protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  jwt.verify(token, 'your_secret_key', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    req.user = decoded;\n    next();\n  });\n};\n\napp.use('/protected-route', verifyToken, (req, res) => {\n  res.send('Protected content');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 932,
        "key_answer": "Steps to use JWT for authentication in a Node.js application:\n\n1. Install the `jsonwebtoken` library:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a JWT when the user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst token = jwt.sign({ userId: user._id }, 'your_secret_key', { expiresIn: '1h' });\n```\n\n3. Send the token in the response to the client:\n```javascript\nres.json({ token });\n```\n\n4. Verify the JWT in protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  jwt.verify(token, 'your_secret_key', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    req.user = decoded;\n    next();\n  });\n};\n\napp.use('/protected-route', verifyToken, (req, res) => {\n  res.send('Protected content');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to set up a basic RESTful API with Express.js?",
        "label": "backend,nodejs,express,api",
        "language": "en",
        "context": "RESTful APIs are a way of providing interoperability between computer systems on the internet. Express.js is a minimal web framework for Node.js that can be used to set up APIs.",
        "answer": "Steps to set up a basic RESTful API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/endpoint', (req, res) => {\n  res.json({ message: 'GET request successful' });\n});\n\napp.post('/api/endpoint', (req, res) => {\n  res.json({ message: 'POST request successful' });\n});\n\napp.listen(3000, () => {\n  console.log('API running on port 3000');\n});\n```\n\n3. Test the API using Postman or any API testing tool.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 646,
        "key_answer": "Steps to set up a basic RESTful API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/endpoint', (req, res) => {\n  res.json({ message: 'GET request successful' });\n});\n\napp.post('/api/endpoint', (req, res) => {\n  res.json({ message: 'POST request successful' });\n});\n\napp.listen(3000, () => {\n  console.log('API running on port 3000');\n});\n```\n\n3. Test the API using Postman or any API testing tool.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to implement caching in Node.js using Redis?",
        "label": "backend,nodejs,redis,caching",
        "language": "en",
        "context": "Caching is a technique used to store data in a temporary storage location (cache) to reduce the time it takes to access frequently used data. Redis is a popular in-memory data store used for caching.",
        "answer": "Steps to implement caching in Node.js using Redis:\n\n1. Install the `redis` client for Node.js:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Implement caching for API responses:\n```javascript\napp.get('/api/data', (req, res) => {\n  client.get('data', (err, data) => {\n    if (data) {\n      return res.json(JSON.parse(data));\n    }\n    fetchDataFromDatabase().then(data => {\n      client.setex('data', 3600, JSON.stringify(data));\n      res.json(data);\n    });\n  });\n});\n```\n\n4. Test caching behavior using your API.\n\n📚 Reference: https://redis.io/topics/quickstart",
        "start_char": 0,
        "end_char": 788,
        "key_answer": "Steps to implement caching in Node.js using Redis:\n\n1. Install the `redis` client for Node.js:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Implement caching for API responses:\n```javascript\napp.get('/api/data', (req, res) => {\n  client.get('data', (err, data) => {\n    if (data) {\n      return res.json(JSON.parse(data));\n    }\n    fetchDataFromDatabase().then(data => {\n      client.setex('data', 3600, JSON.stringify(data));\n      res.json(data);\n    });\n  });\n});\n```\n\n4. Test caching behavior using your API.\n\n📚 Reference: https://redis.io/topics/quickstart"
    },
    {
        "question": "How to use MongoDB aggregation framework for complex queries?",
        "label": "backend,mongodb,aggregation,queries",
        "language": "en",
        "context": "The aggregation framework in MongoDB provides a powerful set of tools for performing complex queries, transforming and manipulating data before returning it.",
        "answer": "Steps to use MongoDB aggregation framework for complex queries:\n\n1. Define the aggregation pipeline:\n```javascript\ndb.collection.aggregate([\n  { $match: { status: 'active' } },\n  { $group: { _id: '$category', total: { $sum: '$amount' } } },\n  { $sort: { total: -1 } }\n]);\n```\n\n2. Use operators like `$match`, `$group`, `$sort`, `$project`, etc. to build your pipeline.\n\n3. Execute the aggregation query to get the results.\n\n📚 Reference: https://docs.mongodb.com/manual/reference/operator/aggregation/",
        "start_char": 0,
        "end_char": 515,
        "key_answer": "Steps to use MongoDB aggregation framework for complex queries:\n\n1. Define the aggregation pipeline:\n```javascript\ndb.collection.aggregate([\n  { $match: { status: 'active' } },\n  { $group: { _id: '$category', total: { $sum: '$amount' } } },\n  { $sort: { total: -1 } }\n]);\n```\n\n2. Use operators like `$match`, `$group`, `$sort`, `$project`, etc. to build your pipeline.\n\n3. Execute the aggregation query to get the results.\n\n📚 Reference: https://docs.mongodb.com/manual/reference/operator/aggregation/"
    },
    {
        "question": "How to implement a basic authentication system using Passport.js in Node.js?",
        "label": "backend,nodejs,passport,authentication",
        "language": "en",
        "context": "Passport.js is a simple, unobtrusive authentication middleware for Node.js that can be used to implement various types of authentication strategies.",
        "answer": "Steps to implement basic authentication with Passport.js:\n\n1. Install Passport.js and the Local strategy:\n```bash\nnpm install passport passport-local\n```\n\n2. Set up Passport in your application:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  User.findOne({ username }).then(user => {\n    if (!user || user.password !== password) {\n      return done(null, false, { message: 'Invalid credentials' });\n    }\n    return done(null, user);\n  });\n}));\n```\n\n3. Serialize and deserialize user information:\n```javascript\npassport.serializeUser((user, done) => { done(null, user.id); });\npassport.deserializeUser((id, done) => { User.findById(id).then(user => done(null, user)); });\n```\n\n4. Use Passport middleware in your routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/dashboard', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 1059,
        "key_answer": "Steps to implement basic authentication with Passport.js:\n\n1. Install Passport.js and the Local strategy:\n```bash\nnpm install passport passport-local\n```\n\n2. Set up Passport in your application:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  User.findOne({ username }).then(user => {\n    if (!user || user.password !== password) {\n      return done(null, false, { message: 'Invalid credentials' });\n    }\n    return done(null, user);\n  });\n}));\n```\n\n3. Serialize and deserialize user information:\n```javascript\npassport.serializeUser((user, done) => { done(null, user.id); });\npassport.deserializeUser((id, done) => { User.findById(id).then(user => done(null, user)); });\n```\n\n4. Use Passport middleware in your routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/dashboard', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/"
    },
    {
        "question": "How to integrate Stripe payment gateway in a Node.js application?",
        "label": "backend,nodejs,stripe,payment",
        "language": "en",
        "context": "Stripe is a widely used payment processing platform that allows you to accept payments online. You can integrate it into your Node.js application to handle transactions.",
        "answer": "Steps to integrate Stripe payment gateway in a Node.js application:\n\n1. Install Stripe's Node.js SDK:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your application:\n```javascript\nconst stripe = require('stripe')('your_stripe_secret_key');\n```\n\n3. Create a route to handle payment processing:\n```javascript\napp.post('/charge', async (req, res) => {\n  const { amount, currency, token } = req.body;\n  try {\n    const charge = await stripe.charges.create({\n      amount,\n      currency,\n      source: token,\n      description: 'Example charge'\n    });\n    res.status(200).send({ charge });\n  } catch (err) {\n    res.status(500).send({ error: err.message });\n  }\n});\n```\n\n4. Create a frontend form to collect payment details and send the token to the backend.\n\n📚 Reference: https://stripe.com/docs/payments/accept-a-payment",
        "start_char": 0,
        "end_char": 857,
        "key_answer": "Steps to integrate Stripe payment gateway in a Node.js application:\n\n1. Install Stripe's Node.js SDK:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your application:\n```javascript\nconst stripe = require('stripe')('your_stripe_secret_key');\n```\n\n3. Create a route to handle payment processing:\n```javascript\napp.post('/charge', async (req, res) => {\n  const { amount, currency, token } = req.body;\n  try {\n    const charge = await stripe.charges.create({\n      amount,\n      currency,\n      source: token,\n      description: 'Example charge'\n    });\n    res.status(200).send({ charge });\n  } catch (err) {\n    res.status(500).send({ error: err.message });\n  }\n});\n```\n\n4. Create a frontend form to collect payment details and send the token to the backend.\n\n📚 Reference: https://stripe.com/docs/payments/accept-a-payment"
    },
    {
        "question": "How to handle file uploads in Express.js using Multer?",
        "label": "backend,nodejs,express,multer,file-upload",
        "language": "en",
        "context": "Multer is a middleware for handling `multipart/form-data`, used for uploading files in Node.js applications, often with Express.js.",
        "answer": "Steps to handle file uploads with Multer in Express.js:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your application:\n```javascript\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n```\n\n3. Use Multer in your route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.send('File uploaded successfully.');\n});\n```\n\n4. Handle errors, such as file size limits and unsupported file types.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 644,
        "key_answer": "Steps to handle file uploads with Multer in Express.js:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your application:\n```javascript\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n```\n\n3. Use Multer in your route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.send('File uploaded successfully.');\n});\n```\n\n4. Handle errors, such as file size limits and unsupported file types.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to perform pagination with MongoDB in a Node.js application?",
        "label": "backend,nodejs,mongodb,pagination",
        "language": "en",
        "context": "Pagination helps in splitting data into pages to be displayed in chunks, improving user experience and server performance. MongoDB offers several ways to implement pagination.",
        "answer": "Steps to perform pagination with MongoDB in a Node.js application:\n\n1. Define a route for fetching paginated data:\n```javascript\napp.get('/items', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const skip = (page - 1) * limit;\n\n  const items = await Item.find().skip(skip).limit(limit);\n  res.json(items);\n});\n```\n\n2. Use `skip` and `limit` to control the number of documents returned.\n\n3. Optionally, you can return total count of documents to calculate total pages.\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/",
        "start_char": 0,
        "end_char": 633,
        "key_answer": "Steps to perform pagination with MongoDB in a Node.js application:\n\n1. Define a route for fetching paginated data:\n```javascript\napp.get('/items', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const skip = (page - 1) * limit;\n\n  const items = await Item.find().skip(skip).limit(limit);\n  res.json(items);\n});\n```\n\n2. Use `skip` and `limit` to control the number of documents returned.\n\n3. Optionally, you can return total count of documents to calculate total pages.\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/"
    },
    {
        "question": "How to secure your Express.js API with HTTPS?",
        "label": "backend,nodejs,express,https,security",
        "language": "en",
        "context": "Using HTTPS ensures encrypted communication between your server and clients, increasing the security of sensitive data.",
        "answer": "Steps to secure an Express.js API with HTTPS:\n\n1. Obtain an SSL/TLS certificate (you can use Let's Encrypt for free certificates).\n\n2. Install the `https` module:\n```bash\nnpm install https\n```\n\n3. Modify your Express app to listen for HTTPS requests:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst express = require('express');\nconst app = express();\n\nconst options = {\n  key: fs.readFileSync('path/to/private-key.pem'),\n  cert: fs.readFileSync('path/to/certificate.pem'),\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('Server running on HTTPS port 3000');\n});\n```\n\n4. Redirect HTTP traffic to HTTPS (optional):\n```javascript\napp.use((req, res, next) => {\n  if (req.protocol === 'http') {\n    res.redirect(301, `https://${req.headers.host}${req.url}`);\n  } else {\n    next();\n  }\n});\n```\n\n📚 Reference: https://expressjs.com/en/api.html#https",
        "start_char": 0,
        "end_char": 935,
        "key_answer": "Steps to secure an Express.js API with HTTPS:\n\n1. Obtain an SSL/TLS certificate (you can use Let's Encrypt for free certificates).\n\n2. Install the `https` module:\n```bash\nnpm install https\n```\n\n3. Modify your Express app to listen for HTTPS requests:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst express = require('express');\nconst app = express();\n\nconst options = {\n  key: fs.readFileSync('path/to/private-key.pem'),\n  cert: fs.readFileSync('path/to/certificate.pem'),\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('Server running on HTTPS port 3000');\n});\n```\n\n4. Redirect HTTP traffic to HTTPS (optional):\n```javascript\napp.use((req, res, next) => {\n  if (req.protocol === 'http') {\n    res.redirect(301, `https://${req.headers.host}${req.url}`);\n  } else {\n    next();\n  }\n});\n```\n\n📚 Reference: https://expressjs.com/en/api.html#https"
    },
    {
        "question": "How to connect MongoDB to a Node.js application?",
        "label": "backend,nodejs,mongodb,connection",
        "language": "en",
        "context": "MongoDB is a NoSQL database, and you can connect it to your Node.js application using the `mongoose` library or the native MongoDB driver.",
        "answer": "Steps to connect MongoDB to a Node.js application:\n\n1. Install the `mongoose` library:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using `mongoose.connect`:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/your_db', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n```\n\n3. Define your schema and model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Use the model to interact with your MongoDB data.\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 720,
        "key_answer": "Steps to connect MongoDB to a Node.js application:\n\n1. Install the `mongoose` library:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using `mongoose.connect`:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/your_db', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n```\n\n3. Define your schema and model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Use the model to interact with your MongoDB data.\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to implement JWT authentication in an Express.js application?",
        "label": "backend,nodejs,express,jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are used for secure user authentication in modern web applications. With JWT, you can ensure that users are authenticated and authorize access to different parts of your application.",
        "answer": "Steps to implement JWT authentication in an Express.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to register a new user and hash the password:\n```javascript\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  // Save the hashed password to your database\n  res.status(201).send('User registered');\n});\n```\n\n3. Create a route to login the user and generate a JWT token:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  // Find the user and compare passwords\n  const token = jwt.sign({ userId: user._id }, 'your_secret_key');\n  res.json({ token });\n});\n```\n\n4. Protect routes with JWT middleware:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'your_secret_key');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n};\n\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 1390,
        "key_answer": "Steps to implement JWT authentication in an Express.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to register a new user and hash the password:\n```javascript\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  // Save the hashed password to your database\n  res.status(201).send('User registered');\n});\n```\n\n3. Create a route to login the user and generate a JWT token:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  // Find the user and compare passwords\n  const token = jwt.sign({ userId: user._id }, 'your_secret_key');\n  res.json({ token });\n});\n```\n\n4. Protect routes with JWT middleware:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'your_secret_key');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n};\n\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to handle CORS (Cross-Origin Resource Sharing) in an Express.js application?",
        "label": "backend,nodejs,express,cors",
        "language": "en",
        "context": "CORS is a security feature implemented in browsers to prevent malicious websites from making requests to your server on behalf of the user. In Express.js, you can configure CORS to allow or restrict cross-origin requests.",
        "answer": "Steps to handle CORS in an Express.js application:\n\n1. Install the CORS middleware:\n```bash\nnpm install cors\n```\n\n2. Enable CORS in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n\n3. Configure CORS for specific routes or origins:\n```javascript\napp.use(cors({\n  origin: 'http://example.com',\n  methods: ['GET', 'POST']\n}));\n```\n\n4. You can also handle pre-flight requests by responding to `OPTIONS` method:\n```javascript\napp.options('*', cors());\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html",
        "start_char": 0,
        "end_char": 583,
        "key_answer": "Steps to handle CORS in an Express.js application:\n\n1. Install the CORS middleware:\n```bash\nnpm install cors\n```\n\n2. Enable CORS in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n\n3. Configure CORS for specific routes or origins:\n```javascript\napp.use(cors({\n  origin: 'http://example.com',\n  methods: ['GET', 'POST']\n}));\n```\n\n4. You can also handle pre-flight requests by responding to `OPTIONS` method:\n```javascript\napp.options('*', cors());\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html"
    },
    {
        "question": "How to create a RESTful API in Node.js with Express?",
        "label": "backend,nodejs,express,restful-api",
        "language": "en",
        "context": "A RESTful API is a set of rules that allow systems to communicate with each other using HTTP methods. With Node.js and Express, you can easily create a RESTful API to handle requests.",
        "answer": "Steps to create a RESTful API in Node.js with Express:\n\n1. Install Express and create a basic server:\n```bash\nnpm install express\n```\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n2. Define the API routes (GET, POST, PUT, DELETE):\n```javascript\napp.get('/api/items', (req, res) => {\n  res.json({ message: 'Get all items' });\n});\n\napp.post('/api/items', (req, res) => {\n  const newItem = req.body;\n  res.json({ message: 'Item created', item: newItem });\n});\n\napp.put('/api/items/:id', (req, res) => {\n  const updatedItem = req.body;\n  res.json({ message: 'Item updated', item: updatedItem });\n});\n\napp.delete('/api/items/:id', (req, res) => {\n  res.json({ message: 'Item deleted' });\n});\n```\n\n3. Test your API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 969,
        "key_answer": "Steps to create a RESTful API in Node.js with Express:\n\n1. Install Express and create a basic server:\n```bash\nnpm install express\n```\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n2. Define the API routes (GET, POST, PUT, DELETE):\n```javascript\napp.get('/api/items', (req, res) => {\n  res.json({ message: 'Get all items' });\n});\n\napp.post('/api/items', (req, res) => {\n  const newItem = req.body;\n  res.json({ message: 'Item created', item: newItem });\n});\n\napp.put('/api/items/:id', (req, res) => {\n  const updatedItem = req.body;\n  res.json({ message: 'Item updated', item: updatedItem });\n});\n\napp.delete('/api/items/:id', (req, res) => {\n  res.json({ message: 'Item deleted' });\n});\n```\n\n3. Test your API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to use MongoDB Atlas with a Node.js application?",
        "label": "backend,nodejs,mongodb-atlas,cloud-database",
        "language": "en",
        "context": "MongoDB Atlas is a cloud database service provided by MongoDB that allows you to host your MongoDB databases in the cloud. You can easily connect your Node.js application to MongoDB Atlas.",
        "answer": "Steps to use MongoDB Atlas with a Node.js application:\n\n1. Create a MongoDB Atlas account and set up a cluster.\n\n2. Get your connection string from the MongoDB Atlas dashboard.\n\n3. Install the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n4. Connect to MongoDB Atlas from your Node.js application:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb+srv://<username>:<password>@cluster0.mongodb.net/your_db', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB Atlas');\n});\n```\n\n5. Perform database operations like querying, inserting, and updating data as needed.\n\n📚 Reference: https://docs.atlas.mongodb.com/getting-started/",
        "start_char": 0,
        "end_char": 776,
        "key_answer": "Steps to use MongoDB Atlas with a Node.js application:\n\n1. Create a MongoDB Atlas account and set up a cluster.\n\n2. Get your connection string from the MongoDB Atlas dashboard.\n\n3. Install the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n4. Connect to MongoDB Atlas from your Node.js application:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb+srv://<username>:<password>@cluster0.mongodb.net/your_db', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB Atlas');\n});\n```\n\n5. Perform database operations like querying, inserting, and updating data as needed.\n\n📚 Reference: https://docs.atlas.mongodb.com/getting-started/"
    },
    {
        "question": "How to implement file upload validation in Node.js?",
        "label": "backend,nodejs,file-upload,validation",
        "language": "en",
        "context": "When handling file uploads in a Node.js application, it’s important to validate the files to ensure they meet the necessary criteria (e.g., file type, size) before saving them to the server.",
        "answer": "Steps to implement file upload validation in Node.js:\n\n1. Install Multer and configure the upload limits and file filters:\n```bash\nnpm install multer\n```\n\n2. Create the Multer instance with file validation options:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type'), false);\n  }\n};\n\nconst upload = multer({ storage, fileFilter, limits: { fileSize: 2 * 1024 * 1024 } });\n```\n\n3. Use Multer to handle file uploads and return an error if validation fails:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n}, (err, req, res, next) => {\n  res.status(400).send('File validation failed');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 1105,
        "key_answer": "Steps to implement file upload validation in Node.js:\n\n1. Install Multer and configure the upload limits and file filters:\n```bash\nnpm install multer\n```\n\n2. Create the Multer instance with file validation options:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type'), false);\n  }\n};\n\nconst upload = multer({ storage, fileFilter, limits: { fileSize: 2 * 1024 * 1024 } });\n```\n\n3. Use Multer to handle file uploads and return an error if validation fails:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n}, (err, req, res, next) => {\n  res.status(400).send('File validation failed');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to set up JWT authentication in a Node.js application?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JWT is a compact, URL-safe means of representing claims to be transferred between two parties, typically used for user authentication in web applications.",
        "answer": "Steps to set up JWT authentication in a Node.js application:\n\n1. Install required packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to handle user registration and password hashing:\n```javascript\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  res.status(201).send('User registered');\n});\n```\n\n3. Create a route to handle login and token generation:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const token = jwt.sign({ userId: user._id }, 'secretKey');\n  res.json({ token });\n});\n```\n\n4. Protect routes with JWT middleware:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'secretKey');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n};\n```\n\n5. Apply middleware to protected routes:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```",
        "start_char": 0,
        "end_char": 1269,
        "key_answer": "Steps to set up JWT authentication in a Node.js application:\n\n1. Install required packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a route to handle user registration and password hashing:\n```javascript\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = await bcrypt.hash(password, 10);\n  res.status(201).send('User registered');\n});\n```\n\n3. Create a route to handle login and token generation:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const token = jwt.sign({ userId: user._id }, 'secretKey');\n  res.json({ token });\n});\n```\n\n4. Protect routes with JWT middleware:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'secretKey');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n};\n```\n\n5. Apply middleware to protected routes:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```"
    },
    {
        "question": "How to implement rate limiting in a Node.js API?",
        "label": "backend,nodejs,rate-limiting,api",
        "language": "en",
        "context": "Rate limiting is used to control the number of requests a client can make to your API within a given time period to prevent abuse and ensure performance stability.",
        "answer": "Steps to implement rate limiting in a Node.js API:\n\n1. Install the required package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Set up rate limiting middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n```\n\n3. Apply the limiter globally or to specific routes:\n```javascript\napp.use(limiter);\n```\n\n4. You can also configure custom rate limits for different routes:\n```javascript\napp.use('/api/', limiter);\n```",
        "start_char": 0,
        "end_char": 649,
        "key_answer": "Steps to implement rate limiting in a Node.js API:\n\n1. Install the required package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Set up rate limiting middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n```\n\n3. Apply the limiter globally or to specific routes:\n```javascript\napp.use(limiter);\n```\n\n4. You can also configure custom rate limits for different routes:\n```javascript\napp.use('/api/', limiter);\n```"
    },
    {
        "question": "How to connect a MongoDB database to a Node.js application?",
        "label": "backend,nodejs,mongodb,connection",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents. Connecting a Node.js application to MongoDB allows you to perform CRUD operations.",
        "answer": "Steps to connect a MongoDB database to a Node.js application:\n\n1. Install Mongoose, a popular MongoDB ODM:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB');\n});\n```\n\n3. Create a model and perform operations on the database:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({ name: String, age: Number });\nconst User = mongoose.model('User', userSchema);\n\nconst newUser = new User({ name: 'Alice', age: 25 });\nnewUser.save();\n```",
        "start_char": 0,
        "end_char": 751,
        "key_answer": "Steps to connect a MongoDB database to a Node.js application:\n\n1. Install Mongoose, a popular MongoDB ODM:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB');\n});\n```\n\n3. Create a model and perform operations on the database:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({ name: String, age: Number });\nconst User = mongoose.model('User', userSchema);\n\nconst newUser = new User({ name: 'Alice', age: 25 });\nnewUser.save();\n```"
    },
    {
        "question": "How to implement file upload in an Express.js application?",
        "label": "backend,nodejs,express,file-upload",
        "language": "en",
        "context": "File upload functionality allows users to upload files to the server. In Express.js, Multer is a popular middleware for handling multipart form-data, which is used for uploading files.",
        "answer": "Steps to implement file upload in an Express.js application:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer for file handling:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Handle the file upload in your route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```",
        "start_char": 0,
        "end_char": 618,
        "key_answer": "Steps to implement file upload in an Express.js application:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer for file handling:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Handle the file upload in your route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```"
    },
    {
        "question": "How to enable HTTPS in an Express.js application?",
        "label": "backend,nodejs,express,https",
        "language": "en",
        "context": "HTTPS is an extension of HTTP that uses SSL/TLS to encrypt the communication between the client and the server. Enabling HTTPS ensures that data transmitted is secure.",
        "answer": "Steps to enable HTTPS in an Express.js application:\n\n1. Create or obtain an SSL certificate.\n\n2. Set up an HTTPS server using the `https` module in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst express = require('express');\n\nconst app = express();\n\nconst options = {\n  key: fs.readFileSync('path/to/private-key.pem'),\n  cert: fs.readFileSync('path/to/certificate.pem')\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('HTTPS server running on port 3000');\n});\n```",
        "start_char": 0,
        "end_char": 547,
        "key_answer": "Steps to enable HTTPS in an Express.js application:\n\n1. Create or obtain an SSL certificate.\n\n2. Set up an HTTPS server using the `https` module in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst express = require('express');\n\nconst app = express();\n\nconst options = {\n  key: fs.readFileSync('path/to/private-key.pem'),\n  cert: fs.readFileSync('path/to/certificate.pem')\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('HTTPS server running on port 3000');\n});\n```"
    },
    {
        "question": "How to use environment variables in a Node.js application?",
        "label": "backend,nodejs,environment-variables",
        "language": "en",
        "context": "Environment variables are used to store configuration settings for your application, such as database URLs and API keys, separate from the application code.",
        "answer": "Steps to use environment variables in a Node.js application:\n\n1. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root directory:\n```bash\nDATABASE_URL=mongodb://localhost:27017/mydb\nPORT=3000\n```\n\n3. Load the environment variables in your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DATABASE_URL);  // Prints the DATABASE_URL value\n```\n\n4. Use the environment variables in your application logic.\n```javascript\napp.listen(process.env.PORT, () => {\n  console.log(`Server running on port ${process.env.PORT}`);\n});\n```",
        "start_char": 0,
        "end_char": 621,
        "key_answer": "Steps to use environment variables in a Node.js application:\n\n1. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root directory:\n```bash\nDATABASE_URL=mongodb://localhost:27017/mydb\nPORT=3000\n```\n\n3. Load the environment variables in your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DATABASE_URL);  // Prints the DATABASE_URL value\n```\n\n4. Use the environment variables in your application logic.\n```javascript\napp.listen(process.env.PORT, () => {\n  console.log(`Server running on port ${process.env.PORT}`);\n});\n```"
    },
    {
        "question": "How to perform authentication with Google OAuth in a Node.js application?",
        "label": "backend,nodejs,oauth,authentication",
        "language": "en",
        "context": "Google OAuth allows users to log in using their Google account credentials. It is commonly used for single sign-on (SSO) integrations in web applications.",
        "answer": "Steps to perform authentication with Google OAuth in a Node.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth strategy in Passport.js:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  return done(null, profile);\n}));\n```",
        "start_char": 0,
        "end_char": 630,
        "key_answer": "Steps to perform authentication with Google OAuth in a Node.js application:\n\n1. Install the necessary packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth strategy in Passport.js:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  return done(null, profile);\n}));\n```"
    },
    {
        "question": "How to use async/await in a Node.js application?",
        "label": "backend,nodejs,async-await",
        "language": "en",
        "context": "Async/await is a modern way to handle asynchronous code in JavaScript. It allows you to write asynchronous code in a more synchronous, readable manner.",
        "answer": "Steps to use async/await in a Node.js application:\n\n1. Define an async function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}\n``` \n2. Call the async function:\n```javascript\nfetchData();\n```\n\n3. Handle errors with try/catch:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```",
        "start_char": 0,
        "end_char": 618,
        "key_answer": "Steps to use async/await in a Node.js application:\n\n1. Define an async function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}\n``` \n2. Call the async function:\n```javascript\nfetchData();\n```\n\n3. Handle errors with try/catch:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```"
    },
    {
        "question": "How to implement session management in a Node.js application?",
        "label": "backend,nodejs,session-management",
        "language": "en",
        "context": "Session management allows you to persist user data across requests. In Node.js, you can manage sessions using the `express-session` middleware.",
        "answer": "Steps to implement session management in a Node.js application:\n\n1. Install the `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n}));\n```\n\n3. Use session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = { username: 'alice' };\n  res.send('Logged in');\n});\n```",
        "start_char": 0,
        "end_char": 522,
        "key_answer": "Steps to implement session management in a Node.js application:\n\n1. Install the `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n}));\n```\n\n3. Use session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = { username: 'alice' };\n  res.send('Logged in');\n});\n```"
    },
    {
        "question": "How to implement file upload functionality in a Node.js application?",
        "label": "backend,nodejs,file-upload",
        "language": "en",
        "context": "File upload functionality is essential for many web applications, allowing users to send files to the server, such as images, documents, or videos.",
        "answer": "Steps to implement file upload functionality in a Node.js application:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up multer to handle file uploads:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  },\n});\n\nconst upload = multer({ storage: storage });\n``` \n3. Use the `upload` middleware in your route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```",
        "start_char": 0,
        "end_char": 672,
        "key_answer": "Steps to implement file upload functionality in a Node.js application:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up multer to handle file uploads:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  },\n});\n\nconst upload = multer({ storage: storage });\n``` \n3. Use the `upload` middleware in your route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```"
    },
    {
        "question": "How to implement caching in a Node.js application?",
        "label": "backend,nodejs,caching,performance",
        "language": "en",
        "context": "Caching improves performance by temporarily storing data, such as API responses or database queries, to reduce the need for repetitive and time-consuming operations.",
        "answer": "Steps to implement caching in a Node.js application:\n\n1. Install a caching library like `node-cache` or `redis`:\n```bash\nnpm install node-cache\n```\n\n2. Set up a cache in your application:\n```javascript\nconst NodeCache = require('node-cache');\nconst cache = new NodeCache();\n\napp.get('/data', (req, res) => {\n  const cachedData = cache.get('data');\n  if (cachedData) {\n    return res.json(cachedData);\n  }\n  // Fetch data from DB or API\n  const newData = fetchData();\n  cache.set('data', newData, 3600); // Cache for 1 hour\n  res.json(newData);\n});\n```",
        "start_char": 0,
        "end_char": 573,
        "key_answer": "Steps to implement caching in a Node.js application:\n\n1. Install a caching library like `node-cache` or `redis`:\n```bash\nnpm install node-cache\n```\n\n2. Set up a cache in your application:\n```javascript\nconst NodeCache = require('node-cache');\nconst cache = new NodeCache();\n\napp.get('/data', (req, res) => {\n  const cachedData = cache.get('data');\n  if (cachedData) {\n    return res.json(cachedData);\n  }\n  // Fetch data from DB or API\n  const newData = fetchData();\n  cache.set('data', newData, 3600); // Cache for 1 hour\n  res.json(newData);\n});\n```"
    },
    {
        "question": "How to implement OAuth 2.0 authentication in a Node.js application?",
        "label": "backend,nodejs,oauth2.0,authentication",
        "language": "en",
        "context": "OAuth 2.0 is an authorization framework that allows third-party applications to access user data without exposing user credentials.",
        "answer": "Steps to implement OAuth 2.0 authentication in a Node.js application:\n\n1. Install the necessary packages, such as `passport` and `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up OAuth2 strategy in your application:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth/authorize',\n  tokenURL: 'https://example.com/oauth/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback',\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```",
        "start_char": 0,
        "end_char": 721,
        "key_answer": "Steps to implement OAuth 2.0 authentication in a Node.js application:\n\n1. Install the necessary packages, such as `passport` and `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up OAuth2 strategy in your application:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth/authorize',\n  tokenURL: 'https://example.com/oauth/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback',\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```"
    },
    {
        "question": "How to use WebSockets in a React application?",
        "label": "frontend,react,websockets,real-time",
        "language": "en",
        "context": "WebSockets in a React application allow real-time communication with the server, making it ideal for chat apps, live feeds, and notifications.",
        "answer": "Steps to use WebSockets in a React application:\n\n1. Install the `socket.io-client` package:\n```bash\nnpm install socket.io-client\n```\n\n2. Establish a WebSocket connection in a React component:\n```javascript\nimport { useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:8080');\n\nconst ChatApp = () => {\n  useEffect(() => {\n    socket.on('message', (data) => {\n      console.log(data);\n    });\n    return () => socket.disconnect();\n  }, []);\n  return <div>Chat App</div>;\n};\n```",
        "start_char": 0,
        "end_char": 543,
        "key_answer": "Steps to use WebSockets in a React application:\n\n1. Install the `socket.io-client` package:\n```bash\nnpm install socket.io-client\n```\n\n2. Establish a WebSocket connection in a React component:\n```javascript\nimport { useEffect } from 'react';\nimport io from 'socket.io-client';\n\nconst socket = io('http://localhost:8080');\n\nconst ChatApp = () => {\n  useEffect(() => {\n    socket.on('message', (data) => {\n      console.log(data);\n    });\n    return () => socket.disconnect();\n  }, []);\n  return <div>Chat App</div>;\n};\n```"
    },
    {
        "question": "How to perform data validation in a Node.js application?",
        "label": "backend,nodejs,validation",
        "language": "en",
        "context": "Data validation ensures that the incoming data is correct, in the proper format, and meets the application's requirements before it's stored or processed.",
        "answer": "Steps to perform data validation in a Node.js application:\n\n1. Install the `joi` package for validation:\n```bash\nnpm install joi\n```\n\n2. Create a validation schema:\n```javascript\nconst Joi = require('joi');\n\nconst schema = Joi.object({\n  username: Joi.string().min(3).required(),\n  email: Joi.string().email().required(),\n});\n```\n\n3. Validate data in the route handler:\n```javascript\napp.post('/register', (req, res) => {\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).send(error.details[0].message);\n  }\n  res.send('User registered successfully');\n});\n```",
        "start_char": 0,
        "end_char": 624,
        "key_answer": "Steps to perform data validation in a Node.js application:\n\n1. Install the `joi` package for validation:\n```bash\nnpm install joi\n```\n\n2. Create a validation schema:\n```javascript\nconst Joi = require('joi');\n\nconst schema = Joi.object({\n  username: Joi.string().min(3).required(),\n  email: Joi.string().email().required(),\n});\n```\n\n3. Validate data in the route handler:\n```javascript\napp.post('/register', (req, res) => {\n  const { error } = schema.validate(req.body);\n  if (error) {\n    return res.status(400).send(error.details[0].message);\n  }\n  res.send('User registered successfully');\n});\n```"
    },
    {
        "question": "How to implement user authentication in a React application using Firebase?",
        "label": "frontend,react,authentication,firebase",
        "language": "en",
        "context": "Firebase Authentication provides backend services to help authenticate users, including simple pass-through authentication using just a username and password.",
        "answer": "Steps to implement Firebase Authentication in a React application:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Set up Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = { /* Your Firebase config */ };\nfirebase.initializeApp(firebaseConfig);\n``` \n3. Implement login functionality:\n```javascript\nconst handleLogin = async () => {\n  try {\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    console.log('User logged in:', userCredential.user);\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n```",
        "start_char": 0,
        "end_char": 665,
        "key_answer": "Steps to implement Firebase Authentication in a React application:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Set up Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = { /* Your Firebase config */ };\nfirebase.initializeApp(firebaseConfig);\n``` \n3. Implement login functionality:\n```javascript\nconst handleLogin = async () => {\n  try {\n    const userCredential = await firebase.auth().signInWithEmailAndPassword(email, password);\n    console.log('User logged in:', userCredential.user);\n  } catch (error) {\n    console.error(error.message);\n  }\n};\n```"
    },
    {
        "question": "How to implement file upload in a Node.js application using Multer?",
        "label": "backend,nodejs,multer,file-upload",
        "language": "en",
        "context": "Multer is a middleware for handling `multipart/form-data`, which is used for uploading files in Node.js applications.",
        "answer": "Steps to implement file upload using Multer in Node.js:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your Express app:\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst app = express();\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, './uploads');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running');\n});\n```",
        "start_char": 0,
        "end_char": 702,
        "key_answer": "Steps to implement file upload using Multer in Node.js:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer in your Express app:\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst app = express();\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, './uploads');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n\napp.listen(3000, () => {\n  console.log('Server running');\n});\n```"
    },
    {
        "question": "How to create a login page in React with form validation?",
        "label": "frontend,react,forms,validation",
        "language": "en",
        "context": "In React, you can create a login page with form validation using controlled components, state management, and form validation techniques.",
        "answer": "Steps to create a login page in React with form validation:\n\n1. Create a form component with controlled inputs:\n```javascript\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let formErrors = {};\n    if (!email) formErrors.email = 'Email is required';\n    if (!password) formErrors.password = 'Password is required';\n    setErrors(formErrors);\n    if (Object.keys(formErrors).length === 0) {\n      // Handle login\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='email'\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder='Email'\n      />\n      {errors.email && <p>{errors.email}</p>}\n      <input\n        type='password'\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder='Password'\n      />\n      {errors.password && <p>{errors.password}</p>}\n      <button type='submit'>Login</button>\n    </form>\n  );\n};\n```",
        "start_char": 0,
        "end_char": 1148,
        "key_answer": "Steps to create a login page in React with form validation:\n\n1. Create a form component with controlled inputs:\n```javascript\nconst LoginForm = () => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [errors, setErrors] = useState({});\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let formErrors = {};\n    if (!email) formErrors.email = 'Email is required';\n    if (!password) formErrors.password = 'Password is required';\n    setErrors(formErrors);\n    if (Object.keys(formErrors).length === 0) {\n      // Handle login\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='email'\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder='Email'\n      />\n      {errors.email && <p>{errors.email}</p>}\n      <input\n        type='password'\n        value={password}\n        onChange={(e) => setPassword(e.target.value)}\n        placeholder='Password'\n      />\n      {errors.password && <p>{errors.password}</p>}\n      <button type='submit'>Login</button>\n    </form>\n  );\n};\n```"
    },
    {
        "question": "How to implement JWT (JSON Web Tokens) authentication in a Node.js app?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JWT (JSON Web Tokens) is a compact, URL-safe means of representing claims to be transferred between two parties. It is widely used for authentication and authorization.",
        "answer": "Steps to implement JWT authentication in a Node.js app:\n\n1. Install dependencies:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a login route that generates a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst express = require('express');\nconst app = express();\nconst User = require('./models/User'); // Assume User model exists\n\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  const user = await User.findOne({ email });\n  if (!user || !bcrypt.compareSync(password, user.password)) {\n    return res.status(400).send('Invalid credentials');\n  }\n  const token = jwt.sign({ userId: user._id }, 'secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```",
        "start_char": 0,
        "end_char": 782,
        "key_answer": "Steps to implement JWT authentication in a Node.js app:\n\n1. Install dependencies:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a login route that generates a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst express = require('express');\nconst app = express();\nconst User = require('./models/User'); // Assume User model exists\n\napp.post('/login', async (req, res) => {\n  const { email, password } = req.body;\n  const user = await User.findOne({ email });\n  if (!user || !bcrypt.compareSync(password, user.password)) {\n    return res.status(400).send('Invalid credentials');\n  }\n  const token = jwt.sign({ userId: user._id }, 'secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```"
    },
    {
        "question": "How to implement form validation in React using Formik?",
        "label": "frontend,react,formik,form-validation",
        "language": "en",
        "context": "Formik is a popular library for handling forms in React. It simplifies form validation, handling of form state, and submission.",
        "answer": "Steps to implement form validation in React using Formik:\n\n1. Install Formik:\n```bash\nnpm install formik\n```\n\n2. Use Formik in your component:\n```javascript\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\n\nconst LoginForm = () => {\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) errors.email = 'Required';\n        if (!values.password) errors.password = 'Required';\n        return errors;\n      }}\n      onSubmit={values => {\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      <Form>\n        <Field name='email' type='email' placeholder='Email' />\n        <ErrorMessage name='email' component='div' />\n        <Field name='password' type='password' placeholder='Password' />\n        <ErrorMessage name='password' component='div' />\n        <button type='submit'>Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n```",
        "start_char": 0,
        "end_char": 990,
        "key_answer": "Steps to implement form validation in React using Formik:\n\n1. Install Formik:\n```bash\nnpm install formik\n```\n\n2. Use Formik in your component:\n```javascript\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\n\nconst LoginForm = () => {\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validate={values => {\n        const errors = {};\n        if (!values.email) errors.email = 'Required';\n        if (!values.password) errors.password = 'Required';\n        return errors;\n      }}\n      onSubmit={values => {\n        alert(JSON.stringify(values, null, 2));\n      }}\n    >\n      <Form>\n        <Field name='email' type='email' placeholder='Email' />\n        <ErrorMessage name='email' component='div' />\n        <Field name='password' type='password' placeholder='Password' />\n        <ErrorMessage name='password' component='div' />\n        <button type='submit'>Submit</button>\n      </Form>\n    </Formik>\n  );\n};\n```"
    },
    {
        "question": "How to implement a RESTful API using Express in Node.js?",
        "label": "backend,nodejs,express,restful-api",
        "language": "en",
        "context": "Express is a minimal and flexible Node.js web application framework that provides a robust set of features to build web and mobile applications, including RESTful APIs.",
        "answer": "Steps to implement a RESTful API using Express in Node.js:\n\n1. Install Express and other dependencies:\n```bash\nnpm install express body-parser\n```\n\n2. Create the Express app and set up routes:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// GET route\napp.get('/api/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\n// POST route\napp.post('/api/users', (req, res) => {\n  const user = req.body;\n  res.status(201).json(user);\n});\n\n// PUT route\napp.put('/api/users/:id', (req, res) => {\n  const { id } = req.params;\n  res.json({ id, name: req.body.name });\n});\n\n// DELETE route\napp.delete('/api/users/:id', (req, res) => {\n  res.status(204).send();\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```",
        "start_char": 0,
        "end_char": 845,
        "key_answer": "Steps to implement a RESTful API using Express in Node.js:\n\n1. Install Express and other dependencies:\n```bash\nnpm install express body-parser\n```\n\n2. Create the Express app and set up routes:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\n// GET route\napp.get('/api/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\n// POST route\napp.post('/api/users', (req, res) => {\n  const user = req.body;\n  res.status(201).json(user);\n});\n\n// PUT route\napp.put('/api/users/:id', (req, res) => {\n  const { id } = req.params;\n  res.json({ id, name: req.body.name });\n});\n\n// DELETE route\napp.delete('/api/users/:id', (req, res) => {\n  res.status(204).send();\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```"
    },
    {
        "question": "How to implement JWT authentication in a React application?",
        "label": "frontend,react,jwt,authentication",
        "language": "en",
        "context": "JWT authentication is commonly used to secure React applications. It allows for secure token-based user authentication and authorization.",
        "answer": "Steps to implement JWT authentication in React:\n\n1. On the backend, create an authentication endpoint that returns a JWT token upon successful login.\n2. On the React side, store the JWT token in localStorage or sessionStorage after successful login:\n```javascript\nlocalStorage.setItem('token', response.data.token);\n```\n\n3. Send the JWT token with each request in the Authorization header:\n```javascript\nconst token = localStorage.getItem('token');\naxios.get('/api/protected', { headers: { Authorization: `Bearer ${token}` } });\n```",
        "start_char": 0,
        "end_char": 544,
        "key_answer": "Steps to implement JWT authentication in React:\n\n1. On the backend, create an authentication endpoint that returns a JWT token upon successful login.\n2. On the React side, store the JWT token in localStorage or sessionStorage after successful login:\n```javascript\nlocalStorage.setItem('token', response.data.token);\n```\n\n3. Send the JWT token with each request in the Authorization header:\n```javascript\nconst token = localStorage.getItem('token');\naxios.get('/api/protected', { headers: { Authorization: `Bearer ${token}` } });\n```"
    },
    {
        "question": "How to implement form validation using Formik in React?",
        "label": "frontend,react,formik,form-validation",
        "language": "en",
        "context": "Formik is a popular library for building and managing forms in React. It simplifies form validation, handling state, and submission.",
        "answer": "Steps to implement form validation with Formik:\n\n1. Install Formik and Yup:\n```bash\nnpm install formik yup\n```\n\n2. Create a form with validation:\n```javascript\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst schema = Yup.object().shape({\n  email: Yup.string().email().required(),\n});\n\n<Formik\n  initialValues={{ email: '' }}\n  validationSchema={schema}\n  onSubmit={values => console.log(values)}\n>\n  <Form>\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" component=\"div\" />\n    <button type=\"submit\">Submit</button>\n  </Form>\n</Formik>\n```",
        "start_char": 0,
        "end_char": 646,
        "key_answer": "Steps to implement form validation with Formik:\n\n1. Install Formik and Yup:\n```bash\nnpm install formik yup\n```\n\n2. Create a form with validation:\n```javascript\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\n\nconst schema = Yup.object().shape({\n  email: Yup.string().email().required(),\n});\n\n<Formik\n  initialValues={{ email: '' }}\n  validationSchema={schema}\n  onSubmit={values => console.log(values)}\n>\n  <Form>\n    <Field name=\"email\" type=\"email\" />\n    <ErrorMessage name=\"email\" component=\"div\" />\n    <button type=\"submit\">Submit</button>\n  </Form>\n</Formik>\n```"
    },
    {
        "question": "How to perform CRUD operations using Firebase Firestore in a React app?",
        "label": "frontend,react,firebase,firestore",
        "language": "en",
        "context": "Firebase Firestore is a cloud-based NoSQL database. It provides easy SDK integration with React for real-time and asynchronous data operations.",
        "answer": "Steps for CRUD with Firestore:\n\n1. Set up Firebase in your React project.\n2. Initialize Firestore:\n```javascript\nimport { getFirestore, collection, getDocs, addDoc, updateDoc, deleteDoc, doc } from 'firebase/firestore';\nconst db = getFirestore();\n```\n\n3. Perform operations:\n- Create:\n```javascript\nawait addDoc(collection(db, 'users'), { name: 'John' });\n```\n- Read:\n```javascript\nconst querySnapshot = await getDocs(collection(db, 'users'));\n```\n- Update:\n```javascript\nawait updateDoc(doc(db, 'users', id), { name: 'Jane' });\n```\n- Delete:\n```javascript\nawait deleteDoc(doc(db, 'users', id));\n```",
        "start_char": 0,
        "end_char": 624,
        "key_answer": "Steps for CRUD with Firestore:\n\n1. Set up Firebase in your React project.\n2. Initialize Firestore:\n```javascript\nimport { getFirestore, collection, getDocs, addDoc, updateDoc, deleteDoc, doc } from 'firebase/firestore';\nconst db = getFirestore();\n```\n\n3. Perform operations:\n- Create:\n```javascript\nawait addDoc(collection(db, 'users'), { name: 'John' });\n```\n- Read:\n```javascript\nconst querySnapshot = await getDocs(collection(db, 'users'));\n```\n- Update:\n```javascript\nawait updateDoc(doc(db, 'users', id), { name: 'Jane' });\n```\n- Delete:\n```javascript\nawait deleteDoc(doc(db, 'users', id));\n```"
    },
    {
        "question": "How to implement session-based authentication in Express.js?",
        "label": "backend,nodejs,express,authentication,sessions",
        "language": "en",
        "context": "Session-based authentication stores session data on the server and uses a session ID to identify users across multiple requests.",
        "answer": "Steps to implement session-based authentication in Express.js:\n\n1. Install required packages:\n```bash\nnpm install express-session\n```\n\n2. Set up `express-session` middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Create login route to store user data in session:\n```javascript\napp.post('/login', (req, res) => {\n  const { username } = req.body;\n  req.session.user = { username };\n  res.send('Logged in');\n});\n```\n\n4. Create middleware to protect routes:\n```javascript\nconst authMiddleware = (req, res, next) => {\n  if (req.session.user) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n};\n```\n\n5. Use the middleware for protected routes:\n```javascript\napp.get('/dashboard', authMiddleware, (req, res) => {\n  res.send('Welcome to dashboard');\n});\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/session.html",
        "start_char": 0,
        "end_char": 1011,
        "key_answer": "Steps to implement session-based authentication in Express.js:\n\n1. Install required packages:\n```bash\nnpm install express-session\n```\n\n2. Set up `express-session` middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Create login route to store user data in session:\n```javascript\napp.post('/login', (req, res) => {\n  const { username } = req.body;\n  req.session.user = { username };\n  res.send('Logged in');\n});\n```\n\n4. Create middleware to protect routes:\n```javascript\nconst authMiddleware = (req, res, next) => {\n  if (req.session.user) {\n    next();\n  } else {\n    res.status(401).send('Unauthorized');\n  }\n};\n```\n\n5. Use the middleware for protected routes:\n```javascript\napp.get('/dashboard', authMiddleware, (req, res) => {\n  res.send('Welcome to dashboard');\n});\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/session.html"
    },
    {
        "question": "How to connect a React application to a REST API?",
        "label": "frontend,react,rest-api",
        "language": "en",
        "context": "React applications often need to fetch data from REST APIs to display dynamic content.",
        "answer": "Steps to connect React to a REST API:\n\n1. Use `fetch` or install Axios:\n```bash\nnpm install axios\n```\n\n2. Fetch data in a component using `useEffect`:\n```javascript\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    axios.get('https://api.example.com/items')\n      .then(response => setData(response.data));\n  }, []);\n\n  return (\n    <ul>\n      {data.map(item => <li key={item.id}>{item.name}</li>)}\n    </ul>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 609,
        "key_answer": "Steps to connect React to a REST API:\n\n1. Use `fetch` or install Axios:\n```bash\nnpm install axios\n```\n\n2. Fetch data in a component using `useEffect`:\n```javascript\nimport axios from 'axios';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    axios.get('https://api.example.com/items')\n      .then(response => setData(response.data));\n  }, []);\n\n  return (\n    <ul>\n      {data.map(item => <li key={item.id}>{item.name}</li>)}\n    </ul>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to hash passwords securely using bcrypt in Node.js?",
        "label": "nodejs,bcrypt,password-security,backend",
        "language": "en",
        "context": "Hashing passwords is a critical step in securing user credentials. Bcrypt is a widely used library for hashing passwords in Node.js.",
        "answer": "Steps to hash passwords securely using bcrypt in Node.js:\n\n1. Install bcrypt:\n```bash\nnpm install bcrypt\n```\n\n2. Import bcrypt:\n```javascript\nconst bcrypt = require('bcrypt');\n```\n\n3. Hash the password:\n```javascript\nconst plainPassword = 'userPassword123';\nconst saltRounds = 10;\nbcrypt.hash(plainPassword, saltRounds, (err, hash) => {\n  if (err) throw err;\n  console.log('Hashed Password:', hash);\n});\n```\n\n4. Compare passwords during login:\n```javascript\nbcrypt.compare(plainPassword, storedHash, (err, result) => {\n  if (result) {\n    console.log('Password matches');\n  } else {\n    console.log('Password does not match');\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/bcrypt",
        "start_char": 0,
        "end_char": 722,
        "key_answer": "Steps to hash passwords securely using bcrypt in Node.js:\n\n1. Install bcrypt:\n```bash\nnpm install bcrypt\n```\n\n2. Import bcrypt:\n```javascript\nconst bcrypt = require('bcrypt');\n```\n\n3. Hash the password:\n```javascript\nconst plainPassword = 'userPassword123';\nconst saltRounds = 10;\nbcrypt.hash(plainPassword, saltRounds, (err, hash) => {\n  if (err) throw err;\n  console.log('Hashed Password:', hash);\n});\n```\n\n4. Compare passwords during login:\n```javascript\nbcrypt.compare(plainPassword, storedHash, (err, result) => {\n  if (result) {\n    console.log('Password matches');\n  } else {\n    console.log('Password does not match');\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/bcrypt"
    },
    {
        "question": "How to validate email addresses using Regex in JavaScript?",
        "label": "javascript,regex,validation,frontend",
        "language": "en",
        "context": "Validating email inputs in a form is an essential step in ensuring data integrity. Regular expressions (Regex) are commonly used for this purpose.",
        "answer": "Steps to validate email addresses using Regex in JavaScript:\n\n1. Define a regular expression for email:\n```javascript\nconst emailRegex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n```\n\n2. Create a function to validate the input:\n```javascript\nfunction isValidEmail(email) {\n  return emailRegex.test(email);\n}\n```\n\n3. Test the function:\n```javascript\nconsole.log(isValidEmail('example@email.com')); // true\nconsole.log(isValidEmail('invalid-email')); // false\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",
        "start_char": 0,
        "end_char": 576,
        "key_answer": "Steps to validate email addresses using Regex in JavaScript:\n\n1. Define a regular expression for email:\n```javascript\nconst emailRegex = /^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$/;\n```\n\n2. Create a function to validate the input:\n```javascript\nfunction isValidEmail(email) {\n  return emailRegex.test(email);\n}\n```\n\n3. Test the function:\n```javascript\nconsole.log(isValidEmail('example@email.com')); // true\nconsole.log(isValidEmail('invalid-email')); // false\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions"
    },
    {
        "question": "How to create a dropdown menu in React using Tailwind CSS?",
        "label": "react,tailwindcss,frontend,ui",
        "language": "en",
        "context": "A dropdown menu is a common UI component. React makes it easy to manage UI state, and Tailwind CSS provides the styling utilities.",
        "answer": "Steps to create a dropdown menu in React using Tailwind CSS:\n\n1. Install Tailwind CSS:\nFollow the Tailwind installation guide for React: https://tailwindcss.com/docs/guides/create-react-app\n\n2. Create a functional component with state:\n```javascript\nimport { useState } from 'react';\n\nfunction Dropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className=\"relative inline-block\">\n      <button onClick={() => setIsOpen(!isOpen)} className=\"bg-blue-500 text-white px-4 py-2\">\n        Menu\n      </button>\n      {isOpen && (\n        <ul className=\"absolute bg-white shadow-lg mt-2 w-40\">\n          <li className=\"px-4 py-2 hover:bg-gray-100\">Item 1</li>\n          <li className=\"px-4 py-2 hover:bg-gray-100\">Item 2</li>\n        </ul>\n      )}\n    </div>\n  );\n}\n```\n\n📚 Reference: https://tailwindcss.com/docs",
        "start_char": 0,
        "end_char": 871,
        "key_answer": "Steps to create a dropdown menu in React using Tailwind CSS:\n\n1. Install Tailwind CSS:\nFollow the Tailwind installation guide for React: https://tailwindcss.com/docs/guides/create-react-app\n\n2. Create a functional component with state:\n```javascript\nimport { useState } from 'react';\n\nfunction Dropdown() {\n  const [isOpen, setIsOpen] = useState(false);\n  return (\n    <div className=\"relative inline-block\">\n      <button onClick={() => setIsOpen(!isOpen)} className=\"bg-blue-500 text-white px-4 py-2\">\n        Menu\n      </button>\n      {isOpen && (\n        <ul className=\"absolute bg-white shadow-lg mt-2 w-40\">\n          <li className=\"px-4 py-2 hover:bg-gray-100\">Item 1</li>\n          <li className=\"px-4 py-2 hover:bg-gray-100\">Item 2</li>\n        </ul>\n      )}\n    </div>\n  );\n}\n```\n\n📚 Reference: https://tailwindcss.com/docs"
    },
    {
        "question": "How to train a BERT model on a custom text dataset?",
        "label": "nlp,bert,deep-learning,transformers",
        "language": "en",
        "context": "BERT (Bidirectional Encoder Representations from Transformers) is a powerful transformer-based language model. You can fine-tune it on your own dataset using Hugging Face's Transformers library.",
        "answer": "Steps to train a BERT model on a custom text dataset:\n\n1. Install necessary libraries:\n```bash\npip install transformers datasets\n```\n\n2. Prepare your dataset:\nEnsure your dataset is in CSV or JSON format and contains input-output pairs.\n\n3. Load dataset:\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset('csv', data_files='mydata.csv')\n```\n\n4. Tokenize:\n```python\nfrom transformers import BertTokenizer\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\ntokenized_dataset = dataset.map(lambda x: tokenizer(x['text'], padding='max_length', truncation=True), batched=True)\n```\n\n5. Fine-tune BERT:\n```python\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments\n\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\ntraining_args = TrainingArguments(output_dir='./results', num_train_epochs=3, per_device_train_batch_size=8, evaluation_strategy=\"epoch\")\n\ntrainer = Trainer(model=model, args=training_args, train_dataset=tokenized_dataset['train'])\n\ntrainer.train()\n```\n\n📚 Reference: https://huggingface.co/transformers/",
        "start_char": 0,
        "end_char": 1156,
        "key_answer": "Steps to train a BERT model on a custom text dataset:\n\n1. Install necessary libraries:\n```bash\npip install transformers datasets\n```\n\n2. Prepare your dataset:\nEnsure your dataset is in CSV or JSON format and contains input-output pairs.\n\n3. Load dataset:\n```python\nfrom datasets import load_dataset\n\ndataset = load_dataset('csv', data_files='mydata.csv')\n```\n\n4. Tokenize:\n```python\nfrom transformers import BertTokenizer\n\ntokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\ntokenized_dataset = dataset.map(lambda x: tokenizer(x['text'], padding='max_length', truncation=True), batched=True)\n```\n\n5. Fine-tune BERT:\n```python\nfrom transformers import BertForSequenceClassification, Trainer, TrainingArguments\n\nmodel = BertForSequenceClassification.from_pretrained('bert-base-uncased', num_labels=2)\n\ntraining_args = TrainingArguments(output_dir='./results', num_train_epochs=3, per_device_train_batch_size=8, evaluation_strategy=\"epoch\")\n\ntrainer = Trainer(model=model, args=training_args, train_dataset=tokenized_dataset['train'])\n\ntrainer.train()\n```\n\n📚 Reference: https://huggingface.co/transformers/"
    },
    {
        "question": "How to configure a MySQL database in a Node.js application?",
        "label": "backend,nodejs,mysql,database",
        "language": "en",
        "context": "MySQL is a popular relational database management system. Configuring MySQL in a Node.js application enables you to interact with a MySQL database using Node.js.",
        "answer": "Steps to configure a MySQL database in a Node.js application:\n\n1. Install the MySQL driver:\n```bash\nnpm install mysql2\n```\n\n2. Set up the MySQL connection:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'my_database'\n});\n\nconnection.connect();\n```\n\n3. Perform database queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n4. Close the connection:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.mysql.com/",
        "start_char": 0,
        "end_char": 656,
        "key_answer": "Steps to configure a MySQL database in a Node.js application:\n\n1. Install the MySQL driver:\n```bash\nnpm install mysql2\n```\n\n2. Set up the MySQL connection:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'my_database'\n});\n\nconnection.connect();\n```\n\n3. Perform database queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n4. Close the connection:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.mysql.com/"
    },
    {
        "question": "How to handle file uploads in Node.js using Multer?",
        "label": "backend,nodejs,multer,file-upload",
        "language": "en",
        "context": "Multer is a middleware for handling multipart/form-data, primarily used for uploading files in Node.js applications.",
        "answer": "Steps to handle file uploads in Node.js using Multer:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer storage and file filter options:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type'), false);\n  }\n};\n\nconst upload = multer({ storage, fileFilter, limits: { fileSize: 5 * 1024 * 1024 } });\n```\n\n3. Use the Multer middleware for file upload handling:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n}, (err, req, res, next) => {\n  res.status(400).send('File validation failed');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 1021,
        "key_answer": "Steps to handle file uploads in Node.js using Multer:\n\n1. Install Multer:\n```bash\nnpm install multer\n```\n\n2. Set up Multer storage and file filter options:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, file.originalname);\n  }\n});\n\nconst fileFilter = (req, file, cb) => {\n  if (file.mimetype === 'image/jpeg' || file.mimetype === 'image/png') {\n    cb(null, true);\n  } else {\n    cb(new Error('Invalid file type'), false);\n  }\n};\n\nconst upload = multer({ storage, fileFilter, limits: { fileSize: 5 * 1024 * 1024 } });\n```\n\n3. Use the Multer middleware for file upload handling:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n}, (err, req, res, next) => {\n  res.status(400).send('File validation failed');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to create a serverless function in AWS Lambda?",
        "label": "backend,aws,lambda,serverless",
        "language": "en",
        "context": "AWS Lambda lets you run code without provisioning or managing servers. It is used for serverless computing where you can execute code in response to events.",
        "answer": "Steps to create a serverless function in AWS Lambda:\n\n1. Log in to AWS Management Console and go to Lambda service.\n\n2. Click on 'Create function' and choose 'Author from scratch'.\n\n3. Set a function name, runtime (Node.js, Python, etc.), and role for execution permissions.\n\n4. Write your function code in the editor or upload a zip file containing your function code.\n\n5. Configure triggers such as API Gateway or S3 for your function.\n\n6. Test the function by configuring test events in the Lambda console.\n\n📚 Reference: https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html",
        "start_char": 0,
        "end_char": 619,
        "key_answer": "Steps to create a serverless function in AWS Lambda:\n\n1. Log in to AWS Management Console and go to Lambda service.\n\n2. Click on 'Create function' and choose 'Author from scratch'.\n\n3. Set a function name, runtime (Node.js, Python, etc.), and role for execution permissions.\n\n4. Write your function code in the editor or upload a zip file containing your function code.\n\n5. Configure triggers such as API Gateway or S3 for your function.\n\n6. Test the function by configuring test events in the Lambda console.\n\n📚 Reference: https://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html"
    },
    {
        "question": "How to implement a basic authentication system in Flask?",
        "label": "backend,flask,python,authentication",
        "language": "en",
        "context": "Flask is a micro web framework written in Python. It is used for developing web applications and APIs.",
        "answer": "Steps to implement basic authentication in Flask:\n\n1. Install Flask and Flask-Login:\n```bash\npip install flask flask-login\n```\n\n2. Set up the Flask app with user authentication:\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, current_user\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n```\n\n3. Define a user class and login route:\n```python\nclass User(UserMixin):\n    def __init__(self, id):\n        self.id = id\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User(user_id)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.json.get('username')\n    user = User(username)\n    login_user(user)\n    return jsonify({'message': 'Logged in successfully'})\n```\n\n4. Protect routes with login required:\n```python\n@app.route('/protected')\n@login_required\ndef protected():\n    return jsonify({'message': 'You are logged in!'})\n```\n\n📚 Reference: https://flask-login.readthedocs.io/en/latest/",
        "start_char": 0,
        "end_char": 1116,
        "key_answer": "Steps to implement basic authentication in Flask:\n\n1. Install Flask and Flask-Login:\n```bash\npip install flask flask-login\n```\n\n2. Set up the Flask app with user authentication:\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_login import LoginManager, UserMixin, login_user, login_required, current_user\n\napp = Flask(__name__)\napp.secret_key = 'your_secret_key'\nlogin_manager = LoginManager()\nlogin_manager.init_app(app)\n```\n\n3. Define a user class and login route:\n```python\nclass User(UserMixin):\n    def __init__(self, id):\n        self.id = id\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User(user_id)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    username = request.json.get('username')\n    user = User(username)\n    login_user(user)\n    return jsonify({'message': 'Logged in successfully'})\n```\n\n4. Protect routes with login required:\n```python\n@app.route('/protected')\n@login_required\ndef protected():\n    return jsonify({'message': 'You are logged in!'})\n```\n\n📚 Reference: https://flask-login.readthedocs.io/en/latest/"
    },
    {
        "question": "How to implement server-side rendering (SSR) in Next.js?",
        "label": "frontend,nextjs,ssr,react",
        "language": "en",
        "context": "Server-Side Rendering (SSR) in Next.js allows pages to be pre-rendered on the server before being sent to the client. This results in faster load times and better SEO.",
        "answer": "Steps to implement SSR in Next.js:\n\n1. Create a Next.js project:\n```bash\nnpx create-next-app my-next-app\ncd my-next-app\n```\n\n2. Create a page that uses SSR:\n```javascript\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; // Passed to the page component as props\n}\n\nconst MyPage = ({ data }) => {\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default MyPage;\n```\n\n3. Run the Next.js app:\n```bash\nnpm run dev\n```\n\n📚 Reference: https://nextjs.org/docs/basic-features/pages#server-side-rendering",
        "start_char": 0,
        "end_char": 645,
        "key_answer": "Steps to implement SSR in Next.js:\n\n1. Create a Next.js project:\n```bash\nnpx create-next-app my-next-app\ncd my-next-app\n```\n\n2. Create a page that uses SSR:\n```javascript\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; // Passed to the page component as props\n}\n\nconst MyPage = ({ data }) => {\n  return <div>{JSON.stringify(data)}</div>;\n};\n\nexport default MyPage;\n```\n\n3. Run the Next.js app:\n```bash\nnpm run dev\n```\n\n📚 Reference: https://nextjs.org/docs/basic-features/pages#server-side-rendering"
    },
    {
        "question": "How to add authentication to a React application using Firebase?",
        "label": "frontend,react,firebase,authentication",
        "language": "en",
        "context": "Firebase provides an easy-to-use authentication system that allows you to authenticate users using email/password, Google, Facebook, etc.",
        "answer": "Steps to add authentication to a React application using Firebase:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-sender-id',\n  appId: 'your-app-id'\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app();\n}\n```\n\n3. Set up authentication functions (sign up, login):\n```javascript\nconst signUp = async (email, password) => {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n};\n\nconst signIn = async (email, password) => {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n};\n```\n\n4. Add authentication state listener:\n```javascript\nfirebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    // User is signed in\n  } else {\n    // User is signed out\n  }\n});\n```\n\n📚 Reference: https://firebase.google.com/docs/auth/web/start",
        "start_char": 0,
        "end_char": 1174,
        "key_answer": "Steps to add authentication to a React application using Firebase:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-sender-id',\n  appId: 'your-app-id'\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app();\n}\n```\n\n3. Set up authentication functions (sign up, login):\n```javascript\nconst signUp = async (email, password) => {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n};\n\nconst signIn = async (email, password) => {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n};\n```\n\n4. Add authentication state listener:\n```javascript\nfirebase.auth().onAuthStateChanged((user) => {\n  if (user) {\n    // User is signed in\n  } else {\n    // User is signed out\n  }\n});\n```\n\n📚 Reference: https://firebase.google.com/docs/auth/web/start"
    },
    {
        "question": "How to use the fetch API in JavaScript?",
        "label": "frontend,javascript,api,fetch",
        "language": "en",
        "context": "The fetch API allows you to make HTTP requests in JavaScript. It's a modern alternative to XMLHttpRequest.",
        "answer": "Steps to use the fetch API in JavaScript:\n\n1. Make a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n3. Handle errors with try-catch:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
        "start_char": 0,
        "end_char": 995,
        "key_answer": "Steps to use the fetch API in JavaScript:\n\n1. Make a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n3. Handle errors with try-catch:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
    },
    {
        "question": "How to create a custom React hook?",
        "label": "frontend,react,custom-hook",
        "language": "en",
        "context": "Custom hooks in React allow you to encapsulate logic and reuse it across multiple components.",
        "answer": "Steps to create a custom React hook:\n\n1. Define the custom hook function:\n```javascript\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error setting value in localStorage:', error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n```\n\n2. Use the custom hook in a component:\n```javascript\nconst App = () => {\n  const [name, setName] = useLocalStorage('name', 'John');\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={() => setName('Jane')}>Change Name</button>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html",
        "start_char": 0,
        "end_char": 1084,
        "key_answer": "Steps to create a custom React hook:\n\n1. Define the custom hook function:\n```javascript\nimport { useState, useEffect } from 'react';\n\nconst useLocalStorage = (key, initialValue) => {\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      const item = window.localStorage.getItem(key);\n      return item ? JSON.parse(item) : initialValue;\n    } catch (error) {\n      return initialValue;\n    }\n  });\n\n  const setValue = (value) => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error('Error setting value in localStorage:', error);\n    }\n  };\n\n  return [storedValue, setValue];\n};\n```\n\n2. Use the custom hook in a component:\n```javascript\nconst App = () => {\n  const [name, setName] = useLocalStorage('name', 'John');\n\n  return (\n    <div>\n      <h1>{name}</h1>\n      <button onClick={() => setName('Jane')}>Change Name</button>\n    </div>\n  );\n};\n\nexport default App;\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html"
    },
    {
        "question": "How to use GraphQL with React?",
        "label": "frontend,react,graphql",
        "language": "en",
        "context": "GraphQL is a query language for APIs, and it provides a more flexible and efficient alternative to REST APIs. You can use it with React using Apollo Client or Relay.",
        "answer": "Steps to use GraphQL with React:\n\n1. Install Apollo Client and GraphQL:\n```bash\nnpm install @apollo/client graphql\n```\n\n2. Set up Apollo Client:\n```javascript\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://your-graphql-endpoint.com',\n  cache: new InMemoryCache(),\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <MyComponent />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n```\n\n3. Create a query and use it in your component:\n```javascript\nimport { useQuery, gql } from '@apollo/client';\n\nconst GET_USERS = gql`\n  query GetUsers {\n    users {\n      id\n      name\n    }\n  }\n`;\n\nconst MyComponent = () => {\n  const { loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <ul>\n      {data.users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n```\n\n📚 Reference: https://www.apollographql.com/docs/react/",
        "start_char": 0,
        "end_char": 1112,
        "key_answer": "Steps to use GraphQL with React:\n\n1. Install Apollo Client and GraphQL:\n```bash\nnpm install @apollo/client graphql\n```\n\n2. Set up Apollo Client:\n```javascript\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://your-graphql-endpoint.com',\n  cache: new InMemoryCache(),\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <MyComponent />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n```\n\n3. Create a query and use it in your component:\n```javascript\nimport { useQuery, gql } from '@apollo/client';\n\nconst GET_USERS = gql`\n  query GetUsers {\n    users {\n      id\n      name\n    }\n  }\n`;\n\nconst MyComponent = () => {\n  const { loading, error, data } = useQuery(GET_USERS);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error: {error.message}</p>;\n\n  return (\n    <ul>\n      {data.users.map(user => (\n        <li key={user.id}>{user.name}</li>\n      ))}\n    </ul>\n  );\n};\n```\n\n📚 Reference: https://www.apollographql.com/docs/react/"
    },
    {
        "question": "How to use Firebase Realtime Database in a React app?",
        "label": "frontend,react,firebase,realtime-database",
        "language": "en",
        "context": "Firebase Realtime Database allows you to store and sync data in real time with your application.",
        "answer": "Steps to use Firebase Realtime Database in a React app:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  databaseURL: 'https://your-database-url.firebaseio.com',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-sender-id',\n  appId: 'your-app-id'\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app();\n}\n```\n\n3. Write data to Firebase Realtime Database:\n```javascript\nconst writeData = async () => {\n  await firebase.database().ref('users/').push({ name: 'John Doe', age: 30 });\n};\n```\n\n4. Read data from Firebase Realtime Database:\n```javascript\nfirebase.database().ref('users/').on('value', (snapshot) => {\n  const data = snapshot.val();\n  console.log(data);\n});\n```\n\n📚 Reference: https://firebase.google.com/docs/database/web/start",
        "start_char": 0,
        "end_char": 1088,
        "key_answer": "Steps to use Firebase Realtime Database in a React app:\n\n1. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  databaseURL: 'https://your-database-url.firebaseio.com',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-sender-id',\n  appId: 'your-app-id'\n};\n\nif (!firebase.apps.length) {\n  firebase.initializeApp(firebaseConfig);\n} else {\n  firebase.app();\n}\n```\n\n3. Write data to Firebase Realtime Database:\n```javascript\nconst writeData = async () => {\n  await firebase.database().ref('users/').push({ name: 'John Doe', age: 30 });\n};\n```\n\n4. Read data from Firebase Realtime Database:\n```javascript\nfirebase.database().ref('users/').on('value', (snapshot) => {\n  const data = snapshot.val();\n  console.log(data);\n});\n```\n\n📚 Reference: https://firebase.google.com/docs/database/web/start"
    },
    {
        "question": "How to manage state in React using Redux?",
        "label": "frontend,react,redux,state-management",
        "language": "en",
        "context": "Redux is a state management library that is often used with React applications to manage global state in a predictable way.",
        "answer": "Steps to manage state in React using Redux:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Provide the store to your React app:\n```javascript\nimport { Provider } from 'react-redux';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <MyComponent />\n    </Provider>\n  );\n};\n```\n\n4. Use the state in your component:\n```javascript\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst MyComponent = () => {\n  const count = useSelector((state) => state.count);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/introduction/getting-started",
        "start_char": 0,
        "end_char": 1215,
        "key_answer": "Steps to manage state in React using Redux:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { count: state.count + 1 };\n    case 'DECREMENT':\n      return { count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Provide the store to your React app:\n```javascript\nimport { Provider } from 'react-redux';\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <MyComponent />\n    </Provider>\n  );\n};\n```\n\n4. Use the state in your component:\n```javascript\nimport { useSelector, useDispatch } from 'react-redux';\n\nconst MyComponent = () => {\n  const count = useSelector((state) => state.count);\n  const dispatch = useDispatch();\n\n  return (\n    <div>\n      <p>{count}</p>\n      <button onClick={() => dispatch({ type: 'INCREMENT' })}>Increment</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/introduction/getting-started"
    },
    {
        "question": "How to create a Docker container for a Node.js app?",
        "label": "devops,docker,nodejs,container",
        "language": "en",
        "context": "Docker is a platform that allows you to automate the deployment of applications inside lightweight, portable containers.",
        "answer": "Steps to create a Docker container for a Node.js app:\n\n1. Create a Dockerfile:\n```dockerfile\nFROM node:14\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"node\", \"server.js\"]\n```\n\n2. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n\n3. Run the Docker container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n\n4. Verify the app is running by accessing `http://localhost:3000`\n\n📚 Reference: https://docs.docker.com/get-started/part2/",
        "start_char": 0,
        "end_char": 520,
        "key_answer": "Steps to create a Docker container for a Node.js app:\n\n1. Create a Dockerfile:\n```dockerfile\nFROM node:14\n\nWORKDIR /app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"node\", \"server.js\"]\n```\n\n2. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n\n3. Run the Docker container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n\n4. Verify the app is running by accessing `http://localhost:3000`\n\n📚 Reference: https://docs.docker.com/get-started/part2/"
    },
    {
        "question": "How to set up MongoDB in a Node.js application?",
        "label": "backend,mongodb,nodejs,databases",
        "language": "en",
        "context": "MongoDB is a NoSQL database that is commonly used with Node.js applications.",
        "answer": "Steps to set up MongoDB in a Node.js application:\n\n1. Install MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Connect to MongoDB server:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst url = 'mongodb://localhost:27017';\nconst client = new MongoClient(url, { useNewUrlParser: true, useUnifiedTopology: true });\n\nclient.connect()\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((error) => console.error('Error connecting to MongoDB:', error));\n```\n\n3. Perform database operations (e.g., insert, query):\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\n\n// Insert a document\nawait collection.insertOne({ name: 'John Doe', age: 30 });\n```\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/",
        "start_char": 0,
        "end_char": 802,
        "key_answer": "Steps to set up MongoDB in a Node.js application:\n\n1. Install MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Connect to MongoDB server:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst url = 'mongodb://localhost:27017';\nconst client = new MongoClient(url, { useNewUrlParser: true, useUnifiedTopology: true });\n\nclient.connect()\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((error) => console.error('Error connecting to MongoDB:', error));\n```\n\n3. Perform database operations (e.g., insert, query):\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\n\n// Insert a document\nawait collection.insertOne({ name: 'John Doe', age: 30 });\n```\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/"
    },
    {
        "question": "How to set up a basic Express server in Node.js?",
        "label": "backend,express,nodejs,server",
        "language": "en",
        "context": "Express is a minimal and flexible Node.js web application framework that provides a robust set of features for building web and mobile applications.",
        "answer": "Steps to set up a basic Express server in Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n```\n\n3. Run the server:\n```bash\nnode server.js\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 527,
        "key_answer": "Steps to set up a basic Express server in Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n```\n\n3. Run the server:\n```bash\nnode server.js\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to use useEffect in React?",
        "label": "frontend,react,useEffect,hooks",
        "language": "en",
        "context": "useEffect is a hook in React that lets you perform side effects in function components, such as fetching data, directly interacting with the DOM, or subscribing to external services.",
        "answer": "Steps to use useEffect in React:\n\n1. Import useEffect from React:\n```javascript\nimport { useEffect } from 'react';\n```\n\n2. Use useEffect inside a component:\n```javascript\nconst MyComponent = () => {\n  useEffect(() => {\n    console.log('Component mounted');\n  }, []); // Empty array means it runs only once (on mount)\n\n  return <div>Hello, World!</div>;\n};\n```\n\n3. Run the effect on component mount, update, or unmount:\n```javascript\nuseEffect(() => {\n  console.log('Component updated');\n  return () => {\n    console.log('Cleanup before unmount');\n  };\n}, [someDependency]); // Runs on specific state change\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 695,
        "key_answer": "Steps to use useEffect in React:\n\n1. Import useEffect from React:\n```javascript\nimport { useEffect } from 'react';\n```\n\n2. Use useEffect inside a component:\n```javascript\nconst MyComponent = () => {\n  useEffect(() => {\n    console.log('Component mounted');\n  }, []); // Empty array means it runs only once (on mount)\n\n  return <div>Hello, World!</div>;\n};\n```\n\n3. Run the effect on component mount, update, or unmount:\n```javascript\nuseEffect(() => {\n  console.log('Component updated');\n  return () => {\n    console.log('Cleanup before unmount');\n  };\n}, [someDependency]); // Runs on specific state change\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to implement a loading spinner in React?",
        "label": "frontend,react,loading,spinner",
        "language": "en",
        "context": "A loading spinner is commonly used to show the user that the application is busy performing an operation.",
        "answer": "Steps to implement a loading spinner in React:\n\n1. Create a loading spinner component:\n```javascript\nconst LoadingSpinner = () => {\n  return <div className='spinner'>Loading...</div>;\n};\n```\n\n2. Use the spinner in a parent component:\n```javascript\nconst MyComponent = () => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000); // Simulate a loading process\n  }, []);\n\n  return (\n    <div>\n      {loading ? <LoadingSpinner /> : <div>Content loaded!</div>}\n    </div>\n  );\n};\n```\n\n3. Style the spinner (CSS):\n```css\n.spinner {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 957,
        "key_answer": "Steps to implement a loading spinner in React:\n\n1. Create a loading spinner component:\n```javascript\nconst LoadingSpinner = () => {\n  return <div className='spinner'>Loading...</div>;\n};\n```\n\n2. Use the spinner in a parent component:\n```javascript\nconst MyComponent = () => {\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000); // Simulate a loading process\n  }, []);\n\n  return (\n    <div>\n      {loading ? <LoadingSpinner /> : <div>Content loaded!</div>}\n    </div>\n  );\n};\n```\n\n3. Style the spinner (CSS):\n```css\n.spinner {\n  border: 4px solid #f3f3f3;\n  border-top: 4px solid #3498db;\n  border-radius: 50%;\n  width: 50px;\n  height: 50px;\n  animation: spin 2s linear infinite;\n}\n\n@keyframes spin {\n  0% { transform: rotate(0deg); }\n  100% { transform: rotate(360deg); }\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to add a CSS animation to an element in React?",
        "label": "frontend,react,css,animation",
        "language": "en",
        "context": "CSS animations can be added to React components to enhance the user experience by adding dynamic visual effects.",
        "answer": "Steps to add a CSS animation to an element in React:\n\n1. Define the animation in CSS:\n```css\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 2s ease-in-out;\n}\n```\n\n2. Apply the animation class to a React component:\n```javascript\nconst MyComponent = () => {\n  return <div className='fade-in'>This text will fade in!</div>;\n};\n```\n\n3. Make sure to import the CSS file:\n```javascript\nimport './styles.css';\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/animation",
        "start_char": 0,
        "end_char": 572,
        "key_answer": "Steps to add a CSS animation to an element in React:\n\n1. Define the animation in CSS:\n```css\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n\n.fade-in {\n  animation: fadeIn 2s ease-in-out;\n}\n```\n\n2. Apply the animation class to a React component:\n```javascript\nconst MyComponent = () => {\n  return <div className='fade-in'>This text will fade in!</div>;\n};\n```\n\n3. Make sure to import the CSS file:\n```javascript\nimport './styles.css';\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/animation"
    },
    {
        "question": "How to manage routes in React using React Router?",
        "label": "frontend,react,router,react-router",
        "language": "en",
        "context": "React Router is a standard library for routing in React applications. It allows for navigation between different views or components without reloading the page.",
        "answer": "Steps to manage routes in React using React Router:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up routes in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={HomePage} />\n        <Route path='/about' component={AboutPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n```\n\n3. Create components for each route:\n```javascript\nconst HomePage = () => {\n  return <h1>Home Page</h1>;\n};\n\nconst AboutPage = () => {\n  return <h1>About Page</h1>;\n};\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 717,
        "key_answer": "Steps to manage routes in React using React Router:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up routes in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact component={HomePage} />\n        <Route path='/about' component={AboutPage} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default App;\n```\n\n3. Create components for each route:\n```javascript\nconst HomePage = () => {\n  return <h1>Home Page</h1>;\n};\n\nconst AboutPage = () => {\n  return <h1>About Page</h1>;\n};\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to use a REST API with Fetch in JavaScript?",
        "label": "frontend,javascript,api,fetch",
        "language": "en",
        "context": "Fetching data from a REST API is a common operation in JavaScript, often used for retrieving data from external services.",
        "answer": "Steps to use a REST API with Fetch in JavaScript:\n\n1. Make a GET request to the API:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
        "start_char": 0,
        "end_char": 719,
        "key_answer": "Steps to use a REST API with Fetch in JavaScript:\n\n1. Make a GET request to the API:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
    },
    {
        "question": "How to implement pagination in React?",
        "label": "frontend,react,pagination",
        "language": "en",
        "context": "Pagination helps divide large amounts of data into smaller, more manageable parts, improving performance and user experience.",
        "answer": "Steps to implement pagination in React:\n\n1. Define a state to manage the current page:\n```javascript\nconst [currentPage, setCurrentPage] = useState(1);\nconst itemsPerPage = 10;\n```\n\n2. Slice the data based on the current page:\n```javascript\nconst paginatedItems = items.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n```\n\n3. Create a function to change the page:\n```javascript\nconst changePage = (page) => {\n  setCurrentPage(page);\n};\n```\n\n4. Render the paginated items and page buttons:\n```javascript\nconst Pagination = () => {\n  return (\n    <div>\n      <ul>\n        {paginatedItems.map(item => <li key={item.id}>{item.name}</li>)}\n      </ul>\n      <button onClick={() => changePage(currentPage - 1)}>Previous</button>\n      <button onClick={() => changePage(currentPage + 1)}>Next</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 929,
        "key_answer": "Steps to implement pagination in React:\n\n1. Define a state to manage the current page:\n```javascript\nconst [currentPage, setCurrentPage] = useState(1);\nconst itemsPerPage = 10;\n```\n\n2. Slice the data based on the current page:\n```javascript\nconst paginatedItems = items.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage);\n```\n\n3. Create a function to change the page:\n```javascript\nconst changePage = (page) => {\n  setCurrentPage(page);\n};\n```\n\n4. Render the paginated items and page buttons:\n```javascript\nconst Pagination = () => {\n  return (\n    <div>\n      <ul>\n        {paginatedItems.map(item => <li key={item.id}>{item.name}</li>)}\n      </ul>\n      <button onClick={() => changePage(currentPage - 1)}>Previous</button>\n      <button onClick={() => changePage(currentPage + 1)}>Next</button>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to create a form in React?",
        "label": "frontend,react,form",
        "language": "en",
        "context": "Forms are used to collect user inputs in web applications. React provides a way to handle forms efficiently.",
        "answer": "Steps to create a form in React:\n\n1. Define a state to manage form input:\n```javascript\nconst [inputValue, setInputValue] = useState('');\n```\n\n2. Create the form element and bind input to state:\n```javascript\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  console.log('Form submitted:', inputValue);\n};\n\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input\n      type='text'\n      value={inputValue}\n      onChange={(e) => setInputValue(e.target.value)}\n    />\n    <button type='submit'>Submit</button>\n  </form>\n);\n```\n\n3. Handle form submission and validation if needed.\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 657,
        "key_answer": "Steps to create a form in React:\n\n1. Define a state to manage form input:\n```javascript\nconst [inputValue, setInputValue] = useState('');\n```\n\n2. Create the form element and bind input to state:\n```javascript\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  console.log('Form submitted:', inputValue);\n};\n\nreturn (\n  <form onSubmit={handleSubmit}>\n    <input\n      type='text'\n      value={inputValue}\n      onChange={(e) => setInputValue(e.target.value)}\n    />\n    <button type='submit'>Submit</button>\n  </form>\n);\n```\n\n3. Handle form submission and validation if needed.\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to implement a dark mode toggle in React?",
        "label": "frontend,react,darkmode",
        "language": "en",
        "context": "Dark mode is a popular feature in web applications that reduces eye strain by switching the color scheme to darker tones.",
        "answer": "Steps to implement a dark mode toggle in React:\n\n1. Define a state for dark mode:\n```javascript\nconst [isDarkMode, setIsDarkMode] = useState(false);\n```\n\n2. Toggle the dark mode state:\n```javascript\nconst toggleDarkMode = () => {\n  setIsDarkMode(!isDarkMode);\n};\n```\n\n3. Apply dark mode styles conditionally:\n```javascript\nreturn (\n  <div className={isDarkMode ? 'dark' : 'light'}>\n    <button onClick={toggleDarkMode}>Toggle Dark Mode</button>\n    <p>Current mode: {isDarkMode ? 'Dark' : 'Light'}</p>\n  </div>\n);\n```\n\n4. Style dark and light modes in CSS:\n```css\n.dark {\n  background-color: #333;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 767,
        "key_answer": "Steps to implement a dark mode toggle in React:\n\n1. Define a state for dark mode:\n```javascript\nconst [isDarkMode, setIsDarkMode] = useState(false);\n```\n\n2. Toggle the dark mode state:\n```javascript\nconst toggleDarkMode = () => {\n  setIsDarkMode(!isDarkMode);\n};\n```\n\n3. Apply dark mode styles conditionally:\n```javascript\nreturn (\n  <div className={isDarkMode ? 'dark' : 'light'}>\n    <button onClick={toggleDarkMode}>Toggle Dark Mode</button>\n    <p>Current mode: {isDarkMode ? 'Dark' : 'Light'}</p>\n  </div>\n);\n```\n\n4. Style dark and light modes in CSS:\n```css\n.dark {\n  background-color: #333;\n  color: white;\n}\n\n.light {\n  background-color: white;\n  color: black;\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to implement state management in React using Redux?",
        "label": "frontend,react,redux,state-management",
        "language": "en",
        "context": "Redux is a state management library that helps manage the application state in a predictable manner.",
        "answer": "Steps to implement state management in React using Redux:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create Redux actions and reducers:\n```javascript\nconst ADD_ITEM = 'ADD_ITEM';\n\nconst addItem = (item) => ({\n  type: ADD_ITEM,\n  payload: item,\n});\n\nconst initialState = [];\n\nconst itemReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ITEM:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n```\n\n3. Create a Redux store and provide it to the application:\n```javascript\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(itemReducer);\n\nconst App = () => (\n  <Provider store={store}>\n    <MyComponent />\n  </Provider>\n);\n```\n\n4. Connect Redux state to React components using `useSelector` and `useDispatch`:\n```javascript\nconst MyComponent = () => {\n  const items = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const addItemHandler = () => {\n    dispatch(addItem('New item'));\n  };\n\n  return (\n    <div>\n      <button onClick={addItemHandler}>Add Item</button>\n      <ul>{items.map((item, index) => <li key={index}>{item}</li>)}</ul>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/",
        "start_char": 0,
        "end_char": 1330,
        "key_answer": "Steps to implement state management in React using Redux:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create Redux actions and reducers:\n```javascript\nconst ADD_ITEM = 'ADD_ITEM';\n\nconst addItem = (item) => ({\n  type: ADD_ITEM,\n  payload: item,\n});\n\nconst initialState = [];\n\nconst itemReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_ITEM:\n      return [...state, action.payload];\n    default:\n      return state;\n  }\n};\n```\n\n3. Create a Redux store and provide it to the application:\n```javascript\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(itemReducer);\n\nconst App = () => (\n  <Provider store={store}>\n    <MyComponent />\n  </Provider>\n);\n```\n\n4. Connect Redux state to React components using `useSelector` and `useDispatch`:\n```javascript\nconst MyComponent = () => {\n  const items = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  const addItemHandler = () => {\n    dispatch(addItem('New item'));\n  };\n\n  return (\n    <div>\n      <button onClick={addItemHandler}>Add Item</button>\n      <ul>{items.map((item, index) => <li key={index}>{item}</li>)}</ul>\n    </div>\n  );\n};\n```\n\n📚 Reference: https://redux.js.org/"
    },
    {
        "question": "How to use map function in JavaScript?",
        "label": "frontend,javascript,map,function",
        "language": "en",
        "context": "The map function in JavaScript is used to iterate over an array and return a new array based on the result of the callback function for each element.",
        "answer": "Steps to use the map function in JavaScript:\n\n1. Define an array to iterate over:\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n```\n\n2. Use the map function to transform the array:\n```javascript\nconst squaredNumbers = numbers.map((num) => num * num);\nconsole.log(squaredNumbers); // [1, 4, 9, 16, 25]\n```\n\n3. You can also use map to manipulate object arrays:\n```javascript\nconst users = [{ name: 'John' }, { name: 'Jane' }];\nconst names = users.map((user) => user.name);\nconsole.log(names); // ['John', 'Jane']\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
        "start_char": 0,
        "end_char": 640,
        "key_answer": "Steps to use the map function in JavaScript:\n\n1. Define an array to iterate over:\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\n```\n\n2. Use the map function to transform the array:\n```javascript\nconst squaredNumbers = numbers.map((num) => num * num);\nconsole.log(squaredNumbers); // [1, 4, 9, 16, 25]\n```\n\n3. You can also use map to manipulate object arrays:\n```javascript\nconst users = [{ name: 'John' }, { name: 'Jane' }];\nconst names = users.map((user) => user.name);\nconsole.log(names); // ['John', 'Jane']\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    },
    {
        "question": "How to create a new file in Node.js?",
        "label": "backend,nodejs,file-system",
        "language": "en",
        "context": "Node.js provides a built-in module called fs (file system) that allows you to interact with the file system, including reading and writing files.",
        "answer": "Steps to create a new file in Node.js:\n\n1. Require the fs module:\n```javascript\nconst fs = require('fs');\n```\n\n2. Use the `fs.writeFile` method to create a new file:\n```javascript\nfs.writeFile('newFile.txt', 'Hello, World!', (err) => {\n  if (err) throw err;\n  console.log('File has been created!');\n});\n```\n\n3. You can also create a file with the `fs.appendFile` method to add data to an existing file.\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fs_fs_writefile_file_data_options_callback",
        "start_char": 0,
        "end_char": 530,
        "key_answer": "Steps to create a new file in Node.js:\n\n1. Require the fs module:\n```javascript\nconst fs = require('fs');\n```\n\n2. Use the `fs.writeFile` method to create a new file:\n```javascript\nfs.writeFile('newFile.txt', 'Hello, World!', (err) => {\n  if (err) throw err;\n  console.log('File has been created!');\n});\n```\n\n3. You can also create a file with the `fs.appendFile` method to add data to an existing file.\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/fs.html#fs_fs_writefile_file_data_options_callback"
    },
    {
        "question": "How to handle errors in JavaScript using try-catch?",
        "label": "frontend,javascript,errors,try-catch",
        "language": "en",
        "context": "The try-catch statement in JavaScript allows you to handle errors gracefully, ensuring the program continues to run even after encountering an error.",
        "answer": "Steps to handle errors in JavaScript using try-catch:\n\n1. Use try-catch block:\n```javascript\ntry {\n  // Code that may throw an error\n  throw new Error('Something went wrong!');\n} catch (error) {\n  console.error('Caught an error:', error.message);\n}\n```\n\n2. You can also include a `finally` block to execute code after try-catch, regardless of whether an error occurred:\n```javascript\nfinally {\n  console.log('This will run no matter what');\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
        "start_char": 0,
        "end_char": 568,
        "key_answer": "Steps to handle errors in JavaScript using try-catch:\n\n1. Use try-catch block:\n```javascript\ntry {\n  // Code that may throw an error\n  throw new Error('Something went wrong!');\n} catch (error) {\n  console.error('Caught an error:', error.message);\n}\n```\n\n2. You can also include a `finally` block to execute code after try-catch, regardless of whether an error occurred:\n```javascript\nfinally {\n  console.log('This will run no matter what');\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"
    },
    {
        "question": "How to create a new array from an existing array in JavaScript?",
        "label": "frontend,javascript,array",
        "language": "en",
        "context": "JavaScript provides several methods to create a new array based on the original array, such as slice(), concat(), and spread syntax.",
        "answer": "Steps to create a new array in JavaScript:\n\n1. Use the slice method to copy part of the array:\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst newNumbers = numbers.slice(1, 4); // [2, 3, 4]\n```\n\n2. Use the concat method to combine arrays:\n```javascript\nconst moreNumbers = [6, 7];\nconst allNumbers = numbers.concat(moreNumbers); // [1, 2, 3, 4, 5, 6, 7]\n```\n\n3. Use spread syntax to create a new array:\n```javascript\nconst newArray = [...numbers];\nconsole.log(newArray); // [1, 2, 3, 4, 5]\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
        "start_char": 0,
        "end_char": 619,
        "key_answer": "Steps to create a new array in JavaScript:\n\n1. Use the slice method to copy part of the array:\n```javascript\nconst numbers = [1, 2, 3, 4, 5];\nconst newNumbers = numbers.slice(1, 4); // [2, 3, 4]\n```\n\n2. Use the concat method to combine arrays:\n```javascript\nconst moreNumbers = [6, 7];\nconst allNumbers = numbers.concat(moreNumbers); // [1, 2, 3, 4, 5, 6, 7]\n```\n\n3. Use spread syntax to create a new array:\n```javascript\nconst newArray = [...numbers];\nconsole.log(newArray); // [1, 2, 3, 4, 5]\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array"
    },
    {
        "question": "How to fetch data from an API using Axios in JavaScript?",
        "label": "frontend,javascript,axios,api",
        "language": "en",
        "context": "Axios is a promise-based HTTP client for JavaScript that allows you to make HTTP requests, such as GET, POST, PUT, DELETE.",
        "answer": "Steps to fetch data from an API using Axios in JavaScript:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make a GET request with Axios:\n```javascript\nimport axios from 'axios';\n\naxios.get('https://api.example.com/data')\n  .then(response => console.log(response.data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Make a POST request with Axios:\n```javascript\naxios.post('https://api.example.com/data', { key: 'value' })\n  .then(response => console.log(response.data))\n  .catch(error => console.error('Error:', error));\n```\n\n📚 Reference: https://axios-http.com/",
        "start_char": 0,
        "end_char": 604,
        "key_answer": "Steps to fetch data from an API using Axios in JavaScript:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make a GET request with Axios:\n```javascript\nimport axios from 'axios';\n\naxios.get('https://api.example.com/data')\n  .then(response => console.log(response.data))\n  .catch(error => console.error('Error:', error));\n```\n\n3. Make a POST request with Axios:\n```javascript\naxios.post('https://api.example.com/data', { key: 'value' })\n  .then(response => console.log(response.data))\n  .catch(error => console.error('Error:', error));\n```\n\n📚 Reference: https://axios-http.com/"
    },
    {
        "question": "How to use LocalStorage to save data in JavaScript?",
        "label": "frontend,javascript,localstorage",
        "language": "en",
        "context": "LocalStorage allows you to store data on the client-side, even after the browser is closed.",
        "answer": "Steps to use LocalStorage to save data in JavaScript:\n\n1. Set an item in LocalStorage:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve an item from LocalStorage:\n```javascript\nconst value = localStorage.getItem('key');\nconsole.log(value); // 'value'\n```\n\n3. Remove an item from LocalStorage:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all items from LocalStorage:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
        "start_char": 0,
        "end_char": 547,
        "key_answer": "Steps to use LocalStorage to save data in JavaScript:\n\n1. Set an item in LocalStorage:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve an item from LocalStorage:\n```javascript\nconst value = localStorage.getItem('key');\nconsole.log(value); // 'value'\n```\n\n3. Remove an item from LocalStorage:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all items from LocalStorage:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    },
    {
        "question": "How to add routing in a React application?",
        "label": "frontend,react,routing",
        "language": "en",
        "context": "React Router is a library used to manage routing in React applications, allowing for navigation between different views.",
        "answer": "Steps to add routing in a React application using React Router:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up basic routing in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home />\n        </Route>\n        <Route path='/about'>\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 555,
        "key_answer": "Steps to add routing in a React application using React Router:\n\n1. Install React Router:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up basic routing in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/' exact>\n          <Home />\n        </Route>\n        <Route path='/about'>\n          <About />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to create a simple CRUD API with Node.js and Express?",
        "label": "backend,nodejs,express,crud-api",
        "language": "en",
        "context": "A CRUD (Create, Read, Update, Delete) API is a common pattern for managing resources in a backend application.",
        "answer": "Steps to create a simple CRUD API with Node.js and Express:\n\n1. Set up Express server:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n\n2. Define routes for CRUD operations:\n```javascript\n// Create\napp.post('/items', (req, res) => {\n  // Add item to database\n  res.status(201).send('Item created');\n});\n\n// Read\napp.get('/items', (req, res) => {\n  res.send('Get items');\n});\n\n// Update\napp.put('/items/:id', (req, res) => {\n  res.send('Update item');\n});\n\n// Delete\napp.delete('/items/:id', (req, res) => {\n  res.send('Delete item');\n});\n```\n\n3. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/",
        "start_char": 0,
        "end_char": 787,
        "key_answer": "Steps to create a simple CRUD API with Node.js and Express:\n\n1. Set up Express server:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n\n2. Define routes for CRUD operations:\n```javascript\n// Create\napp.post('/items', (req, res) => {\n  // Add item to database\n  res.status(201).send('Item created');\n});\n\n// Read\napp.get('/items', (req, res) => {\n  res.send('Get items');\n});\n\n// Update\napp.put('/items/:id', (req, res) => {\n  res.send('Update item');\n});\n\n// Delete\napp.delete('/items/:id', (req, res) => {\n  res.send('Delete item');\n});\n```\n\n3. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/"
    },
    {
        "question": "How to make a RESTful API using Flask in Python?",
        "label": "backend,python,flask,rest-api",
        "language": "en",
        "context": "Flask is a lightweight web framework for Python that is commonly used to build RESTful APIs.",
        "answer": "Steps to make a RESTful API using Flask in Python:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Set up Flask app and routes:\n```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n  return jsonify(['item1', 'item2'])\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n3. Run the Flask app:\n```bash\npython app.py\n```\n\n4. Make a GET request to `/items` endpoint:\n```bash\ncurl http://127.0.0.1:5000/items\n```\n\n📚 Reference: https://flask.palletsprojects.com/en/2.0.x/",
        "start_char": 0,
        "end_char": 573,
        "key_answer": "Steps to make a RESTful API using Flask in Python:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Set up Flask app and routes:\n```python\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n  return jsonify(['item1', 'item2'])\n\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n3. Run the Flask app:\n```bash\npython app.py\n```\n\n4. Make a GET request to `/items` endpoint:\n```bash\ncurl http://127.0.0.1:5000/items\n```\n\n📚 Reference: https://flask.palletsprojects.com/en/2.0.x/"
    },
    {
        "question": "How to deploy a Python Flask app on Heroku?",
        "label": "backend,python,flask,heroku,deploy",
        "language": "en",
        "context": "Heroku is a cloud platform that allows for easy deployment of Python applications, including Flask apps.",
        "answer": "Steps to deploy a Python Flask app on Heroku:\n\n1. Create a `Procfile` in the project directory with the following content:\n```bash\nweb: python app.py\n```\n\n2. Install the Heroku CLI and log in:\n```bash\nheroku login\n```\n\n3. Initialize a git repository and push to Heroku:\n```bash\ngit init\nheroku create\ngit add .\ngit commit -m 'initial commit'\ngit push heroku master\n```\n\n4. Open the app in your browser:\n```bash\nheroku open\n```\n\n📚 Reference: https://devcenter.heroku.com/articles/getting-started-with-python",
        "start_char": 0,
        "end_char": 532,
        "key_answer": "Steps to deploy a Python Flask app on Heroku:\n\n1. Create a `Procfile` in the project directory with the following content:\n```bash\nweb: python app.py\n```\n\n2. Install the Heroku CLI and log in:\n```bash\nheroku login\n```\n\n3. Initialize a git repository and push to Heroku:\n```bash\ngit init\nheroku create\ngit add .\ngit commit -m 'initial commit'\ngit push heroku master\n```\n\n4. Open the app in your browser:\n```bash\nheroku open\n```\n\n📚 Reference: https://devcenter.heroku.com/articles/getting-started-with-python"
    },
    {
        "question": "How to use async/await in JavaScript?",
        "label": "frontend,javascript,async-await",
        "language": "en",
        "context": "Async/await is a syntax in JavaScript that makes working with asynchronous code easier and more readable.",
        "answer": "Steps to use async/await in JavaScript:\n\n1. Define an asynchronous function with the `async` keyword:\n```javascript\nasync function fetchData() {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the asynchronous function:\n```javascript\nfetchData();\n```\n\n3. Use `try/catch` for error handling:\n```javascript\ntry {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n} catch (error) {\n  console.error(error);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 674,
        "key_answer": "Steps to use async/await in JavaScript:\n\n1. Define an asynchronous function with the `async` keyword:\n```javascript\nasync function fetchData() {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the asynchronous function:\n```javascript\nfetchData();\n```\n\n3. Use `try/catch` for error handling:\n```javascript\ntry {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n} catch (error) {\n  console.error(error);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to handle CORS in a Node.js application?",
        "label": "backend,nodejs,cors",
        "language": "en",
        "context": "CORS (Cross-Origin Resource Sharing) is a mechanism that allows many resources on a web page to be requested from another domain.",
        "answer": "Steps to handle CORS in a Node.js application:\n\n1. Install the `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use the `cors` middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\n\napp.get('/data', (req, res) => {\n  res.json({ message: 'Hello, World!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html",
        "start_char": 0,
        "end_char": 536,
        "key_answer": "Steps to handle CORS in a Node.js application:\n\n1. Install the `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use the `cors` middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\n\napp.get('/data', (req, res) => {\n  res.json({ message: 'Hello, World!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html"
    },
    {
        "question": "How to set up a PostgreSQL database with Node.js?",
        "label": "backend,nodejs,postgresql,db",
        "language": "en",
        "context": "PostgreSQL is a powerful relational database system that can be used with Node.js through the `pg` package.",
        "answer": "Steps to set up a PostgreSQL database with Node.js:\n\n1. Install the `pg` library:\n```bash\nnpm install pg\n```\n\n2. Set up a connection to the database:\n```javascript\nconst { Client } = require('pg');\n\nconst client = new Client({\n  user: 'your-username',\n  host: 'localhost',\n  database: 'your-database',\n  password: 'your-password',\n  port: 5432,\n});\n\nclient.connect();\n```\n\n3. Run queries to interact with the database:\n```javascript\nclient.query('SELECT NOW()', (err, res) => {\n  console.log(res.rows[0]);\n  client.end();\n});\n```\n\n📚 Reference: https://node-postgres.com/",
        "start_char": 0,
        "end_char": 600,
        "key_answer": "Steps to set up a PostgreSQL database with Node.js:\n\n1. Install the `pg` library:\n```bash\nnpm install pg\n```\n\n2. Set up a connection to the database:\n```javascript\nconst { Client } = require('pg');\n\nconst client = new Client({\n  user: 'your-username',\n  host: 'localhost',\n  database: 'your-database',\n  password: 'your-password',\n  port: 5432,\n});\n\nclient.connect();\n```\n\n3. Run queries to interact with the database:\n```javascript\nclient.query('SELECT NOW()', (err, res) => {\n  console.log(res.rows[0]);\n  client.end();\n});\n```\n\n📚 Reference: https://node-postgres.com/"
    },
    {
        "question": "How to implement authentication in a Node.js app using Passport?",
        "label": "backend,nodejs,passport,authentication",
        "language": "en",
        "context": "Passport is a popular authentication middleware for Node.js, commonly used with Express.",
        "answer": "Steps to implement authentication in a Node.js app using Passport:\n\n1. Install Passport and related packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Configure Passport for local authentication:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Validate user credentials\n  done(null, user);\n}));\n```\n\n3. Use Passport in your Express app:\n```javascript\napp.use(require('express-session')({ secret: 'your-secret' }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n📚 Reference: http://www.passportjs.org/",
        "start_char": 0,
        "end_char": 703,
        "key_answer": "Steps to implement authentication in a Node.js app using Passport:\n\n1. Install Passport and related packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Configure Passport for local authentication:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Validate user credentials\n  done(null, user);\n}));\n```\n\n3. Use Passport in your Express app:\n```javascript\napp.use(require('express-session')({ secret: 'your-secret' }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n📚 Reference: http://www.passportjs.org/"
    },
    {
        "question": "How to use Redux for state management in a React app?",
        "label": "frontend,react,redux,state-management",
        "language": "en",
        "context": "Redux is a state management library for JavaScript applications, often used with React to manage the application's state.",
        "answer": "Steps to use Redux for state management in a React app:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nconst { createStore } = require('redux');\n\nconst initialState = { counter: 0 };\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'INCREMENT':\n      return { counter: state.counter + 1 };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Use Redux in your React app:\n```javascript\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://react-redux.js.org/",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to use Redux for state management in a React app:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nconst { createStore } = require('redux');\n\nconst initialState = { counter: 0 };\nconst reducer = (state = initialState, action) => {\n  switch(action.type) {\n    case 'INCREMENT':\n      return { counter: state.counter + 1 };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Use Redux in your React app:\n```javascript\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://react-redux.js.org/"
    },
    {
        "question": "How to implement JWT authentication in a Node.js app?",
        "label": "backend,nodejs,jwt,authentication",
        "language": "en",
        "context": "JWT (JSON Web Tokens) is a compact and secure way of transmitting information between parties as a JSON object.",
        "answer": "Steps to implement JWT authentication in a Node.js app:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Generate a JWT when the user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: user.id }, 'your-secret-key');\n```\n\n3. Verify the JWT for protected routes:\n```javascript\napp.use((req, res, next) => {\n  const token = req.header('Authorization');\n  if (!token) return res.status(403).send('Access denied');\n\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(400).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/",
        "start_char": 0,
        "end_char": 743,
        "key_answer": "Steps to implement JWT authentication in a Node.js app:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Generate a JWT when the user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: user.id }, 'your-secret-key');\n```\n\n3. Verify the JWT for protected routes:\n```javascript\napp.use((req, res, next) => {\n  const token = req.header('Authorization');\n  if (!token) return res.status(403).send('Access denied');\n\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(400).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/"
    },
    {
        "question": "How to build a REST API with Express and MongoDB?",
        "label": "backend,nodejs,express,mongodb,api",
        "language": "en",
        "context": "A REST API can be built easily using Express and MongoDB to handle HTTP requests and manage data.",
        "answer": "Steps to build a REST API with Express and MongoDB:\n\n1. Install dependencies:\n```bash\nnpm install express mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n```\n\n3. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({ name: String, email: String });\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create API routes:\n```javascript\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.send(user);\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/installing.html",
        "start_char": 0,
        "end_char": 776,
        "key_answer": "Steps to build a REST API with Express and MongoDB:\n\n1. Install dependencies:\n```bash\nnpm install express mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n```\n\n3. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({ name: String, email: String });\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create API routes:\n```javascript\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.send(user);\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/installing.html"
    },
    {
        "question": "How to implement file upload in an Express application?",
        "label": "backend,nodejs,express,file-upload",
        "language": "en",
        "context": "File uploads are common in web applications, allowing users to send files to the server.",
        "answer": "Steps to implement file upload in an Express application:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up multer for handling file uploads:\n```javascript\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n```\n\n3. Create an upload route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n4. Configure the front-end to send files using `FormData`.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 549,
        "key_answer": "Steps to implement file upload in an Express application:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up multer for handling file uploads:\n```javascript\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n```\n\n3. Create an upload route:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n4. Configure the front-end to send files using `FormData`.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to create a real-time chat application with Socket.io in Node.js?",
        "label": "backend,nodejs,socket.io,real-time",
        "language": "en",
        "context": "Socket.io allows real-time, bidirectional communication between clients and the server, ideal for chat applications.",
        "answer": "Steps to create a real-time chat application with Socket.io in Node.js:\n\n1. Install `socket.io`:\n```bash\nnpm install socket.io\n```\n\n2. Set up a basic server with Socket.io:\n```javascript\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst server = http.createServer();\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Connect the client to the server and send/receive messages.\n\n📚 Reference: https://socket.io/docs/",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to create a real-time chat application with Socket.io in Node.js:\n\n1. Install `socket.io`:\n```bash\nnpm install socket.io\n```\n\n2. Set up a basic server with Socket.io:\n```javascript\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst server = http.createServer();\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Connect the client to the server and send/receive messages.\n\n📚 Reference: https://socket.io/docs/"
    },
    {
        "question": "How to use the async/await pattern in Node.js?",
        "label": "backend,nodejs,async-await",
        "language": "en",
        "context": "The async/await pattern is a modern way to handle asynchronous operations in JavaScript, simplifying promise handling.",
        "answer": "Steps to use the async/await pattern in Node.js:\n\n1. Define an `async` function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  return data;\n}\n```\n\n2. Call the async function and handle errors using `try/catch`:\n```javascript\ntry {\n  const data = await fetchData();\n  console.log(data);\n} catch (error) {\n  console.log('Error:', error);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 569,
        "key_answer": "Steps to use the async/await pattern in Node.js:\n\n1. Define an `async` function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  return data;\n}\n```\n\n2. Call the async function and handle errors using `try/catch`:\n```javascript\ntry {\n  const data = await fetchData();\n  console.log(data);\n} catch (error) {\n  console.log('Error:', error);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to create a REST API with Flask?",
        "label": "backend,python,flask,api",
        "language": "en",
        "context": "Flask is a lightweight WSGI web application framework in Python that is useful for building REST APIs.",
        "answer": "Steps to create a REST API with Flask:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Create the Flask application:\n```python\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n```\n\n3. Define a route to handle API requests:\n```python\n@app.route('/api', methods=['GET'])\ndef get_api_data():\n  return jsonify({'message': 'Hello, world!'})\n```\n\n4. Run the Flask application:\n```python\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n📚 Reference: https://flask.palletsprojects.com/",
        "start_char": 0,
        "end_char": 519,
        "key_answer": "Steps to create a REST API with Flask:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Create the Flask application:\n```python\nfrom flask import Flask, jsonify\napp = Flask(__name__)\n```\n\n3. Define a route to handle API requests:\n```python\n@app.route('/api', methods=['GET'])\ndef get_api_data():\n  return jsonify({'message': 'Hello, world!'})\n```\n\n4. Run the Flask application:\n```python\nif __name__ == '__main__':\n  app.run(debug=True)\n```\n\n📚 Reference: https://flask.palletsprojects.com/"
    },
    {
        "question": "How to add authentication to a Flask API?",
        "label": "backend,python,flask,authentication",
        "language": "en",
        "context": "Flask can easily integrate authentication mechanisms such as JWT or OAuth.",
        "answer": "Steps to add authentication to a Flask API:\n\n1. Install Flask-JWT-Extended:\n```bash\npip install Flask-JWT-Extended\n```\n\n2. Initialize JWT manager:\n```python\nfrom flask_jwt_extended import JWTManager\njwt = JWTManager(app)\n```\n\n3. Create a route to login and generate JWT:\n```python\nfrom flask_jwt_extended import create_access_token\n@app.route('/login', methods=['POST'])\ndef login():\n  username = request.json.get('username')\n  password = request.json.get('password')\n  # validate user\n  token = create_access_token(identity=username)\n  return jsonify(access_token=token)\n```\n\n4. Protect routes using JWT:\n```python\nfrom flask_jwt_extended import jwt_required\n@app.route('/protected', methods=['GET'])\n@jwt_required()\ndef protected():\n  return jsonify(message='This is a protected route')\n```\n\n📚 Reference: https://flask-jwt-extended.readthedocs.io/",
        "start_char": 0,
        "end_char": 883,
        "key_answer": "Steps to add authentication to a Flask API:\n\n1. Install Flask-JWT-Extended:\n```bash\npip install Flask-JWT-Extended\n```\n\n2. Initialize JWT manager:\n```python\nfrom flask_jwt_extended import JWTManager\njwt = JWTManager(app)\n```\n\n3. Create a route to login and generate JWT:\n```python\nfrom flask_jwt_extended import create_access_token\n@app.route('/login', methods=['POST'])\ndef login():\n  username = request.json.get('username')\n  password = request.json.get('password')\n  # validate user\n  token = create_access_token(identity=username)\n  return jsonify(access_token=token)\n```\n\n4. Protect routes using JWT:\n```python\nfrom flask_jwt_extended import jwt_required\n@app.route('/protected', methods=['GET'])\n@jwt_required()\ndef protected():\n  return jsonify(message='This is a protected route')\n```\n\n📚 Reference: https://flask-jwt-extended.readthedocs.io/"
    },
    {
        "question": "How to use Sequelize ORM with MySQL?",
        "label": "backend,nodejs,sequelize,mysql,orm",
        "language": "en",
        "context": "Sequelize is a promise-based ORM for Node.js that supports multiple databases, including MySQL.",
        "answer": "Steps to use Sequelize ORM with MySQL:\n\n1. Install Sequelize and MySQL2:\n```bash\nnpm install sequelize mysql2\n```\n\n2. Set up the Sequelize instance and connect to MySQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/database_name');\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING }\n});\n```\n\n4. Sync and perform operations:\n```javascript\nsequelize.sync().then(() => {\n  return User.create({ name: 'John Doe', email: 'john@example.com' });\n});\n```\n\n📚 Reference: https://sequelize.org/master/",
        "start_char": 0,
        "end_char": 700,
        "key_answer": "Steps to use Sequelize ORM with MySQL:\n\n1. Install Sequelize and MySQL2:\n```bash\nnpm install sequelize mysql2\n```\n\n2. Set up the Sequelize instance and connect to MySQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/database_name');\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING }\n});\n```\n\n4. Sync and perform operations:\n```javascript\nsequelize.sync().then(() => {\n  return User.create({ name: 'John Doe', email: 'john@example.com' });\n});\n```\n\n📚 Reference: https://sequelize.org/master/"
    },
    {
        "question": "How to handle file uploads in a React app?",
        "label": "frontend,react,file-upload",
        "language": "en",
        "context": "In a React application, you can handle file uploads by using `FormData` and sending the files to the server.",
        "answer": "Steps to handle file uploads in a React app:\n\n1. Create a form with a file input field:\n```jsx\n<form onSubmit={handleSubmit}>\n  <input type='file' onChange={handleFileChange} />\n  <button type='submit'>Upload</button>\n</form>\n```\n\n2. Handle file selection in the `onChange` handler:\n```javascript\nconst handleFileChange = (event) => {\n  const file = event.target.files[0];\n  setFile(file);\n};\n```\n\n3. Send the file to the server using `FormData` and `fetch`:\n```javascript\nconst handleSubmit = (event) => {\n  event.preventDefault();\n  const formData = new FormData();\n  formData.append('file', file);\n\n  fetch('/upload', {\n    method: 'POST',\n    body: formData,\n  });\n};\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 757,
        "key_answer": "Steps to handle file uploads in a React app:\n\n1. Create a form with a file input field:\n```jsx\n<form onSubmit={handleSubmit}>\n  <input type='file' onChange={handleFileChange} />\n  <button type='submit'>Upload</button>\n</form>\n```\n\n2. Handle file selection in the `onChange` handler:\n```javascript\nconst handleFileChange = (event) => {\n  const file = event.target.files[0];\n  setFile(file);\n};\n```\n\n3. Send the file to the server using `FormData` and `fetch`:\n```javascript\nconst handleSubmit = (event) => {\n  event.preventDefault();\n  const formData = new FormData();\n  formData.append('file', file);\n\n  fetch('/upload', {\n    method: 'POST',\n    body: formData,\n  });\n};\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to create a GraphQL API with Apollo Server?",
        "label": "backend,graphql,apollo-server,api",
        "language": "en",
        "context": "Apollo Server is a community-driven GraphQL server that allows you to easily set up a GraphQL API.",
        "answer": "Steps to create a GraphQL API with Apollo Server:\n\n1. Install Apollo Server and GraphQL:\n```bash\nnpm install apollo-server graphql\n```\n\n2. Define your GraphQL schema:\n```javascript\nconst { gql } = require('apollo-server');\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n```\n\n3. Set up Apollo Server with your schema and resolvers:\n```javascript\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello, world!'\n  }\n};\n\nconst { ApolloServer } = require('apollo-server');\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.listen().then(({ url }) => {\n  console.log(`Server ready at ${url}`);\n});\n```\n\n📚 Reference: https://www.apollographql.com/docs/apollo-server/",
        "start_char": 0,
        "end_char": 723,
        "key_answer": "Steps to create a GraphQL API with Apollo Server:\n\n1. Install Apollo Server and GraphQL:\n```bash\nnpm install apollo-server graphql\n```\n\n2. Define your GraphQL schema:\n```javascript\nconst { gql } = require('apollo-server');\nconst typeDefs = gql`\n  type Query {\n    hello: String\n  }\n`;\n```\n\n3. Set up Apollo Server with your schema and resolvers:\n```javascript\nconst resolvers = {\n  Query: {\n    hello: () => 'Hello, world!'\n  }\n};\n\nconst { ApolloServer } = require('apollo-server');\nconst server = new ApolloServer({ typeDefs, resolvers });\n\nserver.listen().then(({ url }) => {\n  console.log(`Server ready at ${url}`);\n});\n```\n\n📚 Reference: https://www.apollographql.com/docs/apollo-server/"
    },
    {
        "question": "How to secure a Node.js app using HTTPS?",
        "label": "backend,nodejs,security,https",
        "language": "en",
        "context": "Securing a Node.js app with HTTPS ensures that the data transmitted between the server and clients is encrypted.",
        "answer": "Steps to secure a Node.js app using HTTPS:\n\n1. Obtain an SSL certificate:\n   - You can use Let's Encrypt or purchase one from a provider.\n\n2. Set up HTTPS in your Node.js server:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst app = require('express')();\n\nconst options = {\n  cert: fs.readFileSync('path/to/cert.pem'),\n  key: fs.readFileSync('path/to/key.pem')\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('Server running on https://localhost:3000');\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https",
        "start_char": 0,
        "end_char": 622,
        "key_answer": "Steps to secure a Node.js app using HTTPS:\n\n1. Obtain an SSL certificate:\n   - You can use Let's Encrypt or purchase one from a provider.\n\n2. Set up HTTPS in your Node.js server:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\nconst app = require('express')();\n\nconst options = {\n  cert: fs.readFileSync('path/to/cert.pem'),\n  key: fs.readFileSync('path/to/key.pem')\n};\n\nhttps.createServer(options, app).listen(3000, () => {\n  console.log('Server running on https://localhost:3000');\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https"
    },
    {
        "question": "How to handle asynchronous code in JavaScript?",
        "label": "frontend,javascript,asynchronous,promises",
        "language": "en",
        "context": "JavaScript provides ways to handle asynchronous operations such as Promises, async/await, and callbacks.",
        "answer": "Steps to handle asynchronous code in JavaScript:\n\n1. Using Promises:\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  // some async task\n  resolve('Done');\n});\n```\n\n2. Using async/await:\n```javascript\nconst asyncFunction = async () => {\n  const result = await promise;\n  console.log(result);\n};\n```\n\n3. Using callbacks:\n```javascript\nfunction fetchData(callback) {\n  setTimeout(() => {\n    callback('Data fetched');\n  }, 1000);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",
        "start_char": 0,
        "end_char": 563,
        "key_answer": "Steps to handle asynchronous code in JavaScript:\n\n1. Using Promises:\n```javascript\nconst promise = new Promise((resolve, reject) => {\n  // some async task\n  resolve('Done');\n});\n```\n\n2. Using async/await:\n```javascript\nconst asyncFunction = async () => {\n  const result = await promise;\n  console.log(result);\n};\n```\n\n3. Using callbacks:\n```javascript\nfunction fetchData(callback) {\n  setTimeout(() => {\n    callback('Data fetched');\n  }, 1000);\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"
    },
    {
        "question": "How to handle session management in Express?",
        "label": "backend,nodejs,express,session",
        "language": "en",
        "context": "Express session middleware allows you to manage sessions in your application.",
        "answer": "Steps to handle session management in Express:\n\n1. Install the session middleware:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'mysecret',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Use sessions in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'Alice';\n  res.send('Logged in');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 532,
        "key_answer": "Steps to handle session management in Express:\n\n1. Install the session middleware:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'mysecret',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Use sessions in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'Alice';\n  res.send('Logged in');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to implement authentication with JWT in Django?",
        "label": "backend,python,django,jwt,authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) can be used to authenticate users in Django applications.",
        "answer": "Steps to implement JWT authentication in Django:\n\n1. Install the required packages:\n```bash\npip install djangorestframework-simplejwt\n```\n\n2. Configure JWT authentication in settings.py:\n```python\nREST_FRAMEWORK = {\n  'DEFAULT_AUTHENTICATION_CLASSES': [\n    'rest_framework_simplejwt.authentication.JWTAuthentication',\n  ],\n}\n```\n\n3. Create token views to obtain and refresh JWT tokens:\n```python\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n  path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n  path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]\n```\n\n📚 Reference: https://django-rest-framework-simplejwt.readthedocs.io/en/latest/",
        "start_char": 0,
        "end_char": 765,
        "key_answer": "Steps to implement JWT authentication in Django:\n\n1. Install the required packages:\n```bash\npip install djangorestframework-simplejwt\n```\n\n2. Configure JWT authentication in settings.py:\n```python\nREST_FRAMEWORK = {\n  'DEFAULT_AUTHENTICATION_CLASSES': [\n    'rest_framework_simplejwt.authentication.JWTAuthentication',\n  ],\n}\n```\n\n3. Create token views to obtain and refresh JWT tokens:\n```python\nfrom rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView\n\nurlpatterns = [\n  path('api/token/', TokenObtainPairView.as_view(), name='token_obtain_pair'),\n  path('api/token/refresh/', TokenRefreshView.as_view(), name='token_refresh'),\n]\n```\n\n📚 Reference: https://django-rest-framework-simplejwt.readthedocs.io/en/latest/"
    },
    {
        "question": "How to add logging to a Node.js app?",
        "label": "backend,nodejs,logging",
        "language": "en",
        "context": "Logging is essential for debugging and monitoring the health of an application.",
        "answer": "Steps to add logging to a Node.js app:\n\n1. Install a logging library like Winston:\n```bash\nnpm install winston\n```\n\n2. Set up a logger instance:\n```javascript\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Log messages in your app:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://github.com/winstonjs/winston",
        "start_char": 0,
        "end_char": 578,
        "key_answer": "Steps to add logging to a Node.js app:\n\n1. Install a logging library like Winston:\n```bash\nnpm install winston\n```\n\n2. Set up a logger instance:\n```javascript\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Log messages in your app:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://github.com/winstonjs/winston"
    },
    {
        "question": "How to use React Context API for state management?",
        "label": "frontend,react,state-management,context-api",
        "language": "en",
        "context": "React Context API allows you to share state across your components without passing props manually.",
        "answer": "Steps to use React Context API for state management:\n\n1. Create a Context:\n```javascript\nconst MyContext = React.createContext();\n```\n\n2. Create a provider component:\n```javascript\nconst MyProvider = ({ children }) => {\n  const [state, setState] = useState('Hello World');\n\n  return (\n    <MyContext.Provider value={{ state, setState }}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n```\n\n3. Use the context in child components:\n```javascript\nconst MyComponent = () => {\n  const { state } = useContext(MyContext);\n  return <div>{state}</div>;\n};\n```\n\n📚 Reference: https://reactjs.org/docs/context.html",
        "start_char": 0,
        "end_char": 634,
        "key_answer": "Steps to use React Context API for state management:\n\n1. Create a Context:\n```javascript\nconst MyContext = React.createContext();\n```\n\n2. Create a provider component:\n```javascript\nconst MyProvider = ({ children }) => {\n  const [state, setState] = useState('Hello World');\n\n  return (\n    <MyContext.Provider value={{ state, setState }}>\n      {children}\n    </MyContext.Provider>\n  );\n};\n```\n\n3. Use the context in child components:\n```javascript\nconst MyComponent = () => {\n  const { state } = useContext(MyContext);\n  return <div>{state}</div>;\n};\n```\n\n📚 Reference: https://reactjs.org/docs/context.html"
    },
    {
        "question": "How to create a RESTful API in Django?",
        "label": "backend,python,django,restful-api",
        "language": "en",
        "context": "Django can be used to create a RESTful API using Django REST framework (DRF).",
        "answer": "Steps to create a RESTful API in Django:\n\n1. Install Django REST framework:\n```bash\npip install djangorestframework\n```\n\n2. Add `rest_framework` to `INSTALLED_APPS` in settings.py.\n\n3. Create a serializer class to define how to convert model data:\n```python\nfrom rest_framework import serializers\n\nclass MyModelSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = MyModel\n    fields = '__all__'\n```\n\n4. Create API views to handle HTTP methods (GET, POST, etc.):\n```python\nfrom rest_framework import viewsets\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n  queryset = MyModel.objects.all()\n  serializer_class = MyModelSerializer\n```\n\n5. Set up URL routing for API endpoints:\n```python\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)\n\nurlpatterns = [\n  path('api/', include(router.urls))\n]\n```\n\n📚 Reference: https://www.django-rest-framework.org/",
        "start_char": 0,
        "end_char": 1008,
        "key_answer": "Steps to create a RESTful API in Django:\n\n1. Install Django REST framework:\n```bash\npip install djangorestframework\n```\n\n2. Add `rest_framework` to `INSTALLED_APPS` in settings.py.\n\n3. Create a serializer class to define how to convert model data:\n```python\nfrom rest_framework import serializers\n\nclass MyModelSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = MyModel\n    fields = '__all__'\n```\n\n4. Create API views to handle HTTP methods (GET, POST, etc.):\n```python\nfrom rest_framework import viewsets\n\nclass MyModelViewSet(viewsets.ModelViewSet):\n  queryset = MyModel.objects.all()\n  serializer_class = MyModelSerializer\n```\n\n5. Set up URL routing for API endpoints:\n```python\nfrom django.urls import path, include\nfrom rest_framework.routers import DefaultRouter\n\nrouter = DefaultRouter()\nrouter.register(r'mymodel', MyModelViewSet)\n\nurlpatterns = [\n  path('api/', include(router.urls))\n]\n```\n\n📚 Reference: https://www.django-rest-framework.org/"
    },
    {
        "question": "How to validate forms in React?",
        "label": "frontend,react,forms,validation",
        "language": "en",
        "context": "Validating forms in React ensures that the data submitted is correct and prevents errors.",
        "answer": "Steps to validate forms in React:\n\n1. Create a state for form fields:\n```javascript\nconst [formData, setFormData] = useState({ name: '', email: '' });\n```\n\n2. Create a validation function:\n```javascript\nconst validateForm = () => {\n  if (!formData.name || !formData.email) {\n    return false;\n  }\n  return true;\n};\n```\n\n3. Handle form submission:\n```javascript\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  if (validateForm()) {\n    // submit form\n  } else {\n    // show error\n  }\n};\n```\n\n4. Use controlled components for form fields:\n```javascript\n<input type='text' value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 757,
        "key_answer": "Steps to validate forms in React:\n\n1. Create a state for form fields:\n```javascript\nconst [formData, setFormData] = useState({ name: '', email: '' });\n```\n\n2. Create a validation function:\n```javascript\nconst validateForm = () => {\n  if (!formData.name || !formData.email) {\n    return false;\n  }\n  return true;\n};\n```\n\n3. Handle form submission:\n```javascript\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  if (validateForm()) {\n    // submit form\n  } else {\n    // show error\n  }\n};\n```\n\n4. Use controlled components for form fields:\n```javascript\n<input type='text' value={formData.name} onChange={(e) => setFormData({ ...formData, name: e.target.value })} />\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to add authentication to a Node.js app using Passport?",
        "label": "backend,nodejs,passport,authentication",
        "language": "en",
        "context": "Passport.js is a simple authentication middleware for Node.js, supporting various authentication strategies.",
        "answer": "Steps to add authentication to a Node.js app using Passport:\n\n1. Install Passport and related modules:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport strategies:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // authenticate user\n}));\n```\n\n3. Initialize Passport and session middleware in your app:\n```javascript\napp.use(session({ secret: 'mysecret', resave: false, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Set up login route:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 847,
        "key_answer": "Steps to add authentication to a Node.js app using Passport:\n\n1. Install Passport and related modules:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport strategies:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // authenticate user\n}));\n```\n\n3. Initialize Passport and session middleware in your app:\n```javascript\napp.use(session({ secret: 'mysecret', resave: false, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Set up login route:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/"
    },
    {
        "question": "How to set up a WebSocket server in Node.js?",
        "label": "backend,nodejs,websocket,real-time",
        "language": "en",
        "context": "WebSocket provides full-duplex communication channels over a single TCP connection, often used for real-time applications.",
        "answer": "Steps to set up a WebSocket server in Node.js:\n\n1. Install the `ws` library:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log(`Received message: ${message}`);\n  });\n  ws.send('Hello, client');\n});\n```\n\n3. Connect to the WebSocket server from a client:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onopen = () => {\n  ws.send('Hello, server');\n};\nws.onmessage = (event) => {\n  console.log(event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 693,
        "key_answer": "Steps to set up a WebSocket server in Node.js:\n\n1. Install the `ws` library:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log(`Received message: ${message}`);\n  });\n  ws.send('Hello, client');\n});\n```\n\n3. Connect to the WebSocket server from a client:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onopen = () => {\n  ws.send('Hello, server');\n};\nws.onmessage = (event) => {\n  console.log(event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to configure webpack for a React app?",
        "label": "frontend,webpack,react,configuration",
        "language": "en",
        "context": "Webpack is a module bundler that compiles and bundles JavaScript, CSS, and other assets.",
        "answer": "Steps to configure webpack for a React app:\n\n1. Install necessary dependencies:\n```bash\nnpm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react\n```\n\n2. Create a `webpack.config.js` file:\n```javascript\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: / js$/, // Use Babel to transpile JS files\n        exclude: /node_modules/,\n        use: ['babel-loader']\n      }\n    ]\n  },\n  devServer: {\n    contentBase: './dist',\n    port: 3000\n  }\n};\n```\n\n3. Run the webpack dev server:\n```bash\nnpx webpack-dev-server\n```\n\n📚 Reference: https://webpack.js.org/guides/webpack-dev-server/",
        "start_char": 0,
        "end_char": 808,
        "key_answer": "Steps to configure webpack for a React app:\n\n1. Install necessary dependencies:\n```bash\nnpm install --save-dev webpack webpack-cli webpack-dev-server babel-loader @babel/core @babel/preset-env @babel/preset-react\n```\n\n2. Create a `webpack.config.js` file:\n```javascript\nmodule.exports = {\n  entry: './src/index.js',\n  output: {\n    path: path.resolve(__dirname, 'dist'),\n    filename: 'bundle.js'\n  },\n  module: {\n    rules: [\n      {\n        test: / js$/, // Use Babel to transpile JS files\n        exclude: /node_modules/,\n        use: ['babel-loader']\n      }\n    ]\n  },\n  devServer: {\n    contentBase: './dist',\n    port: 3000\n  }\n};\n```\n\n3. Run the webpack dev server:\n```bash\nnpx webpack-dev-server\n```\n\n📚 Reference: https://webpack.js.org/guides/webpack-dev-server/"
    },
    {
        "question": "How to set up environment variables in Node.js?",
        "label": "backend,nodejs,environment-variables",
        "language": "en",
        "context": "Environment variables in Node.js are used to configure the environment in which your application runs.",
        "answer": "Steps to set up environment variables in Node.js:\n\n1. Create a `.env` file in the root directory of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASSWORD=password\n```\n\n2. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n3. Add the following code to load environment variables in your application:\n```javascript\nrequire('dotenv').config();\nconsole.log(process.env.DB_HOST);\n```\n\n4. Use the environment variables in your code:\n```javascript\nconst dbConnection = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 689,
        "key_answer": "Steps to set up environment variables in Node.js:\n\n1. Create a `.env` file in the root directory of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASSWORD=password\n```\n\n2. Install the `dotenv` package:\n```bash\nnpm install dotenv\n```\n\n3. Add the following code to load environment variables in your application:\n```javascript\nrequire('dotenv').config();\nconsole.log(process.env.DB_HOST);\n```\n\n4. Use the environment variables in your code:\n```javascript\nconst dbConnection = mysql.createConnection({\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to handle errors in Express.js?",
        "label": "backend,nodejs,express,error-handling",
        "language": "en",
        "context": "Error handling in Express.js ensures that errors are properly caught and managed.",
        "answer": "Steps to handle errors in Express.js:\n\n1. Create an error-handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Use `next()` to pass errors to the middleware:\n```javascript\napp.get('/', (req, res, next) => {\n  const error = new Error('An error occurred');\n  next(error);\n});\n```\n\n3. Use custom error classes for more structured error handling:\n```javascript\nclass CustomError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\n```\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to handle errors in Express.js:\n\n1. Create an error-handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Use `next()` to pass errors to the middleware:\n```javascript\napp.get('/', (req, res, next) => {\n  const error = new Error('An error occurred');\n  next(error);\n});\n```\n\n3. Use custom error classes for more structured error handling:\n```javascript\nclass CustomError extends Error {\n  constructor(message, statusCode) {\n    super(message);\n    this.statusCode = statusCode;\n  }\n}\n```\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html"
    },
    {
        "question": "How to create a React hook to manage form state?",
        "label": "frontend,react,forms,custom-hook",
        "language": "en",
        "context": "Creating a custom React hook helps you to abstract logic related to managing form states.",
        "answer": "Steps to create a custom React hook for form state management:\n\n1. Create a `useForm` hook:\n```javascript\nimport { useState } from 'react';\n\nconst useForm = (initialValues) => {\n  const [formValues, setFormValues] = useState(initialValues);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({ ...formValues, [name]: value });\n  };\n\n  return { formValues, handleChange };\n};\n```\n\n2. Use the `useForm` hook in a form component:\n```javascript\nconst MyForm = () => {\n  const { formValues, handleChange } = useForm({ name: '', email: '' });\n\n  return (\n    <form>\n      <input type='text' name='name' value={formValues.name} onChange={handleChange} />\n      <input type='email' name='email' value={formValues.email} onChange={handleChange} />\n    </form>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 888,
        "key_answer": "Steps to create a custom React hook for form state management:\n\n1. Create a `useForm` hook:\n```javascript\nimport { useState } from 'react';\n\nconst useForm = (initialValues) => {\n  const [formValues, setFormValues] = useState(initialValues);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setFormValues({ ...formValues, [name]: value });\n  };\n\n  return { formValues, handleChange };\n};\n```\n\n2. Use the `useForm` hook in a form component:\n```javascript\nconst MyForm = () => {\n  const { formValues, handleChange } = useForm({ name: '', email: '' });\n\n  return (\n    <form>\n      <input type='text' name='name' value={formValues.name} onChange={handleChange} />\n      <input type='email' name='email' value={formValues.email} onChange={handleChange} />\n    </form>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to set up an Nginx server to serve a Node.js app?",
        "label": "backend,nginx,nodejs,server-setup",
        "language": "en",
        "context": "Nginx can be used as a reverse proxy to forward requests to a Node.js app running on a different port.",
        "answer": "Steps to set up an Nginx server to serve a Node.js app:\n\n1. Install Nginx on your server:\n```bash\nsudo apt-get install nginx\n```\n\n2. Configure Nginx to forward requests to your Node.js app:\n```nginx\nserver {\n  listen 80;\n  server_name your-domain.com;\n\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n3. Restart Nginx:\n```bash\nsudo systemctl restart nginx\n```\n\n4. Start your Node.js app:\n```bash\nnode app.js\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-app-with-nginx-on-ubuntu-18-04",
        "start_char": 0,
        "end_char": 765,
        "key_answer": "Steps to set up an Nginx server to serve a Node.js app:\n\n1. Install Nginx on your server:\n```bash\nsudo apt-get install nginx\n```\n\n2. Configure Nginx to forward requests to your Node.js app:\n```nginx\nserver {\n  listen 80;\n  server_name your-domain.com;\n\n  location / {\n    proxy_pass http://localhost:3000;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n3. Restart Nginx:\n```bash\nsudo systemctl restart nginx\n```\n\n4. Start your Node.js app:\n```bash\nnode app.js\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/how-to-set-up-a-node-js-app-with-nginx-on-ubuntu-18-04"
    },
    {
        "question": "How to use MongoDB with Mongoose in Node.js?",
        "label": "backend,mongodb,nodejs,mongoose",
        "language": "en",
        "context": "Mongoose is an ODM (Object Data Modeling) library for MongoDB and Node.js.",
        "answer": "Steps to use MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('Could not connect to MongoDB...', err));\n```\n\n3. Create a Mongoose schema and model:\n```javascript\nconst personSchema = new mongoose.Schema({\n  name: String,\n  age: Number\n});\nconst Person = mongoose.model('Person', personSchema);\n```\n\n4. Perform CRUD operations:\n```javascript\nconst person = new Person({ name: 'John Doe', age: 30 });\nawait person.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/guide.html",
        "start_char": 0,
        "end_char": 826,
        "key_answer": "Steps to use MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('Could not connect to MongoDB...', err));\n```\n\n3. Create a Mongoose schema and model:\n```javascript\nconst personSchema = new mongoose.Schema({\n  name: String,\n  age: Number\n});\nconst Person = mongoose.model('Person', personSchema);\n```\n\n4. Perform CRUD operations:\n```javascript\nconst person = new Person({ name: 'John Doe', age: 30 });\nawait person.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/guide.html"
    },
    {
        "question": "How to set up routing in an Express.js app?",
        "label": "backend,nodejs,express,routing",
        "language": "en",
        "context": "Routing in Express.js allows you to define how an app responds to client requests to different endpoints.",
        "answer": "Steps to set up routing in an Express.js app:\n\n1. Create routes using `app.get`, `app.post`, etc.:\n```javascript\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n```\n\n2. Organize routes into separate modules for scalability:\n```javascript\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/users', (req, res) => {\n  res.send('Users list');\n});\n\nmodule.exports = router;\n```\n\n3. Use `app.use` to load the route module:\n```javascript\nconst userRoutes = require('./userRoutes');\napp.use('/api', userRoutes);\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 646,
        "key_answer": "Steps to set up routing in an Express.js app:\n\n1. Create routes using `app.get`, `app.post`, etc.:\n```javascript\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n```\n\n2. Organize routes into separate modules for scalability:\n```javascript\nconst express = require('express');\nconst router = express.Router();\n\nrouter.get('/users', (req, res) => {\n  res.send('Users list');\n});\n\nmodule.exports = router;\n```\n\n3. Use `app.use` to load the route module:\n```javascript\nconst userRoutes = require('./userRoutes');\napp.use('/api', userRoutes);\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to set up Webpack for a production build?",
        "label": "frontend,webpack,production-build",
        "language": "en",
        "context": "Webpack is a powerful bundler that can also be configured for optimized production builds.",
        "answer": "Steps to set up Webpack for a production build:\n\n1. Install production dependencies:\n```bash\nnpm install --save-dev webpack webpack-cli webpack-merge terser-webpack-plugin\n```\n\n2. Create a `webpack.prod.js` configuration file:\n```javascript\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n  mode: 'production',\n  optimization: {\n    minimize: true,\n    minimizer: [new TerserPlugin()]\n  },\n  // other production-specific configurations\n};\n```\n\n3. Merge with common configuration using `webpack-merge`:\n```javascript\nconst merge = require('webpack-merge');\nconst commonConfig = require('./webpack.common.js');\n\nmodule.exports = merge(commonConfig, require('./webpack.prod.js'));\n```\n\n4. Run the production build:\n```bash\nnpx webpack --config webpack.prod.js\n```\n\n📚 Reference: https://webpack.js.org/guides/production/",
        "start_char": 0,
        "end_char": 875,
        "key_answer": "Steps to set up Webpack for a production build:\n\n1. Install production dependencies:\n```bash\nnpm install --save-dev webpack webpack-cli webpack-merge terser-webpack-plugin\n```\n\n2. Create a `webpack.prod.js` configuration file:\n```javascript\nconst TerserPlugin = require('terser-webpack-plugin');\nmodule.exports = {\n  mode: 'production',\n  optimization: {\n    minimize: true,\n    minimizer: [new TerserPlugin()]\n  },\n  // other production-specific configurations\n};\n```\n\n3. Merge with common configuration using `webpack-merge`:\n```javascript\nconst merge = require('webpack-merge');\nconst commonConfig = require('./webpack.common.js');\n\nmodule.exports = merge(commonConfig, require('./webpack.prod.js'));\n```\n\n4. Run the production build:\n```bash\nnpx webpack --config webpack.prod.js\n```\n\n📚 Reference: https://webpack.js.org/guides/production/"
    },
    {
        "question": "How to set up a Redux store in a React app?",
        "label": "frontend,react,redux,store",
        "language": "en",
        "context": "Redux is a state management library used in React for managing application state globally.",
        "answer": "Steps to set up a Redux store in a React app:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a reducer function:\n```javascript\nconst initialState = { count: 0 }; \nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n```\n\n3. Create the Redux store:\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(counterReducer);\n```\n\n4. Wrap your application with the `Provider` component from React-Redux:\n```javascript\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://redux.js.org/introduction/getting-started",
        "start_char": 0,
        "end_char": 884,
        "key_answer": "Steps to set up a Redux store in a React app:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a reducer function:\n```javascript\nconst initialState = { count: 0 }; \nconst counterReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    case 'DECREMENT':\n      return { ...state, count: state.count - 1 };\n    default:\n      return state;\n  }\n};\n```\n\n3. Create the Redux store:\n```javascript\nimport { createStore } from 'redux';\nconst store = createStore(counterReducer);\n```\n\n4. Wrap your application with the `Provider` component from React-Redux:\n```javascript\nimport { Provider } from 'react-redux';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://redux.js.org/introduction/getting-started"
    },
    {
        "question": "How to configure a MySQL database connection in Node.js?",
        "label": "backend,nodejs,mysql,configuration",
        "language": "en",
        "context": "Setting up a MySQL database connection in Node.js involves installing the MySQL package and configuring the connection.",
        "answer": "Steps to configure a MySQL database connection in Node.js:\n\n1. Install MySQL package:\n```bash\nnpm install mysql\n```\n\n2. Create a connection to the MySQL database:\n```javascript\nconst mysql = require('mysql');\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydatabase'\n});\n```\n\n3. Connect to the database:\n```javascript\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to the database');\n});\n```\n\n4. Perform queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql",
        "start_char": 0,
        "end_char": 726,
        "key_answer": "Steps to configure a MySQL database connection in Node.js:\n\n1. Install MySQL package:\n```bash\nnpm install mysql\n```\n\n2. Create a connection to the MySQL database:\n```javascript\nconst mysql = require('mysql');\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydatabase'\n});\n```\n\n3. Connect to the database:\n```javascript\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to the database');\n});\n```\n\n4. Perform queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql"
    },
    {
        "question": "How to create a custom hook for form validation in React?",
        "label": "frontend,react,custom-hook,forms,validation",
        "language": "en",
        "context": "A custom hook for form validation abstracts the logic for handling form validation in React.",
        "answer": "Steps to create a custom hook for form validation in React:\n\n1. Create the `useValidation` hook:\n```javascript\nimport { useState } from 'react';\n\nconst useValidation = (validate) => {\n  const [errors, setErrors] = useState({});\n  const validateForm = (formValues) => {\n    const validationErrors = validate(formValues);\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  };\n\n  return { errors, validateForm };\n};\n```\n\n2. Use the `useValidation` hook in a form component:\n```javascript\nconst MyForm = () => {\n  const [formValues, setFormValues] = useState({ name: '', email: '' });\n\n  const { errors, validateForm } = useValidation((values) => {\n    const errors = {};\n    if (!values.name) errors.name = 'Name is required';\n    if (!values.email) errors.email = 'Email is required';\n    return errors;\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm(formValues)) {\n      console.log('Form is valid');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' name='name' value={formValues.name} onChange={(e) => setFormValues({ ...formValues, name: e.target.value })} />\n      {errors.name && <span>{errors.name}</span>}\n      <input type='email' name='email' value={formValues.email} onChange={(e) => setFormValues({ ...formValues, email: e.target.value })} />\n      {errors.email && <span>{errors.email}</span>}\n      <button type='submit'>Submit</button>\n    </form>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 1586,
        "key_answer": "Steps to create a custom hook for form validation in React:\n\n1. Create the `useValidation` hook:\n```javascript\nimport { useState } from 'react';\n\nconst useValidation = (validate) => {\n  const [errors, setErrors] = useState({});\n  const validateForm = (formValues) => {\n    const validationErrors = validate(formValues);\n    setErrors(validationErrors);\n    return Object.keys(validationErrors).length === 0;\n  };\n\n  return { errors, validateForm };\n};\n```\n\n2. Use the `useValidation` hook in a form component:\n```javascript\nconst MyForm = () => {\n  const [formValues, setFormValues] = useState({ name: '', email: '' });\n\n  const { errors, validateForm } = useValidation((values) => {\n    const errors = {};\n    if (!values.name) errors.name = 'Name is required';\n    if (!values.email) errors.email = 'Email is required';\n    return errors;\n  });\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (validateForm(formValues)) {\n      console.log('Form is valid');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='text' name='name' value={formValues.name} onChange={(e) => setFormValues({ ...formValues, name: e.target.value })} />\n      {errors.name && <span>{errors.name}</span>}\n      <input type='email' name='email' value={formValues.email} onChange={(e) => setFormValues({ ...formValues, email: e.target.value })} />\n      {errors.email && <span>{errors.email}</span>}\n      <button type='submit'>Submit</button>\n    </form>\n  );\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to use session in Express.js?",
        "label": "backend,nodejs,express,session",
        "language": "en",
        "context": "Sessions in Express.js are used to store data for individual users to persist between requests.",
        "answer": "Steps to use sessions in Express.js:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up the session middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'yourSecretKey',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n```\n\n3. Store data in the session:\n```javascript\napp.get('/set-session', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('Session set');\n});\n```\n\n4. Access session data in a route:\n```javascript\napp.get('/get-session', (req, res) => {\n  res.send(`Hello ${req.session.user}`);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 719,
        "key_answer": "Steps to use sessions in Express.js:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up the session middleware:\n```javascript\nconst session = require('express-session');\napp.use(session({\n  secret: 'yourSecretKey',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n```\n\n3. Store data in the session:\n```javascript\napp.get('/set-session', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('Session set');\n});\n```\n\n4. Access session data in a route:\n```javascript\napp.get('/get-session', (req, res) => {\n  res.send(`Hello ${req.session.user}`);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to use CSS Grid to create a two-column layout?",
        "label": "frontend,css,grid,layout",
        "language": "en",
        "context": "CSS Grid is a powerful layout system in CSS used for creating complex layouts.",
        "answer": "Steps to create a two-column layout using CSS Grid:\n\n1. Create a container element with `display: grid`:\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n```\n\n2. Place items inside the container:\n```html\n<div class='container'>\n  <div class='item'>Item 1</div>\n  <div class='item'>Item 2</div>\n</div>\n```\n\n3. Customize the layout:\n```css\n.container {\n  grid-template-columns: 2fr 1fr; /* First column is twice as wide as the second */\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",
        "start_char": 0,
        "end_char": 582,
        "key_answer": "Steps to create a two-column layout using CSS Grid:\n\n1. Create a container element with `display: grid`:\n```css\n.container {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  gap: 20px;\n}\n```\n\n2. Place items inside the container:\n```html\n<div class='container'>\n  <div class='item'>Item 1</div>\n  <div class='item'>Item 2</div>\n</div>\n```\n\n3. Customize the layout:\n```css\n.container {\n  grid-template-columns: 2fr 1fr; /* First column is twice as wide as the second */\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"
    },
    {
        "question": "How to create a custom hook for handling API requests in React?",
        "label": "frontend,react,custom-hook,api",
        "language": "en",
        "context": "Custom hooks allow you to extract and reuse logic across components in React.",
        "answer": "Steps to create a custom hook for handling API requests in React:\n\n1. Create the `useFetch` hook:\n```javascript\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};\n```\n\n2. Use the `useFetch` hook in a component:\n```javascript\nconst MyComponent = () => {\n  const { data, loading, error } = useFetch('https://api.example.com/data');\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return <div>{JSON.stringify(data)}</div>;\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 1101,
        "key_answer": "Steps to create a custom hook for handling API requests in React:\n\n1. Create the `useFetch` hook:\n```javascript\nimport { useState, useEffect } from 'react';\n\nconst useFetch = (url) => {\n  const [data, setData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(url);\n        const result = await response.json();\n        setData(result);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url]);\n\n  return { data, loading, error };\n};\n```\n\n2. Use the `useFetch` hook in a component:\n```javascript\nconst MyComponent = () => {\n  const { data, loading, error } = useFetch('https://api.example.com/data');\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error.message}</div>;\n\n  return <div>{JSON.stringify(data)}</div>;\n};\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to create a RESTful API in Flask?",
        "label": "backend,flask,api,restful",
        "language": "en",
        "context": "Flask is a micro web framework for Python, often used to build small web applications and APIs.",
        "answer": "Steps to create a RESTful API in Flask:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Create a basic Flask app:\n```python\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef api():\n    return jsonify({'message': 'Hello World'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n3. Create routes for your API:\n```python\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    return jsonify([{ 'name': 'John' }, { 'name': 'Jane' }])\n```\n\n4. Run the Flask app:\n```bash\npython app.py\n```\n\n📚 Reference: https://flask.palletsprojects.com/en/2.0.x/",
        "start_char": 0,
        "end_char": 650,
        "key_answer": "Steps to create a RESTful API in Flask:\n\n1. Install Flask:\n```bash\npip install Flask\n```\n\n2. Create a basic Flask app:\n```python\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/api', methods=['GET'])\ndef api():\n    return jsonify({'message': 'Hello World'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n3. Create routes for your API:\n```python\n@app.route('/api/users', methods=['GET'])\ndef get_users():\n    return jsonify([{ 'name': 'John' }, { 'name': 'Jane' }])\n```\n\n4. Run the Flask app:\n```bash\npython app.py\n```\n\n📚 Reference: https://flask.palletsprojects.com/en/2.0.x/"
    },
    {
        "question": "How to set up a cron job in Linux?",
        "label": "linux,cron,job,scheduling",
        "language": "en",
        "context": "Cron jobs are scheduled tasks in Linux/Unix systems that run at specific intervals.",
        "answer": "Steps to set up a cron job in Linux:\n\n1. Open the cron table:\n```bash\ncrontab -e\n```\n\n2. Add a new cron job entry with the following format:\n```bash\n* * * * * /path/to/command\n```\nThe five asterisks represent (in order): minute, hour, day of the month, month, day of the week.\n\nFor example, to run a script every day at 2 AM:\n```bash\n0 2 * * * /path/to/script.sh\n```\n\n3. Save and exit the editor.\n\n4. Check your cron jobs:\n```bash\ncrontab -l\n```\n\n📚 Reference: https://linux.die.net/man/5/crontab",
        "start_char": 0,
        "end_char": 520,
        "key_answer": "Steps to set up a cron job in Linux:\n\n1. Open the cron table:\n```bash\ncrontab -e\n```\n\n2. Add a new cron job entry with the following format:\n```bash\n* * * * * /path/to/command\n```\nThe five asterisks represent (in order): minute, hour, day of the month, month, day of the week.\n\nFor example, to run a script every day at 2 AM:\n```bash\n0 2 * * * /path/to/script.sh\n```\n\n3. Save and exit the editor.\n\n4. Check your cron jobs:\n```bash\ncrontab -l\n```\n\n📚 Reference: https://linux.die.net/man/5/crontab"
    },
    {
        "question": "How to implement role-based access control (RBAC) in a Node.js app?",
        "label": "backend,nodejs,rbac,access-control",
        "language": "en",
        "context": "RBAC is a method for restricting system access based on user roles in a Node.js application.",
        "answer": "Steps to implement RBAC in a Node.js app:\n\n1. Define roles and permissions:\n```javascript\nconst roles = ['admin', 'user'];\nconst permissions = {\n  admin: ['read', 'write', 'delete'],\n  user: ['read']\n};\n```\n\n2. Create middleware to check user role and permissions:\n```javascript\nconst checkPermission = (role, permission) => {\n  return permissions[role] && permissions[role].includes(permission);\n};\n```\n\n3. Apply middleware in routes:\n```javascript\napp.get('/admin', (req, res) => {\n  if (checkPermission(req.user.role, 'delete')) {\n    res.send('Access granted to delete');\n  } else {\n    res.status(403).send('Forbidden');\n  }\n});\n```\n\n4. Ensure user roles are assigned correctly during authentication.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 802,
        "key_answer": "Steps to implement RBAC in a Node.js app:\n\n1. Define roles and permissions:\n```javascript\nconst roles = ['admin', 'user'];\nconst permissions = {\n  admin: ['read', 'write', 'delete'],\n  user: ['read']\n};\n```\n\n2. Create middleware to check user role and permissions:\n```javascript\nconst checkPermission = (role, permission) => {\n  return permissions[role] && permissions[role].includes(permission);\n};\n```\n\n3. Apply middleware in routes:\n```javascript\napp.get('/admin', (req, res) => {\n  if (checkPermission(req.user.role, 'delete')) {\n    res.send('Access granted to delete');\n  } else {\n    res.status(403).send('Forbidden');\n  }\n});\n```\n\n4. Ensure user roles are assigned correctly during authentication.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to use CSS Flexbox for responsive design?",
        "label": "frontend,css,flexbox,responsive-design",
        "language": "en",
        "context": "Flexbox is a layout model in CSS that allows for flexible and responsive layouts.",
        "answer": "Steps to use CSS Flexbox for responsive design:\n\n1. Set the container to `display: flex`:\n```css\n.container {\n  display: flex;\n  justify-content: space-between;\n}\n```\n\n2. Use `flex-wrap` to allow items to wrap in smaller screens:\n```css\n.container {\n  flex-wrap: wrap;\n}\n```\n\n3. Use `media queries` to adjust layout for different screen sizes:\n```css\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n}\n```\n\n4. Set `flex` property on items for flexibility:\n```css\n.item {\n  flex: 1;\n}\n```\n\n📚 Reference: https://css-tricks.com/snippets/css/a-guide-to-flexbox/",
        "start_char": 0,
        "end_char": 616,
        "key_answer": "Steps to use CSS Flexbox for responsive design:\n\n1. Set the container to `display: flex`:\n```css\n.container {\n  display: flex;\n  justify-content: space-between;\n}\n```\n\n2. Use `flex-wrap` to allow items to wrap in smaller screens:\n```css\n.container {\n  flex-wrap: wrap;\n}\n```\n\n3. Use `media queries` to adjust layout for different screen sizes:\n```css\n@media (max-width: 768px) {\n  .container {\n    flex-direction: column;\n  }\n}\n```\n\n4. Set `flex` property on items for flexibility:\n```css\n.item {\n  flex: 1;\n}\n```\n\n📚 Reference: https://css-tricks.com/snippets/css/a-guide-to-flexbox/"
    },
    {
        "question": "How to set up a MongoDB database in Node.js?",
        "label": "backend,nodejs,mongodb,setup",
        "language": "en",
        "context": "MongoDB is a NoSQL database commonly used with Node.js for storing unstructured data.",
        "answer": "Steps to set up a MongoDB database in Node.js:\n\n1. Install MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Connect to the MongoDB database:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function connect() {\n  await client.connect();\n  console.log('Connected to MongoDB');\n}\nconnect();\n```\n\n3. Perform database operations (e.g., insert data):\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\nawait collection.insertOne({ name: 'John Doe', age: 30 });\n```\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to set up a MongoDB database in Node.js:\n\n1. Install MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Connect to the MongoDB database:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function connect() {\n  await client.connect();\n  console.log('Connected to MongoDB');\n}\nconnect();\n```\n\n3. Perform database operations (e.g., insert data):\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\nawait collection.insertOne({ name: 'John Doe', age: 30 });\n```\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/"
    },
    {
        "question": "How to use CSS Grid to create a layout?",
        "label": "frontend,css,grid,layout",
        "language": "en",
        "context": "CSS Grid is a powerful layout system for creating complex web layouts.",
        "answer": "Steps to use CSS Grid to create a layout:\n\n1. Set the container to `display: grid`:\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n```\n\n2. Place items inside the container:\n```html\n<div class='container'>\n  <div class='item'>Item 1</div>\n  <div class='item'>Item 2</div>\n</div>\n```\n\n3. Customize the layout:\n```css\n.container {\n  grid-template-columns: 2fr 1fr; /* First column is twice as wide as the second */\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout",
        "start_char": 0,
        "end_char": 554,
        "key_answer": "Steps to use CSS Grid to create a layout:\n\n1. Set the container to `display: grid`:\n```css\n.container {\n  display: grid;\n  grid-template-columns: repeat(3, 1fr);\n}\n```\n\n2. Place items inside the container:\n```html\n<div class='container'>\n  <div class='item'>Item 1</div>\n  <div class='item'>Item 2</div>\n</div>\n```\n\n3. Customize the layout:\n```css\n.container {\n  grid-template-columns: 2fr 1fr; /* First column is twice as wide as the second */\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout"
    },
    {
        "question": "How to create a WebSocket server in Node.js?",
        "label": "backend,nodejs,websockets,server",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single TCP connection, often used for real-time applications.",
        "answer": "Steps to create a WebSocket server in Node.js:\n\n1. Install `ws` library:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n\n  ws.send('Hello Client!');\n});\n```\n\n3. Run the server:\n```bash\nnode server.js\n```\n\n4. Connect to the WebSocket server from a client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  socket.send('Hello Server!');\n};\n\nsocket.onmessage = (event) => {\n  console.log(event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 756,
        "key_answer": "Steps to create a WebSocket server in Node.js:\n\n1. Install `ws` library:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n\n  ws.send('Hello Client!');\n});\n```\n\n3. Run the server:\n```bash\nnode server.js\n```\n\n4. Connect to the WebSocket server from a client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  socket.send('Hello Server!');\n};\n\nsocket.onmessage = (event) => {\n  console.log(event.data);\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to create a GitHub Action for continuous integration?",
        "label": "devops,github-actions,ci,continuous-integration",
        "language": "en",
        "context": "GitHub Actions allow you to automate workflows, including continuous integration (CI) for your project.",
        "answer": "Steps to create a GitHub Action for CI:\n\n1. Create a `.github/workflows/ci.yml` file in your repository.\n\n2. Define your GitHub Action workflow:\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```\n\n3. Push the changes to GitHub.\n\n4. GitHub will automatically run the action on each push to the `main` branch.\n\n📚 Reference: https://docs.github.com/en/actions",
        "start_char": 0,
        "end_char": 729,
        "key_answer": "Steps to create a GitHub Action for CI:\n\n1. Create a `.github/workflows/ci.yml` file in your repository.\n\n2. Define your GitHub Action workflow:\n```yaml\nname: CI\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '14'\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```\n\n3. Push the changes to GitHub.\n\n4. GitHub will automatically run the action on each push to the `main` branch.\n\n📚 Reference: https://docs.github.com/en/actions"
    },
    {
        "question": "How to set up ESLint in a JavaScript project?",
        "label": "frontend,eslint,js,linting",
        "language": "en",
        "context": "ESLint is a tool for identifying and fixing problems in JavaScript code by enforcing code quality standards.",
        "answer": "Steps to set up ESLint in a JavaScript project:\n\n1. Install ESLint:\n```bash\nnpm install eslint --save-dev\n```\n\n2. Initialize ESLint configuration:\n```bash\nnpx eslint --init\n```\n\n3. Choose your preferred configuration options (e.g., JavaScript modules, React, etc.).\n\n4. Add ESLint script to `package.json`:\n```json\n\"scripts\": {\n  \"lint\": \"eslint .\"\n}\n```\n\n5. Run ESLint to check your project:\n```bash\nnpm run lint\n```\n\n📚 Reference: https://eslint.org/docs/user-guide/getting-started",
        "start_char": 0,
        "end_char": 514,
        "key_answer": "Steps to set up ESLint in a JavaScript project:\n\n1. Install ESLint:\n```bash\nnpm install eslint --save-dev\n```\n\n2. Initialize ESLint configuration:\n```bash\nnpx eslint --init\n```\n\n3. Choose your preferred configuration options (e.g., JavaScript modules, React, etc.).\n\n4. Add ESLint script to `package.json`:\n```json\n\"scripts\": {\n  \"lint\": \"eslint .\"\n}\n```\n\n5. Run ESLint to check your project:\n```bash\nnpm run lint\n```\n\n📚 Reference: https://eslint.org/docs/user-guide/getting-started"
    },
    {
        "question": "How to use TypeScript in a Node.js project?",
        "label": "backend,typescript,nodejs,setup",
        "language": "en",
        "context": "TypeScript is a typed superset of JavaScript that compiles to plain JavaScript, offering type safety and better tooling support.",
        "answer": "Steps to use TypeScript in a Node.js project:\n\n1. Install TypeScript and types for Node.js:\n```bash\nnpm install typescript @types/node --save-dev\n```\n\n2. Create a `tsconfig.json` file:\n```bash\nnpx tsc --init\n```\n\n3. Update `tsconfig.json` to include Node.js types:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"./src/**/*.ts\"]\n}\n```\n\n4. Write your TypeScript code in `.ts` files in the `src` directory.\n\n5. Compile TypeScript to JavaScript:\n```bash\nnpx tsc\n```\n\n6. Run the compiled JavaScript code:\n```bash\nnode dist/app.js\n```\n\n📚 Reference: https://www.typescriptlang.org/docs/",
        "start_char": 0,
        "end_char": 741,
        "key_answer": "Steps to use TypeScript in a Node.js project:\n\n1. Install TypeScript and types for Node.js:\n```bash\nnpm install typescript @types/node --save-dev\n```\n\n2. Create a `tsconfig.json` file:\n```bash\nnpx tsc --init\n```\n\n3. Update `tsconfig.json` to include Node.js types:\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"ES6\",\n    \"module\": \"commonjs\",\n    \"esModuleInterop\": true,\n    \"outDir\": \"./dist\"\n  },\n  \"include\": [\"./src/**/*.ts\"]\n}\n```\n\n4. Write your TypeScript code in `.ts` files in the `src` directory.\n\n5. Compile TypeScript to JavaScript:\n```bash\nnpx tsc\n```\n\n6. Run the compiled JavaScript code:\n```bash\nnode dist/app.js\n```\n\n📚 Reference: https://www.typescriptlang.org/docs/"
    },
    {
        "question": "How to use the Fetch API in JavaScript?",
        "label": "frontend,js,fetch,api",
        "language": "en",
        "context": "The Fetch API provides an easy-to-use interface for making HTTP requests in JavaScript.",
        "answer": "Steps to use the Fetch API in JavaScript:\n\n1. Make a simple GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
        "start_char": 0,
        "end_char": 707,
        "key_answer": "Steps to use the Fetch API in JavaScript:\n\n1. Make a simple GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n2. Make a POST request with data:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ key: 'value' })\n})\n  .then((response) => response.json())\n  .then((data) => console.log(data))\n  .catch((error) => console.error('Error:', error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
    },
    {
        "question": "How to set up a PostgreSQL database in Docker?",
        "label": "devops,docker,postgresql,setup",
        "language": "en",
        "context": "PostgreSQL is an open-source relational database management system. Docker allows you to containerize applications, including databases like PostgreSQL.",
        "answer": "Steps to set up PostgreSQL in Docker:\n\n1. Pull the PostgreSQL image from Docker Hub:\n```bash\ndocker pull postgres\n```\n\n2. Run the PostgreSQL container:\n```bash\ndocker run --name postgres-container -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```\n\n3. Connect to PostgreSQL from your local machine:\n```bash\ndocker exec -it postgres-container psql -U postgres\n```\n\n4. To connect from a Node.js application, use the `pg` package:\n```bash\nnpm install pg\n```\n\n5. Example connection code:\n```javascript\nconst { Client } = require('pg');\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'postgres',\n  password: 'mysecretpassword',\n  port: 5432\n});\nclient.connect();\n```\n\n📚 Reference: https://hub.docker.com/_/postgres",
        "start_char": 0,
        "end_char": 781,
        "key_answer": "Steps to set up PostgreSQL in Docker:\n\n1. Pull the PostgreSQL image from Docker Hub:\n```bash\ndocker pull postgres\n```\n\n2. Run the PostgreSQL container:\n```bash\ndocker run --name postgres-container -e POSTGRES_PASSWORD=mysecretpassword -d postgres\n```\n\n3. Connect to PostgreSQL from your local machine:\n```bash\ndocker exec -it postgres-container psql -U postgres\n```\n\n4. To connect from a Node.js application, use the `pg` package:\n```bash\nnpm install pg\n```\n\n5. Example connection code:\n```javascript\nconst { Client } = require('pg');\nconst client = new Client({\n  user: 'postgres',\n  host: 'localhost',\n  database: 'postgres',\n  password: 'mysecretpassword',\n  port: 5432\n});\nclient.connect();\n```\n\n📚 Reference: https://hub.docker.com/_/postgres"
    },
    {
        "question": "How to deploy a React app on AWS S3?",
        "label": "frontend,react,aws,s3,deployment",
        "language": "en",
        "context": "AWS S3 (Simple Storage Service) is an object storage service that can host static websites, including React apps.",
        "answer": "Steps to deploy a React app on AWS S3:\n\n1. Build your React app:\n```bash\nnpm run build\n```\n\n2. Create an S3 bucket in AWS Management Console.\n\n3. Upload the contents of the `build` folder to the S3 bucket.\n\n4. Configure the bucket for static website hosting in the bucket properties.\n\n5. Set the index document (e.g., `index.html`) and error document (e.g., `index.html`).\n\n6. Make the bucket public by adjusting the permissions.\n\n7. Access your app using the S3 bucket URL or configure a custom domain.\n\n📚 Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html",
        "start_char": 0,
        "end_char": 610,
        "key_answer": "Steps to deploy a React app on AWS S3:\n\n1. Build your React app:\n```bash\nnpm run build\n```\n\n2. Create an S3 bucket in AWS Management Console.\n\n3. Upload the contents of the `build` folder to the S3 bucket.\n\n4. Configure the bucket for static website hosting in the bucket properties.\n\n5. Set the index document (e.g., `index.html`) and error document (e.g., `index.html`).\n\n6. Make the bucket public by adjusting the permissions.\n\n7. Access your app using the S3 bucket URL or configure a custom domain.\n\n📚 Reference: https://docs.aws.amazon.com/AmazonS3/latest/userguide/WebsiteHosting.html"
    },
    {
        "question": "How to set up a MongoDB database in Docker?",
        "label": "devops,docker,mongodb,setup",
        "language": "en",
        "context": "MongoDB is a NoSQL database, and Docker allows you to quickly set it up in a containerized environment.",
        "answer": "Steps to set up MongoDB in Docker:\n\n1. Pull the MongoDB image from Docker Hub:\n```bash\ndocker pull mongo\n```\n\n2. Run the MongoDB container:\n```bash\ndocker run --name mongodb -d -p 27017:27017 mongo\n```\n\n3. Connect to MongoDB from your local machine:\n```bash\ndocker exec -it mongodb mongo\n```\n\n4. To connect from a Node.js application, use the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n5. Example connection code:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n📚 Reference: https://hub.docker.com/_/mongo",
        "start_char": 0,
        "end_char": 658,
        "key_answer": "Steps to set up MongoDB in Docker:\n\n1. Pull the MongoDB image from Docker Hub:\n```bash\ndocker pull mongo\n```\n\n2. Run the MongoDB container:\n```bash\ndocker run --name mongodb -d -p 27017:27017 mongo\n```\n\n3. Connect to MongoDB from your local machine:\n```bash\ndocker exec -it mongodb mongo\n```\n\n4. To connect from a Node.js application, use the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n5. Example connection code:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n📚 Reference: https://hub.docker.com/_/mongo"
    },
    {
        "question": "How to use Axios to make HTTP requests in JavaScript?",
        "label": "frontend,axios,http-requests,js",
        "language": "en",
        "context": "Axios is a promise-based HTTP client for JavaScript, used for making requests from both the browser and Node.js.",
        "answer": "Steps to use Axios for HTTP requests in JavaScript:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make a GET request:\n```javascript\nimport axios from 'axios';\n\naxios.get('https://api.example.com/data')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n3. Make a POST request with data:\n```javascript\naxios.post('https://api.example.com/data', { key: 'value' })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n📚 Reference: https://axios-http.com/docs/intro",
        "start_char": 0,
        "end_char": 627,
        "key_answer": "Steps to use Axios for HTTP requests in JavaScript:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make a GET request:\n```javascript\nimport axios from 'axios';\n\naxios.get('https://api.example.com/data')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n3. Make a POST request with data:\n```javascript\naxios.post('https://api.example.com/data', { key: 'value' })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n\n📚 Reference: https://axios-http.com/docs/intro"
    },
    {
        "question": "How to use the async/await pattern in JavaScript?",
        "label": "frontend,js,async-await,promises",
        "language": "en",
        "context": "The async/await pattern is used to simplify working with promises in JavaScript, making asynchronous code easier to read and write.",
        "answer": "Steps to use async/await in JavaScript:\n\n1. Create an async function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the async function:\n```javascript\nfetchData();\n```\n\n3. Use try/catch for error handling:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 720,
        "key_answer": "Steps to use async/await in JavaScript:\n\n1. Create an async function:\n```javascript\nasync function fetchData() {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the async function:\n```javascript\nfetchData();\n```\n\n3. Use try/catch for error handling:\n```javascript\nasync function fetchData() {\n  try {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    console.log(data);\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to use the map function in JavaScript?",
        "label": "frontend,js,arrays,map",
        "language": "en",
        "context": "The map function in JavaScript allows you to iterate over an array and apply a function to each element, returning a new array.",
        "answer": "Steps to use the map function in JavaScript:\n\n1. Define an array:\n```javascript\nconst numbers = [1, 2, 3, 4];\n```\n\n2. Use map to create a new array:\n```javascript\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6, 8]\n```\n\n3. Use map with objects:\n```javascript\nconst users = [{ name: 'John' }, { name: 'Jane' }];\nconst names = users.map(user => user.name);\nconsole.log(names); // ['John', 'Jane']\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map",
        "start_char": 0,
        "end_char": 554,
        "key_answer": "Steps to use the map function in JavaScript:\n\n1. Define an array:\n```javascript\nconst numbers = [1, 2, 3, 4];\n```\n\n2. Use map to create a new array:\n```javascript\nconst doubled = numbers.map(num => num * 2);\nconsole.log(doubled); // [2, 4, 6, 8]\n```\n\n3. Use map with objects:\n```javascript\nconst users = [{ name: 'John' }, { name: 'Jane' }];\nconst names = users.map(user => user.name);\nconsole.log(names); // ['John', 'Jane']\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
    },
    {
        "question": "How to use localStorage in JavaScript?",
        "label": "frontend,js,localStorage",
        "language": "en",
        "context": "localStorage is a web API that allows you to store data persistently in the browser.",
        "answer": "Steps to use localStorage in JavaScript:\n\n1. Save data to localStorage:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve data from localStorage:\n```javascript\nconst value = localStorage.getItem('key');\nconsole.log(value); // 'value'\n```\n\n3. Remove data from localStorage:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all data from localStorage:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
        "start_char": 0,
        "end_char": 525,
        "key_answer": "Steps to use localStorage in JavaScript:\n\n1. Save data to localStorage:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve data from localStorage:\n```javascript\nconst value = localStorage.getItem('key');\nconsole.log(value); // 'value'\n```\n\n3. Remove data from localStorage:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all data from localStorage:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    },
    {
        "question": "How to use Redux with React?",
        "label": "frontend,react,redux,state-management",
        "language": "en",
        "context": "Redux is a state management library often used with React to manage global application state.",
        "answer": "Steps to use Redux with React:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Set up the React app with the Redux provider:\n```javascript\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      {/* Your components */}\n    </Provider>\n  );\n}\n```\n\n4. Dispatch actions and connect components to the store:\n```javascript\nimport { useDispatch } from 'react-redux';\n\nconst setUser = (user) => ({ type: 'SET_USER', payload: user });\n\nconst MyComponent = () => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(setUser({ name: 'John Doe' }));\n  };\n\n  return <button onClick={handleClick}>Set User</button>;\n};\n```\n\n📚 Reference: https://react-redux.js.org/introduction/quick-start",
        "start_char": 0,
        "end_char": 1132,
        "key_answer": "Steps to use Redux with React:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Set up the React app with the Redux provider:\n```javascript\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      {/* Your components */}\n    </Provider>\n  );\n}\n```\n\n4. Dispatch actions and connect components to the store:\n```javascript\nimport { useDispatch } from 'react-redux';\n\nconst setUser = (user) => ({ type: 'SET_USER', payload: user });\n\nconst MyComponent = () => {\n  const dispatch = useDispatch();\n\n  const handleClick = () => {\n    dispatch(setUser({ name: 'John Doe' }));\n  };\n\n  return <button onClick={handleClick}>Set User</button>;\n};\n```\n\n📚 Reference: https://react-redux.js.org/introduction/quick-start"
    },
    {
        "question": "How to set up a Node.js server with HTTPS?",
        "label": "backend,nodejs,https,security",
        "language": "en",
        "context": "Setting up an HTTPS server ensures secure communication by encrypting data between the server and the client.",
        "answer": "Steps to set up a Node.js server with HTTPS:\n\n1. Install the `https` module:\n```bash\nnpm install https\n```\n\n2. Generate SSL certificates using OpenSSL:\n```bash\nopenssl genpkey -algorithm RSA -out private-key.pem\nopenssl req -new -key private-key.pem -out csr.pem\nopenssl x509 -req -in csr.pem -signkey private-key.pem -out certificate.pem\n```\n\n3. Set up the HTTPS server in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private-key.pem'),\n  cert: fs.readFileSync('certificate.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello, HTTPS World!');\n}).listen(443);\n```\n\n4. Ensure port 443 is open and accessible.\n\n📚 Reference: https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-an-HTTPS-server/",
        "start_char": 0,
        "end_char": 849,
        "key_answer": "Steps to set up a Node.js server with HTTPS:\n\n1. Install the `https` module:\n```bash\nnpm install https\n```\n\n2. Generate SSL certificates using OpenSSL:\n```bash\nopenssl genpkey -algorithm RSA -out private-key.pem\nopenssl req -new -key private-key.pem -out csr.pem\nopenssl x509 -req -in csr.pem -signkey private-key.pem -out certificate.pem\n```\n\n3. Set up the HTTPS server in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private-key.pem'),\n  cert: fs.readFileSync('certificate.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello, HTTPS World!');\n}).listen(443);\n```\n\n4. Ensure port 443 is open and accessible.\n\n📚 Reference: https://nodejs.org/en/knowledge/HTTP/servers/how-to-create-an-HTTPS-server/"
    },
    {
        "question": "How to use Git to version control a project?",
        "label": "devops,git,version-control",
        "language": "en",
        "context": "Git is a version control system that tracks changes in code and facilitates collaboration in development teams.",
        "answer": "Steps to use Git for version control:\n\n1. Initialize a Git repository:\n```bash\ngit init\n```\n\n2. Add files to the staging area:\n```bash\ngit add .\n```\n\n3. Commit changes to the repository:\n```bash\ngit commit -m 'Initial commit'\n```\n\n4. Create a remote repository (e.g., on GitHub) and link it to your local repository:\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\n```\n\n5. Push changes to the remote repository:\n```bash\ngit push -u origin master\n```\n\n6. Pull updates from the remote repository:\n```bash\ngit pull\n```\n\n📚 Reference: https://git-scm.com/book/en/v2",
        "start_char": 0,
        "end_char": 619,
        "key_answer": "Steps to use Git for version control:\n\n1. Initialize a Git repository:\n```bash\ngit init\n```\n\n2. Add files to the staging area:\n```bash\ngit add .\n```\n\n3. Commit changes to the repository:\n```bash\ngit commit -m 'Initial commit'\n```\n\n4. Create a remote repository (e.g., on GitHub) and link it to your local repository:\n```bash\ngit remote add origin https://github.com/yourusername/yourrepo.git\n```\n\n5. Push changes to the remote repository:\n```bash\ngit push -u origin master\n```\n\n6. Pull updates from the remote repository:\n```bash\ngit pull\n```\n\n📚 Reference: https://git-scm.com/book/en/v2"
    },
    {
        "question": "How to create a virtual environment in Python?",
        "label": "python,virtual-environment",
        "language": "en",
        "context": "A virtual environment is a tool to isolate dependencies for Python projects, ensuring that libraries are installed per project rather than globally.",
        "answer": "Steps to create a virtual environment in Python:\n\n1. Install `virtualenv`:\n```bash\npip install virtualenv\n```\n\n2. Create a virtual environment:\n```bash\nvirtualenv venv\n```\n\n3. Activate the virtual environment:\n- On Windows:\n```bash\nvenv\\Scripts\\activate\n```\n- On macOS/Linux:\n```bash\nsource venv/bin/activate\n```\n\n4. Install dependencies within the virtual environment:\n```bash\npip install <package_name>\n```\n\n5. Deactivate the virtual environment when done:\n```bash\ndeactivate\n```\n\n📚 Reference: https://docs.python.org/3/library/venv.html",
        "start_char": 0,
        "end_char": 573,
        "key_answer": "Steps to create a virtual environment in Python:\n\n1. Install `virtualenv`:\n```bash\npip install virtualenv\n```\n\n2. Create a virtual environment:\n```bash\nvirtualenv venv\n```\n\n3. Activate the virtual environment:\n- On Windows:\n```bash\nvenv\\Scripts\\activate\n```\n- On macOS/Linux:\n```bash\nsource venv/bin/activate\n```\n\n4. Install dependencies within the virtual environment:\n```bash\npip install <package_name>\n```\n\n5. Deactivate the virtual environment when done:\n```bash\ndeactivate\n```\n\n📚 Reference: https://docs.python.org/3/library/venv.html"
    },
    {
        "question": "How to configure CORS in a Node.js Express app?",
        "label": "backend,nodejs,express,cors",
        "language": "en",
        "context": "CORS (Cross-Origin Resource Sharing) allows a web application to make requests to a server in a different domain.",
        "answer": "Steps to configure CORS in an Express app:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n\n2. Import and use CORS middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\n\napp.get('/data', (req, res) => {\n  res.json({ message: 'Hello, world!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. To restrict the allowed origins, pass an options object:\n```javascript\napp.use(cors({ origin: 'https://yourdomain.com' }));\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html",
        "start_char": 0,
        "end_char": 671,
        "key_answer": "Steps to configure CORS in an Express app:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n\n2. Import and use CORS middleware in your Express app:\n```javascript\nconst express = require('express');\nconst cors = require('cors');\n\nconst app = express();\napp.use(cors());\n\napp.get('/data', (req, res) => {\n  res.json({ message: 'Hello, world!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. To restrict the allowed origins, pass an options object:\n```javascript\napp.use(cors({ origin: 'https://yourdomain.com' }));\n```\n\n📚 Reference: https://expressjs.com/en/resources/middleware/cors.html"
    },
    {
        "question": "How to implement JWT (JSON Web Tokens) in Node.js?",
        "label": "backend,nodejs,jwt,security",
        "language": "en",
        "context": "JWT is a compact, URL-safe means of representing claims to be transferred between two parties, used widely for authentication in web applications.",
        "answer": "Steps to implement JWT in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create and sign a token on successful login:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst token = jwt.sign({ userId: 1 }, 'your-secret-key', { expiresIn: '1h' });\n\nres.json({ token });\n```\n\n3. Verify the token for protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!token) return res.status(403).send('Token required');\n\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Invalid token');\n    req.userId = decoded.userId;\n    next();\n  });\n};\n```\n\n4. Protect routes using middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('Protected content');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs",
        "start_char": 0,
        "end_char": 975,
        "key_answer": "Steps to implement JWT in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create and sign a token on successful login:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst token = jwt.sign({ userId: 1 }, 'your-secret-key', { expiresIn: '1h' });\n\nres.json({ token });\n```\n\n3. Verify the token for protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization']?.split(' ')[1];\n  if (!token) return res.status(403).send('Token required');\n\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Invalid token');\n    req.userId = decoded.userId;\n    next();\n  });\n};\n```\n\n4. Protect routes using middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('Protected content');\n});\n```\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-expressjs"
    },
    {
        "question": "How to use Python to scrape data from a website?",
        "label": "python,web-scraping,beautifulsoup",
        "language": "en",
        "context": "Web scraping is the process of extracting data from websites. Python provides tools like BeautifulSoup and Requests for this task.",
        "answer": "Steps to scrape data using Python:\n\n1. Install the necessary packages:\n```bash\npip install requests beautifulsoup4\n```\n\n2. Send a GET request to the website:\n```python\nimport requests\n\nresponse = requests.get('https://example.com')\n```\n\n3. Parse the HTML content using BeautifulSoup:\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n```\n\n4. Extract the desired data:\n```python\ntitle = soup.title.text\nprint(title)\n```\n\n📚 Reference: https://realpython.com/beautiful-soup-web-scraper-python/",
        "start_char": 0,
        "end_char": 559,
        "key_answer": "Steps to scrape data using Python:\n\n1. Install the necessary packages:\n```bash\npip install requests beautifulsoup4\n```\n\n2. Send a GET request to the website:\n```python\nimport requests\n\nresponse = requests.get('https://example.com')\n```\n\n3. Parse the HTML content using BeautifulSoup:\n```python\nfrom bs4 import BeautifulSoup\n\nsoup = BeautifulSoup(response.text, 'html.parser')\n```\n\n4. Extract the desired data:\n```python\ntitle = soup.title.text\nprint(title)\n```\n\n📚 Reference: https://realpython.com/beautiful-soup-web-scraper-python/"
    },
    {
        "question": "How to deploy a Flask app on Heroku?",
        "label": "backend,flask,heroku,deployment",
        "language": "en",
        "context": "Flask is a lightweight web framework for Python. You can deploy Flask apps on Heroku, a platform for hosting applications.",
        "answer": "Steps to deploy a Flask app on Heroku:\n\n1. Install the necessary dependencies:\n```bash\npip install flask gunicorn\n```\n\n2. Create a `Procfile` to specify the startup command:\n```\nweb: gunicorn app:app\n```\n\n3. Create a `requirements.txt` file with the project dependencies:\n```bash\npip freeze > requirements.txt\n```\n\n4. Initialize a Git repository and deploy to Heroku:\n```bash\ngit init\nheroku create\ngit push heroku master\n```\n\n5. Access your app using the Heroku app URL.\n\n📚 Reference: https://devcenter.heroku.com/articles/getting-started-with-python",
        "start_char": 0,
        "end_char": 577,
        "key_answer": "Steps to deploy a Flask app on Heroku:\n\n1. Install the necessary dependencies:\n```bash\npip install flask gunicorn\n```\n\n2. Create a `Procfile` to specify the startup command:\n```\nweb: gunicorn app:app\n```\n\n3. Create a `requirements.txt` file with the project dependencies:\n```bash\npip freeze > requirements.txt\n```\n\n4. Initialize a Git repository and deploy to Heroku:\n```bash\ngit init\nheroku create\ngit push heroku master\n```\n\n5. Access your app using the Heroku app URL.\n\n📚 Reference: https://devcenter.heroku.com/articles/getting-started-with-python"
    },
    {
        "question": "How to create a RESTful API in Node.js?",
        "label": "backend,nodejs,restful-api",
        "language": "en",
        "context": "A RESTful API is an architectural style for building APIs that adhere to HTTP methods like GET, POST, PUT, and DELETE.",
        "answer": "Steps to create a RESTful API in Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Set up a basic Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello, API!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Add routes for CRUD operations:\n```javascript\napp.post('/api', (req, res) => {\n  res.json({ message: 'Create operation' });\n});\n\napp.put('/api/:id', (req, res) => {\n  res.json({ message: 'Update operation' });\n});\n\napp.delete('/api/:id', (req, res) => {\n  res.json({ message: 'Delete operation' });\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 769,
        "key_answer": "Steps to create a RESTful API in Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Set up a basic Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello, API!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n3. Add routes for CRUD operations:\n```javascript\napp.post('/api', (req, res) => {\n  res.json({ message: 'Create operation' });\n});\n\napp.put('/api/:id', (req, res) => {\n  res.json({ message: 'Update operation' });\n});\n\napp.delete('/api/:id', (req, res) => {\n  res.json({ message: 'Delete operation' });\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to create a custom exception in Python?",
        "label": "python,exception,custom-exception",
        "language": "en",
        "context": "In Python, you can define your own exceptions by creating a new class that inherits from the built-in `Exception` class.",
        "answer": "Steps to create a custom exception in Python:\n\n1. Define the custom exception class by inheriting from `Exception`:\n```python\nclass CustomError(Exception):\n  pass\n```\n\n2. Raise the custom exception in your code:\n```python\nraise CustomError('This is a custom error')\n```\n\n3. Handle the custom exception using `try-except` block:\n```python\ntry:\n  raise CustomError('This is a custom error')\nexcept CustomError as e:\n  print(f'Caught error: {e}')\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/errors.html",
        "start_char": 0,
        "end_char": 529,
        "key_answer": "Steps to create a custom exception in Python:\n\n1. Define the custom exception class by inheriting from `Exception`:\n```python\nclass CustomError(Exception):\n  pass\n```\n\n2. Raise the custom exception in your code:\n```python\nraise CustomError('This is a custom error')\n```\n\n3. Handle the custom exception using `try-except` block:\n```python\ntry:\n  raise CustomError('This is a custom error')\nexcept CustomError as e:\n  print(f'Caught error: {e}')\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/errors.html"
    },
    {
        "question": "How to run a SQL query in Python?",
        "label": "python,sql,sqlite",
        "language": "en",
        "context": "Python can interact with databases using libraries like SQLite, which allows running SQL queries directly.",
        "answer": "Steps to run a SQL query in Python:\n\n1. Import the SQLite library and connect to the database:\n```python\nimport sqlite3\nconn = sqlite3.connect('database.db')\n```\n\n2. Create a cursor object to execute SQL queries:\n```python\ncursor = conn.cursor()\n```\n\n3. Execute a SQL query:\n```python\ncursor.execute('SELECT * FROM table_name')\n```\n\n4. Fetch the results of the query:\n```python\nresults = cursor.fetchall()\nfor row in results:\n  print(row)\n```\n\n5. Commit and close the connection:\n```python\nconn.commit()\nconn.close()\n```\n\n📚 Reference: https://docs.python.org/3/library/sqlite3.html",
        "start_char": 0,
        "end_char": 612,
        "key_answer": "Steps to run a SQL query in Python:\n\n1. Import the SQLite library and connect to the database:\n```python\nimport sqlite3\nconn = sqlite3.connect('database.db')\n```\n\n2. Create a cursor object to execute SQL queries:\n```python\ncursor = conn.cursor()\n```\n\n3. Execute a SQL query:\n```python\ncursor.execute('SELECT * FROM table_name')\n```\n\n4. Fetch the results of the query:\n```python\nresults = cursor.fetchall()\nfor row in results:\n  print(row)\n```\n\n5. Commit and close the connection:\n```python\nconn.commit()\nconn.close()\n```\n\n📚 Reference: https://docs.python.org/3/library/sqlite3.html"
    },
    {
        "question": "How to handle exceptions in Node.js?",
        "label": "nodejs,exception,errors",
        "language": "en",
        "context": "In Node.js, you can handle errors using `try-catch` blocks or handling error events on asynchronous operations.",
        "answer": "Steps to handle exceptions in Node.js:\n\n1. Use `try-catch` for synchronous errors:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n2. Handle asynchronous errors using callback pattern:\n```javascript\nfs.readFile('nonexistent_file.txt', (err, data) => {\n  if (err) {\n    console.error(err.message);\n  }\n  else {\n    console.log(data);\n  }\n});\n```\n\n3. Use `process.on('uncaughtException')` for unhandled errors:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err.message);\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/",
        "start_char": 0,
        "end_char": 698,
        "key_answer": "Steps to handle exceptions in Node.js:\n\n1. Use `try-catch` for synchronous errors:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n2. Handle asynchronous errors using callback pattern:\n```javascript\nfs.readFile('nonexistent_file.txt', (err, data) => {\n  if (err) {\n    console.error(err.message);\n  }\n  else {\n    console.log(data);\n  }\n});\n```\n\n3. Use `process.on('uncaughtException')` for unhandled errors:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err.message);\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/"
    },
    {
        "question": "How to use `Promise` in JavaScript?",
        "label": "javascript,promise,async",
        "language": "en",
        "context": "A `Promise` in JavaScript is an object representing the eventual completion or failure of an asynchronous operation.",
        "answer": "Steps to use `Promise` in JavaScript:\n\n1. Create a new Promise:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Operation successful');\n  } else {\n    reject('Operation failed');\n  }\n});\n```\n\n2. Handle the result of the Promise:\n```javascript\npromise.then((result) => {\n  console.log(result);\n}).catch((error) => {\n  console.error(error);\n});\n```\n\n3. Use `async-await` to handle Promises in a more readable way:\n```javascript\nasync function example() {\n  try {\n    let result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\nexample();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 790,
        "key_answer": "Steps to use `Promise` in JavaScript:\n\n1. Create a new Promise:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Operation successful');\n  } else {\n    reject('Operation failed');\n  }\n});\n```\n\n2. Handle the result of the Promise:\n```javascript\npromise.then((result) => {\n  console.log(result);\n}).catch((error) => {\n  console.error(error);\n});\n```\n\n3. Use `async-await` to handle Promises in a more readable way:\n```javascript\nasync function example() {\n  try {\n    let result = await promise;\n    console.log(result);\n  } catch (error) {\n    console.error(error);\n  }\n}\nexample();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "How to use `localStorage` in JavaScript?",
        "label": "javascript,web-storage,localStorage",
        "language": "en",
        "context": "`localStorage` allows web applications to store data in the user's browser persistently.",
        "answer": "Steps to use `localStorage` in JavaScript:\n\n1. Store data in `localStorage`:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve data from `localStorage`:\n```javascript\nlet value = localStorage.getItem('key');\nconsole.log(value);\n```\n\n3. Remove data from `localStorage`:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all data from `localStorage`:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
        "start_char": 0,
        "end_char": 523,
        "key_answer": "Steps to use `localStorage` in JavaScript:\n\n1. Store data in `localStorage`:\n```javascript\nlocalStorage.setItem('key', 'value');\n```\n\n2. Retrieve data from `localStorage`:\n```javascript\nlet value = localStorage.getItem('key');\nconsole.log(value);\n```\n\n3. Remove data from `localStorage`:\n```javascript\nlocalStorage.removeItem('key');\n```\n\n4. Clear all data from `localStorage`:\n```javascript\nlocalStorage.clear();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    },
    {
        "question": "How to sort an array in JavaScript?",
        "label": "javascript,array,sorting",
        "language": "en",
        "context": "Sorting an array in JavaScript is done using the `sort` method, which can sort numbers, strings, or custom objects.",
        "answer": "Steps to sort an array in JavaScript:\n\n1. Sort an array of numbers:\n```javascript\nlet numbers = [5, 2, 9, 1, 5, 6];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers); // [1, 2, 5, 5, 6, 9]\n```\n\n2. Sort an array of strings:\n```javascript\nlet strings = ['banana', 'apple', 'cherry'];\nstrings.sort();\nconsole.log(strings); // ['apple', 'banana', 'cherry']\n```\n\n3. Sort an array of objects by a property:\n```javascript\nlet people = [{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}];\npeople.sort((a, b) => a.name.localeCompare(b.name));\nconsole.log(people);\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort",
        "start_char": 0,
        "end_char": 689,
        "key_answer": "Steps to sort an array in JavaScript:\n\n1. Sort an array of numbers:\n```javascript\nlet numbers = [5, 2, 9, 1, 5, 6];\nnumbers.sort((a, b) => a - b);\nconsole.log(numbers); // [1, 2, 5, 5, 6, 9]\n```\n\n2. Sort an array of strings:\n```javascript\nlet strings = ['banana', 'apple', 'cherry'];\nstrings.sort();\nconsole.log(strings); // ['apple', 'banana', 'cherry']\n```\n\n3. Sort an array of objects by a property:\n```javascript\nlet people = [{name: 'Alice'}, {name: 'Bob'}, {name: 'Charlie'}];\npeople.sort((a, b) => a.name.localeCompare(b.name));\nconsole.log(people);\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"
    },
    {
        "question": "How to implement inheritance in Python?",
        "label": "python,oop,inheritance",
        "language": "en",
        "context": "Inheritance allows one class to inherit the attributes and methods from another class, facilitating code reuse in object-oriented programming.",
        "answer": "Steps to implement inheritance in Python:\n\n1. Define a base (parent) class:\n```python\nclass Animal:\n  def speak(self):\n    print('Animal makes a sound')\n```\n\n2. Define a subclass (child) class that inherits from the parent class:\n```python\nclass Dog(Animal):\n  def speak(self):\n    print('Woof')\n```\n\n3. Create an instance of the child class:\n```python\ndog = Dog()\n```\n\n4. Call the inherited method:\n```python\ndog.speak()  # Output: Woof\n```\n\n📚 Reference: https://realpython.com/python-inheritance/",
        "start_char": 0,
        "end_char": 524,
        "key_answer": "Steps to implement inheritance in Python:\n\n1. Define a base (parent) class:\n```python\nclass Animal:\n  def speak(self):\n    print('Animal makes a sound')\n```\n\n2. Define a subclass (child) class that inherits from the parent class:\n```python\nclass Dog(Animal):\n  def speak(self):\n    print('Woof')\n```\n\n3. Create an instance of the child class:\n```python\ndog = Dog()\n```\n\n4. Call the inherited method:\n```python\ndog.speak()  # Output: Woof\n```\n\n📚 Reference: https://realpython.com/python-inheritance/"
    },
    {
        "question": "How to send an HTTP request in JavaScript?",
        "label": "javascript,http,request",
        "language": "en",
        "context": "In JavaScript, you can send HTTP requests using the `fetch()` API or older methods like `XMLHttpRequest`.",
        "answer": "Steps to send an HTTP request in JavaScript:\n\n1. Use `fetch()` to send a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error))\n```\n\n2. Send a POST request with JSON data:\n```javascript\nfetch('https://api.example.com/submit', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({name: 'John', age: 30})\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error))\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch",
        "start_char": 0,
        "end_char": 720,
        "key_answer": "Steps to send an HTTP request in JavaScript:\n\n1. Use `fetch()` to send a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error))\n```\n\n2. Send a POST request with JSON data:\n```javascript\nfetch('https://api.example.com/submit', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({name: 'John', age: 30})\n})\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.error('Error:', error))\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch"
    },
    {
        "question": "How to implement error handling in JavaScript?",
        "label": "javascript,errors,exception",
        "language": "en",
        "context": "In JavaScript, error handling is done using `try-catch` blocks or by listening to error events.",
        "answer": "Steps to implement error handling in JavaScript:\n\n1. Use `try-catch` for synchronous errors:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n2. Handle errors in asynchronous code with `try-catch` inside an `async` function:\n```javascript\nasync function fetchData() {\n  try {\n    let response = await fetch('https://api.example.com/data');\n    let data = await response.json();\n    console.log(data);\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n```\n\n3. Listen to error events for Node.js apps:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err.message);\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch",
        "start_char": 0,
        "end_char": 824,
        "key_answer": "Steps to implement error handling in JavaScript:\n\n1. Use `try-catch` for synchronous errors:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n\n2. Handle errors in asynchronous code with `try-catch` inside an `async` function:\n```javascript\nasync function fetchData() {\n  try {\n    let response = await fetch('https://api.example.com/data');\n    let data = await response.json();\n    console.log(data);\n  } catch (err) {\n    console.error(err.message);\n  }\n}\n```\n\n3. Listen to error events for Node.js apps:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception:', err.message);\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/try...catch"
    },
    {
        "question": "What is the difference between `let` and `var` in JavaScript?",
        "label": "javascript,let,var,variables",
        "language": "en",
        "context": "`let` and `var` are both used to declare variables, but they have different scoping rules.",
        "answer": "Difference between `let` and `var`:\n\n1. `let` has block-level scope, while `var` has function-level scope.\n2. `let` cannot be redeclared within the same scope, while `var` can.\n3. `let` is hoisted but not initialized, whereas `var` is hoisted and initialized to `undefined`.\n\nExample with `let`:\n```javascript\nlet x = 10;\nif (true) {\n  let x = 20;\n  console.log(x);  // Output: 20\n}\nconsole.log(x);  // Output: 10\n```\n\nExample with `var`:\n```javascript\nvar x = 10;\nif (true) {\n  var x = 20;\n  console.log(x);  // Output: 20\n}\nconsole.log(x);  // Output: 20\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
        "start_char": 0,
        "end_char": 681,
        "key_answer": "Difference between `let` and `var`:\n\n1. `let` has block-level scope, while `var` has function-level scope.\n2. `let` cannot be redeclared within the same scope, while `var` can.\n3. `let` is hoisted but not initialized, whereas `var` is hoisted and initialized to `undefined`.\n\nExample with `let`:\n```javascript\nlet x = 10;\nif (true) {\n  let x = 20;\n  console.log(x);  // Output: 20\n}\nconsole.log(x);  // Output: 10\n```\n\nExample with `var`:\n```javascript\nvar x = 10;\nif (true) {\n  var x = 20;\n  console.log(x);  // Output: 20\n}\nconsole.log(x);  // Output: 20\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"
    },
    {
        "question": "What are Promises in JavaScript?",
        "label": "javascript,promises,async",
        "language": "en",
        "context": "Promises in JavaScript represent the eventual completion or failure of an asynchronous operation and its resulting value.",
        "answer": "Steps to use Promises in JavaScript:\n\n1. Create a new Promise:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Task completed');\n  } else {\n    reject('Task failed');\n  }\n});\n```\n\n2. Handle resolved or rejected Promise:\n```javascript\npromise.then((message) => {\n  console.log(message);  // Output: Task completed\n}).catch((message) => {\n  console.log(message);\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 561,
        "key_answer": "Steps to use Promises in JavaScript:\n\n1. Create a new Promise:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Task completed');\n  } else {\n    reject('Task failed');\n  }\n});\n```\n\n2. Handle resolved or rejected Promise:\n```javascript\npromise.then((message) => {\n  console.log(message);  // Output: Task completed\n}).catch((message) => {\n  console.log(message);\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "What is the purpose of `async` and `await` in JavaScript?",
        "label": "javascript,async,await,asynchronous",
        "language": "en",
        "context": "`async` and `await` are used to handle asynchronous code in a more synchronous manner, making it easier to write and read.",
        "answer": "Steps to use `async` and `await` in JavaScript:\n\n1. Define an `async` function:\n```javascript\nasync function fetchData() {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the `async` function:\n```javascript\nfetchData();\n```\n\n3. `await` is used to wait for the promise to resolve before continuing:\n```javascript\nlet data = await fetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 558,
        "key_answer": "Steps to use `async` and `await` in JavaScript:\n\n1. Define an `async` function:\n```javascript\nasync function fetchData() {\n  let response = await fetch('https://api.example.com/data');\n  let data = await response.json();\n  console.log(data);\n}\n```\n\n2. Call the `async` function:\n```javascript\nfetchData();\n```\n\n3. `await` is used to wait for the promise to resolve before continuing:\n```javascript\nlet data = await fetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to handle exceptions in Python?",
        "label": "python,exception,error-handling",
        "language": "en",
        "context": "Python provides a built-in mechanism for handling exceptions with `try`, `except`, `else`, and `finally` blocks.",
        "answer": "Steps to handle exceptions in Python:\n\n1. Use `try-except` to handle errors:\n```python\ntry:\n  x = 10 / 0\nexcept ZeroDivisionError as e:\n  print('Error:', e)\n```\n\n2. Use `else` to execute code when no error occurs:\n```python\ntry:\n  x = 10 / 2\nexcept ZeroDivisionError:\n  print('Error')\nelse:\n  print('Success!')\n```\n\n3. Use `finally` for cleanup:\n```python\ntry:\n  x = 10 / 0\nexcept ZeroDivisionError:\n  print('Error')\nfinally:\n  print('This runs no matter what')\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/errors.html",
        "start_char": 0,
        "end_char": 556,
        "key_answer": "Steps to handle exceptions in Python:\n\n1. Use `try-except` to handle errors:\n```python\ntry:\n  x = 10 / 0\nexcept ZeroDivisionError as e:\n  print('Error:', e)\n```\n\n2. Use `else` to execute code when no error occurs:\n```python\ntry:\n  x = 10 / 2\nexcept ZeroDivisionError:\n  print('Error')\nelse:\n  print('Success!')\n```\n\n3. Use `finally` for cleanup:\n```python\ntry:\n  x = 10 / 0\nexcept ZeroDivisionError:\n  print('Error')\nfinally:\n  print('This runs no matter what')\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/errors.html"
    },
    {
        "question": "What is the difference between shallow copy and deep copy in Python?",
        "label": "python,copy,shallow-deep",
        "language": "en",
        "context": "A shallow copy creates a new object, but does not create copies of nested objects. A deep copy creates copies of all objects recursively.",
        "answer": "Difference between shallow copy and deep copy in Python:\n\n1. Shallow copy:\n   - Creates a new object but does not recursively copy nested objects.\n   - The nested objects are still references to the original ones.\n   - Created using `copy()` or `copy.copy()`.\n\n2. Deep copy:\n   - Creates a new object and recursively copies all nested objects.\n   - No references to original objects.\n   - Created using `deepcopy()` from the `copy` module.\n\nExample:\n```python\nimport copy\n\noriginal = [[1, 2], [3, 4]]\nshallow = copy.copy(original)\ndeep = copy.deepcopy(original)\n```\n\n📚 Reference: https://docs.python.org/3/library/copy.html#copy.deepcopy",
        "start_char": 0,
        "end_char": 658,
        "key_answer": "Difference between shallow copy and deep copy in Python:\n\n1. Shallow copy:\n   - Creates a new object but does not recursively copy nested objects.\n   - The nested objects are still references to the original ones.\n   - Created using `copy()` or `copy.copy()`.\n\n2. Deep copy:\n   - Creates a new object and recursively copies all nested objects.\n   - No references to original objects.\n   - Created using `deepcopy()` from the `copy` module.\n\nExample:\n```python\nimport copy\n\noriginal = [[1, 2], [3, 4]]\nshallow = copy.copy(original)\ndeep = copy.deepcopy(original)\n```\n\n📚 Reference: https://docs.python.org/3/library/copy.html#copy.deepcopy"
    },
    {
        "question": "What is the purpose of the `self` parameter in Python?",
        "label": "python,self,object-oriented",
        "language": "en",
        "context": "In Python, the `self` parameter refers to the instance of the object itself within methods in a class.",
        "answer": "Purpose of `self` in Python:\n\n1. `self` is used to refer to the current instance of the class.\n2. It is the first parameter of any instance method in a class.\n3. It allows access to the object's attributes and methods.\n\nExample:\n```python\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def greet(self):\n    print(f'Hello, my name is {self.name}')\n\nperson = Person('John', 30)\nperson.greet()  # Output: Hello, my name is John\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/classes.html#class-objects",
        "start_char": 0,
        "end_char": 565,
        "key_answer": "Purpose of `self` in Python:\n\n1. `self` is used to refer to the current instance of the class.\n2. It is the first parameter of any instance method in a class.\n3. It allows access to the object's attributes and methods.\n\nExample:\n```python\nclass Person:\n  def __init__(self, name, age):\n    self.name = name\n    self.age = age\n  def greet(self):\n    print(f'Hello, my name is {self.name}')\n\nperson = Person('John', 30)\nperson.greet()  # Output: Hello, my name is John\n```\n\n📚 Reference: https://docs.python.org/3/tutorial/classes.html#class-objects"
    },
    {
        "question": "How to implement multi-threading in Java?",
        "label": "java, threading",
        "language": "en",
        "context": "Multi-threading allows multiple threads to run concurrently, improving the performance of applications by utilizing CPU more efficiently.",
        "answer": "Steps to implement multi-threading in Java:\n\n1. Create a class that extends the Thread class or implements the Runnable interface.\n2. Override the run() method to define the code that will be executed by the thread.\n3. Instantiate the thread class and call the start() method.\n4. Optionally, use Thread.join() to wait for the threads to finish before continuing.\n\n```java\nclass MyThread extends Thread {\n  public void run() {\n    System.out.println(\"Thread running\");\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    MyThread t = new MyThread();\n    t.start();\n  }\n}\n```",
        "start_char": 0,
        "end_char": 617,
        "key_answer": "Steps to implement multi-threading in Java:\n\n1. Create a class that extends the Thread class or implements the Runnable interface.\n2. Override the run() method to define the code that will be executed by the thread.\n3. Instantiate the thread class and call the start() method.\n4. Optionally, use Thread.join() to wait for the threads to finish before continuing.\n\n```java\nclass MyThread extends Thread {\n  public void run() {\n    System.out.println(\"Thread running\");\n  }\n}\n\npublic class Main {\n  public static void main(String[] args) {\n    MyThread t = new MyThread();\n    t.start();\n  }\n}\n```"
    },
    {
        "question": "How to implement a custom error handler in Express.js?",
        "label": "backend, nodejs, express, error-handling",
        "language": "en",
        "context": "Custom error handling in Express.js helps manage and respond to errors in a structured way, providing more control over the error response.",
        "answer": "Steps to implement a custom error handler in Express.js:\n\n1. Create an error-handling middleware function.\n2. Use `next()` to pass errors to the middleware.\n3. Respond to the error in the middleware with a proper message and status code.\n\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n4. Throw errors in routes when needed using `next(new Error('message'))`.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html",
        "start_char": 0,
        "end_char": 527,
        "key_answer": "Steps to implement a custom error handler in Express.js:\n\n1. Create an error-handling middleware function.\n2. Use `next()` to pass errors to the middleware.\n3. Respond to the error in the middleware with a proper message and status code.\n\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n4. Throw errors in routes when needed using `next(new Error('message'))`.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html"
    },
    {
        "question": "How to use Docker to containerize a Node.js application?",
        "label": "docker, nodejs, containerization",
        "language": "en",
        "context": "Docker is a platform used to develop, ship, and run applications inside containers, making them portable and easier to deploy.",
        "answer": "Steps to use Docker for containerizing a Node.js application:\n\n1. Install Docker on your machine.\n2. Create a Dockerfile in the root of your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n3. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n4. Run the container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n5. Your application will now be accessible at http://localhost:3000.\n\n📚 Reference: https://nodejs.org/en/docs/guides/nodejs-docker-webapp/",
        "start_char": 0,
        "end_char": 563,
        "key_answer": "Steps to use Docker for containerizing a Node.js application:\n\n1. Install Docker on your machine.\n2. Create a Dockerfile in the root of your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY . .\nRUN npm install\nEXPOSE 3000\nCMD [\"npm\", \"start\"]\n```\n3. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n4. Run the container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n5. Your application will now be accessible at http://localhost:3000.\n\n📚 Reference: https://nodejs.org/en/docs/guides/nodejs-docker-webapp/"
    },
    {
        "question": "How to implement a search feature in a MongoDB database?",
        "label": "mongodb, search, backend",
        "language": "en",
        "context": "MongoDB provides various ways to implement search, from simple text search to full-text search using the Atlas Search service.",
        "answer": "Steps to implement a search feature in MongoDB:\n\n1. Install MongoDB if not already installed.\n2. Create a collection and insert documents with searchable fields.\n3. For basic search, use the `find` method:\n```javascript\ndb.collection.find({ name: /search_term/i });\n```\n4. For more advanced search, use MongoDB Atlas Search with full-text indexing.\n5. Implement text indexing in MongoDB:\n```javascript\ndb.collection.createIndex({ field: 'text' });\n```\n6. Query using text search:\n```javascript\ndb.collection.find({ $text: { $search: 'search_term' } });\n```\n📚 Reference: https://docs.mongodb.com/manual/core/text-search/",
        "start_char": 0,
        "end_char": 636,
        "key_answer": "Steps to implement a search feature in MongoDB:\n\n1. Install MongoDB if not already installed.\n2. Create a collection and insert documents with searchable fields.\n3. For basic search, use the `find` method:\n```javascript\ndb.collection.find({ name: /search_term/i });\n```\n4. For more advanced search, use MongoDB Atlas Search with full-text indexing.\n5. Implement text indexing in MongoDB:\n```javascript\ndb.collection.createIndex({ field: 'text' });\n```\n6. Query using text search:\n```javascript\ndb.collection.find({ $text: { $search: 'search_term' } });\n```\n📚 Reference: https://docs.mongodb.com/manual/core/text-search/"
    },
    {
        "question": "How to add pagination to a MongoDB query?",
        "label": "mongodb, pagination, backend",
        "language": "en",
        "context": "Pagination allows you to break down large data sets into smaller, manageable chunks. MongoDB provides the `skip()` and `limit()` methods for pagination.",
        "answer": "Steps to add pagination to a MongoDB query:\n\n1. Use the `skip()` method to specify how many documents to skip.\n2. Use the `limit()` method to specify the number of documents to return.\n\n```javascript\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize);\n```\n\n3. Example with pagination parameters:\n```javascript\nconst pageNumber = 1;\nconst pageSize = 10;\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize);\n```\n\n4. Optionally, sort the results:\n```javascript\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize).sort({ createdAt: -1 });\n```\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/",
        "start_char": 0,
        "end_char": 673,
        "key_answer": "Steps to add pagination to a MongoDB query:\n\n1. Use the `skip()` method to specify how many documents to skip.\n2. Use the `limit()` method to specify the number of documents to return.\n\n```javascript\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize);\n```\n\n3. Example with pagination parameters:\n```javascript\nconst pageNumber = 1;\nconst pageSize = 10;\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize);\n```\n\n4. Optionally, sort the results:\n```javascript\ndb.collection.find().skip(pageNumber * pageSize).limit(pageSize).sort({ createdAt: -1 });\n```\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/"
    },
    {
        "question": "How to create a basic authentication system in Node.js?",
        "label": "nodejs, authentication, backend",
        "language": "en",
        "context": "Basic Authentication is a simple authentication scheme built into HTTP. It sends the user's credentials in an HTTP header for each request.",
        "answer": "Steps to create a basic authentication system in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install express basic-auth\n```\n\n2. Create a middleware function to check authentication:\n```javascript\nconst basicAuth = require('basic-auth');\n\napp.use((req, res, next) => {\n  const user = basicAuth(req);\n  if (!user || user.name !== 'admin' || user.pass !== 'password') {\n    res.status(401).send('Unauthorized');\n  } else {\n    next();\n  }\n});\n```\n\n3. Use this middleware to protect your routes.\n\n📚 Reference: https://www.npmjs.com/package/basic-auth",
        "start_char": 0,
        "end_char": 578,
        "key_answer": "Steps to create a basic authentication system in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install express basic-auth\n```\n\n2. Create a middleware function to check authentication:\n```javascript\nconst basicAuth = require('basic-auth');\n\napp.use((req, res, next) => {\n  const user = basicAuth(req);\n  if (!user || user.name !== 'admin' || user.pass !== 'password') {\n    res.status(401).send('Unauthorized');\n  } else {\n    next();\n  }\n});\n```\n\n3. Use this middleware to protect your routes.\n\n📚 Reference: https://www.npmjs.com/package/basic-auth"
    },
    {
        "question": "How to validate user input in a Node.js application?",
        "label": "nodejs, validation, backend",
        "language": "en",
        "context": "Validating user input is crucial to avoid malicious data and errors. Node.js provides various libraries and techniques to handle input validation.",
        "answer": "Steps to validate user input in a Node.js application:\n\n1. Install a validation library such as `express-validator`:\n```bash\nnpm install express-validator\n```\n\n2. Use the library in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/submit', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('User input is valid');\n});\n```\n3. Handle different types of validation (email, min length, etc.).\n\n📚 Reference: https://express-validator.github.io/",
        "start_char": 0,
        "end_char": 699,
        "key_answer": "Steps to validate user input in a Node.js application:\n\n1. Install a validation library such as `express-validator`:\n```bash\nnpm install express-validator\n```\n\n2. Use the library in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/submit', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('User input is valid');\n});\n```\n3. Handle different types of validation (email, min length, etc.).\n\n📚 Reference: https://express-validator.github.io/"
    },
    {
        "question": "How to implement a real-time chat application in Node.js?",
        "label": "nodejs, realtime, chat",
        "language": "en",
        "context": "Real-time chat applications can be built using WebSockets, which allow bi-directional communication between the server and clients.",
        "answer": "Steps to implement a real-time chat application in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install express socket.io\n```\n\n2. Create a basic server using Express and integrate Socket.IO:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\napp.get('/', (req, res) => {\n  res.send('Chat Application');\n});\n\nio.on('connection', (socket) => {\n  console.log('User connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on http://localhost:3000');\n});\n```",
        "start_char": 0,
        "end_char": 757,
        "key_answer": "Steps to implement a real-time chat application in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install express socket.io\n```\n\n2. Create a basic server using Express and integrate Socket.IO:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\napp.get('/', (req, res) => {\n  res.send('Chat Application');\n});\n\nio.on('connection', (socket) => {\n  console.log('User connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server is running on http://localhost:3000');\n});\n```"
    },
    {
        "question": "How to create a RESTful API using Express.js?",
        "label": "express, api, backend",
        "language": "en",
        "context": "A RESTful API provides a standardized way to interact with resources through HTTP requests. Express.js makes it easy to build RESTful APIs.",
        "answer": "Steps to create a RESTful API using Express.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create an Express server and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  res.status(201).json({ id: 2, name: 'Jane Doe' });\n});\n\napp.listen(3000, () => {\n  console.log('API server running on http://localhost:3000');\n});\n```",
        "start_char": 0,
        "end_char": 515,
        "key_answer": "Steps to create a RESTful API using Express.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create an Express server and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  res.status(201).json({ id: 2, name: 'Jane Doe' });\n});\n\napp.listen(3000, () => {\n  console.log('API server running on http://localhost:3000');\n});\n```"
    },
    {
        "question": "How to set up a MongoDB replica set?",
        "label": "mongodb, replication, database",
        "language": "en",
        "context": "A MongoDB replica set provides redundancy and high data availability by replicating data across multiple MongoDB servers.",
        "answer": "Steps to set up a MongoDB replica set:\n\n1. Install MongoDB on multiple servers.\n2. Start MongoDB instances on each server with `--replSet` option.\n```bash\nmongod --replSet myReplicaSet\n```\n3. Connect to the primary node using Mongo shell:\n```bash\nmongo --host primary-node:27017\n```\n4. Initiate the replica set:\n```javascript\nrs.initiate()\n```\n5. Add secondary nodes to the replica set:\n```javascript\nrs.add('secondary-node:27017')\n```\n6. Verify the replica set status:\n```javascript\nrs.status()\n```\n7. MongoDB will now replicate data between nodes.\n\n📚 Reference: https://docs.mongodb.com/manual/replication/",
        "start_char": 0,
        "end_char": 633,
        "key_answer": "Steps to set up a MongoDB replica set:\n\n1. Install MongoDB on multiple servers.\n2. Start MongoDB instances on each server with `--replSet` option.\n```bash\nmongod --replSet myReplicaSet\n```\n3. Connect to the primary node using Mongo shell:\n```bash\nmongo --host primary-node:27017\n```\n4. Initiate the replica set:\n```javascript\nrs.initiate()\n```\n5. Add secondary nodes to the replica set:\n```javascript\nrs.add('secondary-node:27017')\n```\n6. Verify the replica set status:\n```javascript\nrs.status()\n```\n7. MongoDB will now replicate data between nodes.\n\n📚 Reference: https://docs.mongodb.com/manual/replication/"
    },
    {
        "question": "How to optimize a SQL query for better performance?",
        "label": "sql, performance, database",
        "language": "en",
        "context": "SQL query optimization improves the speed and efficiency of queries, helping to reduce load on the database and improve overall application performance.",
        "answer": "Steps to optimize a SQL query for better performance:\n\n1. Use appropriate indexes for the tables involved in the query.\n2. Avoid using SELECT * and specify only the necessary columns.\n3. Use WHERE clauses to filter rows early in the query.\n4. Avoid using subqueries; prefer JOINs instead.\n5. Use EXPLAIN to analyze query execution plans and look for inefficiencies.\n6. Avoid unnecessary joins and large result sets.\n7. Optimize aggregate functions like COUNT and SUM.\n\n📚 Reference: https://use-the-index-luke.com/",
        "start_char": 0,
        "end_char": 523,
        "key_answer": "Steps to optimize a SQL query for better performance:\n\n1. Use appropriate indexes for the tables involved in the query.\n2. Avoid using SELECT * and specify only the necessary columns.\n3. Use WHERE clauses to filter rows early in the query.\n4. Avoid using subqueries; prefer JOINs instead.\n5. Use EXPLAIN to analyze query execution plans and look for inefficiencies.\n6. Avoid unnecessary joins and large result sets.\n7. Optimize aggregate functions like COUNT and SUM.\n\n📚 Reference: https://use-the-index-luke.com/"
    },
    {
        "question": "How to create a JWT-based authentication system in Node.js?",
        "label": "nodejs, authentication, jwt",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are used for securely transmitting information between parties as a JSON object. They are commonly used for authentication and authorization in web applications.",
        "answer": "Steps to create a JWT-based authentication system in Node.js:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a route to authenticate a user and generate a JWT:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst secretKey = 'your-secret-key';\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'admin' };\n  const token = jwt.sign(user, secretKey, { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Create a middleware to verify the JWT in protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').split(' ')[1];\n  if (!token) return res.status(401).send('Access denied');\n  jwt.verify(token, secretKey, (err, decoded) => {\n    if (err) return res.status(400).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Use this middleware for protected routes.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 994,
        "key_answer": "Steps to create a JWT-based authentication system in Node.js:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a route to authenticate a user and generate a JWT:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst secretKey = 'your-secret-key';\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'admin' };\n  const token = jwt.sign(user, secretKey, { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Create a middleware to verify the JWT in protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').split(' ')[1];\n  if (!token) return res.status(401).send('Access denied');\n  jwt.verify(token, secretKey, (err, decoded) => {\n    if (err) return res.status(400).send('Invalid token');\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Use this middleware for protected routes.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to use async/await in Node.js for asynchronous programming?",
        "label": "nodejs, async-await, programming",
        "language": "en",
        "context": "Async/await is a syntax for working with promises in JavaScript, allowing you to write asynchronous code in a synchronous-like manner.",
        "answer": "Steps to use async/await in Node.js:\n\n1. Define an asynchronous function using the `async` keyword:\n```javascript\nasync function fetchData() {\n  return 'Data fetched';\n}\n```\n2. Use the `await` keyword to pause execution until a promise resolves:\n```javascript\nasync function fetchData() {\n  const data = await fetch('https://api.example.com');\n  return data.json();\n}\n```\n3. Handle errors using `try/catch`:\n```javascript\ntry {\n  const result = await fetchData();\n  console.log(result);\n} catch (err) {\n  console.error('Error:', err);\n}\n```\n4. Async/await simplifies promise chaining and improves code readability.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 746,
        "key_answer": "Steps to use async/await in Node.js:\n\n1. Define an asynchronous function using the `async` keyword:\n```javascript\nasync function fetchData() {\n  return 'Data fetched';\n}\n```\n2. Use the `await` keyword to pause execution until a promise resolves:\n```javascript\nasync function fetchData() {\n  const data = await fetch('https://api.example.com');\n  return data.json();\n}\n```\n3. Handle errors using `try/catch`:\n```javascript\ntry {\n  const result = await fetchData();\n  console.log(result);\n} catch (err) {\n  console.error('Error:', err);\n}\n```\n4. Async/await simplifies promise chaining and improves code readability.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to configure SSL for a Node.js application?",
        "label": "nodejs, ssl, security",
        "language": "en",
        "context": "Configuring SSL (Secure Sockets Layer) ensures encrypted communication between the server and client, providing security for web applications.",
        "answer": "Steps to configure SSL for a Node.js application:\n\n1. Obtain an SSL certificate from a trusted certificate authority (CA).\n2. Install the `https` module in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n```\n3. Create an HTTPS server by providing the SSL certificate:\n```javascript\nconst options = {\n  cert: fs.readFileSync('path/to/cert.pem'),\n  key: fs.readFileSync('path/to/key.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Secure connection established!');\n}).listen(443);\n```\n4. Ensure that your web server redirects HTTP traffic to HTTPS.\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https",
        "start_char": 0,
        "end_char": 726,
        "key_answer": "Steps to configure SSL for a Node.js application:\n\n1. Obtain an SSL certificate from a trusted certificate authority (CA).\n2. Install the `https` module in Node.js:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n```\n3. Create an HTTPS server by providing the SSL certificate:\n```javascript\nconst options = {\n  cert: fs.readFileSync('path/to/cert.pem'),\n  key: fs.readFileSync('path/to/key.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Secure connection established!');\n}).listen(443);\n```\n4. Ensure that your web server redirects HTTP traffic to HTTPS.\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https"
    },
    {
        "question": "How to implement logging in a Node.js application?",
        "label": "nodejs, logging, backend",
        "language": "en",
        "context": "Logging helps to track events, errors, and activities in an application, making it easier to troubleshoot and monitor the system's health.",
        "answer": "Steps to implement logging in a Node.js application:\n\n1. Install a logging library like `winston`:\n```bash\nnpm install winston\n```\n\n2. Configure the logger with different log levels:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n3. Use the logger in your application:\n```javascript\nlogger.info('Informational message');\nlogger.error('Error message');\n```\n4. Store logs in files or external services for better tracking.\n\n📚 Reference: https://www.npmjs.com/package/winston",
        "start_char": 0,
        "end_char": 680,
        "key_answer": "Steps to implement logging in a Node.js application:\n\n1. Install a logging library like `winston`:\n```bash\nnpm install winston\n```\n\n2. Configure the logger with different log levels:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n3. Use the logger in your application:\n```javascript\nlogger.info('Informational message');\nlogger.error('Error message');\n```\n4. Store logs in files or external services for better tracking.\n\n📚 Reference: https://www.npmjs.com/package/winston"
    },
    {
        "question": "How to set up continuous integration with GitHub Actions?",
        "label": "github, ci, devops",
        "language": "en",
        "context": "GitHub Actions helps automate workflows, including continuous integration (CI), testing, and deployment directly within GitHub repositories.",
        "answer": "Steps to set up continuous integration with GitHub Actions:\n\n1. Create a `.github/workflows` directory in your repository.\n2. Create a YAML file, e.g., `ci.yml`, inside the workflows directory:\n```yaml\nname: CI Pipeline\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```\n3. GitHub will automatically run the defined actions when changes are pushed to the repository.\n\n📚 Reference: https://docs.github.com/en/actions/automating-your-workflow-with-github-actions",
        "start_char": 0,
        "end_char": 738,
        "key_answer": "Steps to set up continuous integration with GitHub Actions:\n\n1. Create a `.github/workflows` directory in your repository.\n2. Create a YAML file, e.g., `ci.yml`, inside the workflows directory:\n```yaml\nname: CI Pipeline\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Set up Node.js\n        uses: actions/setup-node@v2\n      - name: Install dependencies\n        run: npm install\n      - name: Run tests\n        run: npm test\n```\n3. GitHub will automatically run the defined actions when changes are pushed to the repository.\n\n📚 Reference: https://docs.github.com/en/actions/automating-your-workflow-with-github-actions"
    },
    {
        "question": "How to implement rate limiting in an Express.js application?",
        "label": "nodejs, express, rate-limiting, security",
        "language": "en",
        "context": "Rate limiting helps to prevent abuse of your API by restricting the number of requests a user can make in a given time period.",
        "answer": "Steps to implement rate limiting in an Express.js application:\n\n1. Install the `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Import and configure the rate limiter middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n```\n3. Apply the rate limiter middleware globally or to specific routes:\n```javascript\napp.use(limiter);\n```\n4. Rate limiting helps to protect your API from DDoS attacks and abuse.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit",
        "start_char": 0,
        "end_char": 724,
        "key_answer": "Steps to implement rate limiting in an Express.js application:\n\n1. Install the `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Import and configure the rate limiter middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n```\n3. Apply the rate limiter middleware globally or to specific routes:\n```javascript\napp.use(limiter);\n```\n4. Rate limiting helps to protect your API from DDoS attacks and abuse.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit"
    },
    {
        "question": "How to handle file uploads in a Node.js application?",
        "label": "nodejs, file-upload, backend",
        "language": "en",
        "context": "Handling file uploads in a Node.js application involves parsing multipart form data and storing the uploaded files securely.",
        "answer": "Steps to handle file uploads in Node.js:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n2. Import `multer` and configure the storage options:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function(req, file, cb) {\n    cb(null, file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create an endpoint to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n4. Files will be stored in the specified directory (e.g., 'uploads/').\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 767,
        "key_answer": "Steps to handle file uploads in Node.js:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n2. Import `multer` and configure the storage options:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function(req, file, cb) {\n    cb(null, file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create an endpoint to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n4. Files will be stored in the specified directory (e.g., 'uploads/').\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to create an API with Express and MongoDB?",
        "label": "nodejs, express, mongodb, api",
        "language": "en",
        "context": "Express is a minimal and flexible Node.js web application framework, and MongoDB is a NoSQL database. Together, they make building APIs easier.",
        "answer": "Steps to create an API with Express and MongoDB:\n\n1. Install the required packages:\n```bash\nnpm install express mongoose\n```\n2. Set up MongoDB connection:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Define a model for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst UserSchema = new Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', UserSchema);\n```\n4. Create API routes to interact with MongoDB:\n```javascript\napp.get('/users', async (req, res) => {\n  const users = await User.find();\n  res.json(users);\n});\n\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.status(201).send(user);\n});\n```\n5. Start the Express server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 1011,
        "key_answer": "Steps to create an API with Express and MongoDB:\n\n1. Install the required packages:\n```bash\nnpm install express mongoose\n```\n2. Set up MongoDB connection:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Define a model for your data:\n```javascript\nconst Schema = mongoose.Schema;\nconst UserSchema = new Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', UserSchema);\n```\n4. Create API routes to interact with MongoDB:\n```javascript\napp.get('/users', async (req, res) => {\n  const users = await User.find();\n  res.json(users);\n});\n\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.status(201).send(user);\n});\n```\n5. Start the Express server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to add authentication to a Node.js API using Passport.js?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport.js is a flexible and simple authentication middleware for Node.js, supporting many different types of authentication strategies.",
        "answer": "Steps to add authentication to a Node.js API using Passport.js:\n\n1. Install the required packages:\n```bash\nnpm install passport passport-local express-session\n```\n2. Set up Passport middleware:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  User.findOne({ username }, (err, user) => {\n    if (err) return done(err);\n    if (!user || user.password !== password) return done(null, false);\n    return done(null, user);\n  });\n}));\n```\n3. Initialize Passport and session middleware:\n```javascript\napp.use(require('express-session')({ secret: 'secret-key', resave: false, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n4. Create a login route:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n5. Protect routes using `passport.authenticate()`.\n\n📚 Reference: http://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 1064,
        "key_answer": "Steps to add authentication to a Node.js API using Passport.js:\n\n1. Install the required packages:\n```bash\nnpm install passport passport-local express-session\n```\n2. Set up Passport middleware:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  User.findOne({ username }, (err, user) => {\n    if (err) return done(err);\n    if (!user || user.password !== password) return done(null, false);\n    return done(null, user);\n  });\n}));\n```\n3. Initialize Passport and session middleware:\n```javascript\napp.use(require('express-session')({ secret: 'secret-key', resave: false, saveUninitialized: true }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n4. Create a login route:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n5. Protect routes using `passport.authenticate()`.\n\n📚 Reference: http://www.passportjs.org/docs/"
    },
    {
        "question": "How to send emails using Node.js and Nodemailer?",
        "label": "nodejs, email, nodemailer",
        "language": "en",
        "context": "Nodemailer is a module for Node.js applications to send emails. It supports a variety of email services and SMTP protocols.",
        "answer": "Steps to send emails using Node.js and Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n2. Set up Nodemailer transport:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email using the transport:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email from Node.js!'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Ensure you handle errors properly.\n\n📚 Reference: https://nodemailer.com/about/",
        "start_char": 0,
        "end_char": 856,
        "key_answer": "Steps to send emails using Node.js and Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n2. Set up Nodemailer transport:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email using the transport:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email from Node.js!'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Ensure you handle errors properly.\n\n📚 Reference: https://nodemailer.com/about/"
    },
    {
        "question": "How to schedule tasks in a Node.js application?",
        "label": "nodejs, task-scheduling",
        "language": "en",
        "context": "Task scheduling is used to run tasks or jobs at specific times or intervals. In Node.js, libraries like `node-cron` can be used to schedule tasks.",
        "answer": "Steps to schedule tasks in Node.js:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n2. Import and configure the scheduler:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Task running every minute');\n});\n```\n3. You can specify more complex schedules with cron expressions.\n4. Cron jobs can be used for tasks like backups, cleaning up logs, or sending emails at intervals.\n\n📚 Reference: https://www.npmjs.com/package/node-cron",
        "start_char": 0,
        "end_char": 513,
        "key_answer": "Steps to schedule tasks in Node.js:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n2. Import and configure the scheduler:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Task running every minute');\n});\n```\n3. You can specify more complex schedules with cron expressions.\n4. Cron jobs can be used for tasks like backups, cleaning up logs, or sending emails at intervals.\n\n📚 Reference: https://www.npmjs.com/package/node-cron"
    },
    {
        "question": "How to implement JWT authentication in a Node.js API?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are a compact and self-contained way for securely transmitting information between parties as a JSON object.",
        "answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install jsonwebtoken express-jwt\n```\n2. Set up JWT secret and middleware:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst authenticateJWT = (req, res, next) => {\n  const token = req.header('x-auth-token');\n  if (!token) return res.status(403).send('Access denied');\n\n  jwt.verify(token, 'your-secret-key', (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n```\n3. Create a login route that generates a JWT:\n```javascript\napp.post('/login', (req, res) => {\n  const user = { id: 1 }; // Simplified for this example\n  const token = jwt.sign(user, 'your-secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n4. Protect routes with JWT authentication middleware.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 913,
        "key_answer": "Steps to implement JWT authentication in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install jsonwebtoken express-jwt\n```\n2. Set up JWT secret and middleware:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst authenticateJWT = (req, res, next) => {\n  const token = req.header('x-auth-token');\n  if (!token) return res.status(403).send('Access denied');\n\n  jwt.verify(token, 'your-secret-key', (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n};\n```\n3. Create a login route that generates a JWT:\n```javascript\napp.post('/login', (req, res) => {\n  const user = { id: 1 }; // Simplified for this example\n  const token = jwt.sign(user, 'your-secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n4. Protect routes with JWT authentication middleware.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to use WebSockets in Node.js for real-time communication?",
        "label": "nodejs, websockets, real-time",
        "language": "en",
        "context": "WebSockets enable full-duplex communication channels over a single TCP connection, ideal for real-time applications like chat apps and notifications.",
        "answer": "Steps to use WebSockets in Node.js for real-time communication:\n\n1. Install the `ws` package:\n```bash\nnpm install ws\n```\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n  ws.send('Hello from server!');\n  ws.on('message', (message) => {\n    console.log('Received: ' + message);\n  });\n});\n```\n3. Connect to the WebSocket server from a client (browser or Node.js):\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onmessage = (event) => {\n  console.log('Received: ' + event.data);\n};\n```\n4. You can use WebSockets for real-time features like live chat and notifications.\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 805,
        "key_answer": "Steps to use WebSockets in Node.js for real-time communication:\n\n1. Install the `ws` package:\n```bash\nnpm install ws\n```\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  console.log('Client connected');\n  ws.send('Hello from server!');\n  ws.on('message', (message) => {\n    console.log('Received: ' + message);\n  });\n});\n```\n3. Connect to the WebSocket server from a client (browser or Node.js):\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onmessage = (event) => {\n  console.log('Received: ' + event.data);\n};\n```\n4. You can use WebSockets for real-time features like live chat and notifications.\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to optimize a Node.js application for performance?",
        "label": "nodejs, performance, optimization",
        "language": "en",
        "context": "Performance optimization is crucial for any web application. Node.js, being an asynchronous event-driven framework, has many tools to help optimize performance.",
        "answer": "Steps to optimize a Node.js application for performance:\n\n1. Use asynchronous and non-blocking code wherever possible.\n2. Use a reverse proxy (e.g., Nginx) to offload heavy tasks.\n3. Enable HTTP2 to improve request handling speed.\n4. Use caching to avoid redundant operations, like database queries.\n5. Minimize the number of dependencies to reduce overhead.\n6. Use clustering to take advantage of multi-core systems.\n7. Profile the application to identify bottlenecks using `clinic.js` or `node-inspect`.\n8. Compress responses using gzip to reduce the payload size.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 640,
        "key_answer": "Steps to optimize a Node.js application for performance:\n\n1. Use asynchronous and non-blocking code wherever possible.\n2. Use a reverse proxy (e.g., Nginx) to offload heavy tasks.\n3. Enable HTTP2 to improve request handling speed.\n4. Use caching to avoid redundant operations, like database queries.\n5. Minimize the number of dependencies to reduce overhead.\n6. Use clustering to take advantage of multi-core systems.\n7. Profile the application to identify bottlenecks using `clinic.js` or `node-inspect`.\n8. Compress responses using gzip to reduce the payload size.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to implement input validation in a Node.js application?",
        "label": "nodejs, validation",
        "language": "en",
        "context": "Input validation is essential to ensure that data is correct and safe to process. In Node.js, the `express-validator` package is commonly used for input validation.",
        "answer": "Steps to implement input validation in Node.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n2. Use the validation middleware in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/signup',\n  body('email').isEmail().withMessage('Invalid email address'),\n  body('password').isLength({ min: 5 }).withMessage('Password must be at least 5 characters long'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('Input is valid');\n  }\n);\n```\n3. You can validate different types of input like strings, numbers, dates, etc.\n4. Handle validation errors properly and return meaningful messages.\n\n📚 Reference: https://express-validator.github.io/",
        "start_char": 0,
        "end_char": 869,
        "key_answer": "Steps to implement input validation in Node.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n2. Use the validation middleware in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/signup',\n  body('email').isEmail().withMessage('Invalid email address'),\n  body('password').isLength({ min: 5 }).withMessage('Password must be at least 5 characters long'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('Input is valid');\n  }\n);\n```\n3. You can validate different types of input like strings, numbers, dates, etc.\n4. Handle validation errors properly and return meaningful messages.\n\n📚 Reference: https://express-validator.github.io/"
    },
    {
        "question": "How to set up a Redis cache in Node.js?",
        "label": "nodejs, redis, cache",
        "language": "en",
        "context": "Redis is a powerful in-memory data store used to implement caching mechanisms to speed up the performance of applications.",
        "answer": "Steps to set up a Redis cache in Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Create a Redis client:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379\n});\n```\n3. Set a cache value:\n```javascript\nclient.set('key', 'value', redis.print);\n```\n4. Get a cached value:\n```javascript\nclient.get('key', (err, reply) => {\n  if (err) throw err;\n  console.log(reply); // Will print 'value'\n});\n```\n5. You can use Redis to store session data, frequently accessed queries, etc.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 637,
        "key_answer": "Steps to set up a Redis cache in Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Create a Redis client:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379\n});\n```\n3. Set a cache value:\n```javascript\nclient.set('key', 'value', redis.print);\n```\n4. Get a cached value:\n```javascript\nclient.get('key', (err, reply) => {\n  if (err) throw err;\n  console.log(reply); // Will print 'value'\n});\n```\n5. You can use Redis to store session data, frequently accessed queries, etc.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to perform a database migration in MongoDB?",
        "label": "mongodb, migration, database",
        "language": "en",
        "context": "Database migrations are used to update the structure of a database. In MongoDB, migrations can be performed by updating collections and documents.",
        "answer": "Steps to perform a database migration in MongoDB:\n\n1. Use a migration tool like `migrate-mongo`:\n```bash\nnpm install migrate-mongo\n```\n2. Initialize the migration project:\n```bash\nnpx migrate-mongo init\n```\n3. Create a new migration file:\n```bash\nnpx migrate-mongo create add-user-schema\n```\n4. Define the migration in the file:\n```javascript\nmodule.exports = {\n  up: async function(db, client) {\n    // Perform migration logic (e.g., adding a new field to a collection)\n    await db.collection('users').updateMany({}, { $set: { newField: 'value' } });\n  },\n  down: async function(db, client) {\n    // Reverse migration logic\n    await db.collection('users').updateMany({}, { $unset: { newField: '' } });\n  }\n};\n```\n5. Run the migration:\n```bash\nnpx migrate-mongo up\n```\n6. Verify that the migration was successful by checking the collection.\n\n📚 Reference: https://www.npmjs.com/package/migrate-mongo",
        "start_char": 0,
        "end_char": 933,
        "key_answer": "Steps to perform a database migration in MongoDB:\n\n1. Use a migration tool like `migrate-mongo`:\n```bash\nnpm install migrate-mongo\n```\n2. Initialize the migration project:\n```bash\nnpx migrate-mongo init\n```\n3. Create a new migration file:\n```bash\nnpx migrate-mongo create add-user-schema\n```\n4. Define the migration in the file:\n```javascript\nmodule.exports = {\n  up: async function(db, client) {\n    // Perform migration logic (e.g., adding a new field to a collection)\n    await db.collection('users').updateMany({}, { $set: { newField: 'value' } });\n  },\n  down: async function(db, client) {\n    // Reverse migration logic\n    await db.collection('users').updateMany({}, { $unset: { newField: '' } });\n  }\n};\n```\n5. Run the migration:\n```bash\nnpx migrate-mongo up\n```\n6. Verify that the migration was successful by checking the collection.\n\n📚 Reference: https://www.npmjs.com/package/migrate-mongo"
    },
    {
        "question": "How to create a cron job in Node.js?",
        "label": "nodejs, cron-job",
        "language": "en",
        "context": "Cron jobs are scheduled tasks that run at specified intervals. In Node.js, you can use the `node-cron` package to set up cron jobs.",
        "answer": "Steps to create a cron job in Node.js using `node-cron`:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n2. Create a cron job:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Running a task every minute');\n});\n```\n3. You can use cron expressions to schedule tasks (e.g., `* * * * *` for every minute).\n4. Run multiple tasks at different intervals:\n```javascript\ncron.schedule('0 0 * * *', () => {\n  console.log('Running task at midnight');\n});\n```\n5. Cron jobs are useful for periodic tasks like backups, sending reports, etc.\n\n📚 Reference: https://www.npmjs.com/package/node-cron",
        "start_char": 0,
        "end_char": 674,
        "key_answer": "Steps to create a cron job in Node.js using `node-cron`:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n2. Create a cron job:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Running a task every minute');\n});\n```\n3. You can use cron expressions to schedule tasks (e.g., `* * * * *` for every minute).\n4. Run multiple tasks at different intervals:\n```javascript\ncron.schedule('0 0 * * *', () => {\n  console.log('Running task at midnight');\n});\n```\n5. Cron jobs are useful for periodic tasks like backups, sending reports, etc.\n\n📚 Reference: https://www.npmjs.com/package/node-cron"
    },
    {
        "question": "How to use Docker with a Node.js application?",
        "label": "nodejs, docker",
        "language": "en",
        "context": "Docker is a platform used to develop, ship, and run applications in containers, making it easier to manage dependencies and deploy applications.",
        "answer": "Steps to use Docker with a Node.js application:\n\n1. Create a `Dockerfile` in your Node.js project:\n```Dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package.json /app\nRUN npm install\nCOPY . /app\nCMD ['node', 'index.js']\n```\n2. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n3. Run the Docker container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n4. You can test your application by visiting `http://localhost:3000`.\n5. Optionally, use `docker-compose` to manage multi-container applications.\n\n📚 Reference: https://nodejs.org/en/docs/guides/dockerizing-nodejs-webapp/",
        "start_char": 0,
        "end_char": 607,
        "key_answer": "Steps to use Docker with a Node.js application:\n\n1. Create a `Dockerfile` in your Node.js project:\n```Dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package.json /app\nRUN npm install\nCOPY . /app\nCMD ['node', 'index.js']\n```\n2. Build the Docker image:\n```bash\ndocker build -t my-node-app .\n```\n3. Run the Docker container:\n```bash\ndocker run -p 3000:3000 my-node-app\n```\n4. You can test your application by visiting `http://localhost:3000`.\n5. Optionally, use `docker-compose` to manage multi-container applications.\n\n📚 Reference: https://nodejs.org/en/docs/guides/dockerizing-nodejs-webapp/"
    },
    {
        "question": "How to use JWT (JSON Web Tokens) for authentication in Node.js?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JWT is a compact and self-contained way for securely transmitting information between parties as a JSON object. It is often used for authentication in web applications.",
        "answer": "Steps to use JWT for authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n2. Create a function to generate a token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nfunction generateToken(user) {\n  return jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\n}\n```\n3. Use `bcryptjs` to hash passwords before storing them in the database.\n4. Create a login route to authenticate users and issue a token:\n```javascript\napp.post('/login', async (req, res) => {\n  const user = await User.findOne({ email: req.body.email });\n  if (!user) return res.status(400).send('User not found');\n\n  const isMatch = await bcrypt.compare(req.body.password, user.password);\n  if (!isMatch) return res.status(400).send('Invalid credentials');\n\n  const token = generateToken(user);\n  res.json({ token });\n});\n```\n5. Protect routes with middleware that verifies the JWT token.\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 994,
        "key_answer": "Steps to use JWT for authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n2. Create a function to generate a token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nfunction generateToken(user) {\n  return jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\n}\n```\n3. Use `bcryptjs` to hash passwords before storing them in the database.\n4. Create a login route to authenticate users and issue a token:\n```javascript\napp.post('/login', async (req, res) => {\n  const user = await User.findOne({ email: req.body.email });\n  if (!user) return res.status(400).send('User not found');\n\n  const isMatch = await bcrypt.compare(req.body.password, user.password);\n  if (!isMatch) return res.status(400).send('Invalid credentials');\n\n  const token = generateToken(user);\n  res.json({ token });\n});\n```\n5. Protect routes with middleware that verifies the JWT token.\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to manage multiple environments in a Node.js application?",
        "label": "nodejs, environments",
        "language": "en",
        "context": "Managing multiple environments is essential to separate development, staging, and production configurations in your application.",
        "answer": "Steps to manage multiple environments in Node.js:\n\n1. Use `dotenv` to load environment-specific configurations:\n```bash\nnpm install dotenv\n```\n2. Create different `.env` files for each environment (e.g., `.env.development`, `.env.production`).\n3. Set the environment variable to determine which `.env` file to load:\n```bash\nNODE_ENV=development node app.js\n```\n4. Load the correct environment file in your application:\n```javascript\nrequire('dotenv').config({ path: `.env.${process.env.NODE_ENV}` });\n```\n5. Use environment-specific configurations in your code.\n6. You can also use `config` package to manage multiple configurations.\n\n📚 Reference: https://12factor.net/config",
        "start_char": 0,
        "end_char": 693,
        "key_answer": "Steps to manage multiple environments in Node.js:\n\n1. Use `dotenv` to load environment-specific configurations:\n```bash\nnpm install dotenv\n```\n2. Create different `.env` files for each environment (e.g., `.env.development`, `.env.production`).\n3. Set the environment variable to determine which `.env` file to load:\n```bash\nNODE_ENV=development node app.js\n```\n4. Load the correct environment file in your application:\n```javascript\nrequire('dotenv').config({ path: `.env.${process.env.NODE_ENV}` });\n```\n5. Use environment-specific configurations in your code.\n6. You can also use `config` package to manage multiple configurations.\n\n📚 Reference: https://12factor.net/config"
    },
    {
        "question": "How to secure a Node.js application?",
        "label": "nodejs, security",
        "language": "en",
        "context": "Security is crucial in web applications. There are various techniques to secure a Node.js application, such as protecting against SQL injection, cross-site scripting (XSS), and using HTTPS.",
        "answer": "Steps to secure a Node.js application:\n\n1. Use HTTPS to encrypt communication between the client and server:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server.key'),\n  cert: fs.readFileSync('server.cert')\n};\n\nhttps.createServer(options, app).listen(3000);\n```\n2. Sanitize user inputs to prevent SQL injection and XSS attacks.\n3. Use helmet to secure HTTP headers:\n```bash\nnpm install helmet\n```\n```javascript\nconst helmet = require('helmet');\napp.use(helmet());\n```\n4. Set up proper authentication and authorization.\n5. Use `express-rate-limit` to prevent brute-force attacks.\n6. Regularly update dependencies to avoid vulnerabilities.\n\n📚 Reference: https://expressjs.com/en/advanced/best-practice-security.html",
        "start_char": 0,
        "end_char": 810,
        "key_answer": "Steps to secure a Node.js application:\n\n1. Use HTTPS to encrypt communication between the client and server:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server.key'),\n  cert: fs.readFileSync('server.cert')\n};\n\nhttps.createServer(options, app).listen(3000);\n```\n2. Sanitize user inputs to prevent SQL injection and XSS attacks.\n3. Use helmet to secure HTTP headers:\n```bash\nnpm install helmet\n```\n```javascript\nconst helmet = require('helmet');\napp.use(helmet());\n```\n4. Set up proper authentication and authorization.\n5. Use `express-rate-limit` to prevent brute-force attacks.\n6. Regularly update dependencies to avoid vulnerabilities.\n\n📚 Reference: https://expressjs.com/en/advanced/best-practice-security.html"
    },
    {
        "question": "How to use Redis for session management in Node.js?",
        "label": "nodejs, redis, session",
        "language": "en",
        "context": "Redis can be used to store session data in a Node.js application. It is an in-memory data structure store, often used as a cache or session store.",
        "answer": "Steps to use Redis for session management in Node.js:\n\n1. Install `redis` and `express-session` packages:\n```bash\nnpm install redis express-session\n```\n2. Set up Redis client and session middleware:\n```javascript\nconst redis = require('redis');\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\n\nconst client = redis.createClient();\n\napp.use(session({\n  store: new RedisStore({ client }),\n  secret: 'mysecret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: true }\n}));\n```\n3. Use session in your application:\n```javascript\napp.get('/', (req, res) => {\n  if (!req.session.views) {\n    req.session.views = 1;\n  } else {\n    req.session.views++;\n  }\n  res.send(`Views: ${req.session.views}`);\n});\n```\n4. Redis can handle high throughput and large amounts of session data.\n\n📚 Reference: https://www.npmjs.com/package/connect-redis",
        "start_char": 0,
        "end_char": 928,
        "key_answer": "Steps to use Redis for session management in Node.js:\n\n1. Install `redis` and `express-session` packages:\n```bash\nnpm install redis express-session\n```\n2. Set up Redis client and session middleware:\n```javascript\nconst redis = require('redis');\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\n\nconst client = redis.createClient();\n\napp.use(session({\n  store: new RedisStore({ client }),\n  secret: 'mysecret',\n  resave: false,\n  saveUninitialized: false,\n  cookie: { secure: true }\n}));\n```\n3. Use session in your application:\n```javascript\napp.get('/', (req, res) => {\n  if (!req.session.views) {\n    req.session.views = 1;\n  } else {\n    req.session.views++;\n  }\n  res.send(`Views: ${req.session.views}`);\n});\n```\n4. Redis can handle high throughput and large amounts of session data.\n\n📚 Reference: https://www.npmjs.com/package/connect-redis"
    },
    {
        "question": "How to implement role-based access control (RBAC) in Node.js?",
        "label": "nodejs, rbac, security",
        "language": "en",
        "context": "Role-Based Access Control (RBAC) is a method of restricting system access to authorized users. It is widely used for managing permissions in web applications.",
        "answer": "Steps to implement RBAC in Node.js:\n\n1. Define roles and permissions for your application (e.g., Admin, User).\n2. Create a `role` field in your user schema in the database.\n3. Assign roles to users during registration or user creation.\n4. Create middleware to check permissions:\n```javascript\nfunction checkRole(role) {\n  return (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).send('Forbidden');\n    }\n    next();\n  };\n}\n```\n5. Use the `checkRole` middleware in routes where role-based access control is required:\n```javascript\napp.get('/admin', checkRole('admin'), (req, res) => {\n  res.send('Admin area');\n});\n```\n6. Combine RBAC with authentication middleware to ensure only authorized users access protected routes.\n\n📚 Reference: https://auth0.com/docs/authorization/rbac-and-claims",
        "start_char": 0,
        "end_char": 847,
        "key_answer": "Steps to implement RBAC in Node.js:\n\n1. Define roles and permissions for your application (e.g., Admin, User).\n2. Create a `role` field in your user schema in the database.\n3. Assign roles to users during registration or user creation.\n4. Create middleware to check permissions:\n```javascript\nfunction checkRole(role) {\n  return (req, res, next) => {\n    if (req.user.role !== role) {\n      return res.status(403).send('Forbidden');\n    }\n    next();\n  };\n}\n```\n5. Use the `checkRole` middleware in routes where role-based access control is required:\n```javascript\napp.get('/admin', checkRole('admin'), (req, res) => {\n  res.send('Admin area');\n});\n```\n6. Combine RBAC with authentication middleware to ensure only authorized users access protected routes.\n\n📚 Reference: https://auth0.com/docs/authorization/rbac-and-claims"
    },
    {
        "question": "How to integrate third-party APIs in a Node.js application?",
        "label": "nodejs, api-integration",
        "language": "en",
        "context": "Integrating third-party APIs into your application allows you to extend its functionality without building everything from scratch.",
        "answer": "Steps to integrate third-party APIs in Node.js:\n\n1. Choose the API you want to integrate (e.g., Google Maps API, Twitter API).\n2. Install the necessary libraries or use the `axios` package for HTTP requests:\n```bash\nnpm install axios\n```\n3. Send HTTP requests to the API using `axios`:\n```javascript\nconst axios = require('axios');\n\naxios.get('https://api.example.com/endpoint', { params: { key: 'your_api_key' } })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n4. Handle responses and errors based on the API documentation.\n5. You can also use `request` or `node-fetch` for making API requests.\n\n📚 Reference: https://axios-http.com/docs/req_config",
        "start_char": 0,
        "end_char": 739,
        "key_answer": "Steps to integrate third-party APIs in Node.js:\n\n1. Choose the API you want to integrate (e.g., Google Maps API, Twitter API).\n2. Install the necessary libraries or use the `axios` package for HTTP requests:\n```bash\nnpm install axios\n```\n3. Send HTTP requests to the API using `axios`:\n```javascript\nconst axios = require('axios');\n\naxios.get('https://api.example.com/endpoint', { params: { key: 'your_api_key' } })\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error(error);\n  });\n```\n4. Handle responses and errors based on the API documentation.\n5. You can also use `request` or `node-fetch` for making API requests.\n\n📚 Reference: https://axios-http.com/docs/req_config"
    },
    {
        "question": "How to use MongoDB with Node.js?",
        "label": "nodejs, mongodb",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in JSON-like documents. It integrates easily with Node.js applications.",
        "answer": "Steps to use MongoDB with Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n2. Set up a connection to the MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Define a Mongoose schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', userSchema);\n```\n4. Use Mongoose methods to interact with the database:\n```javascript\n// Create a new user\nconst user = new User({ name: 'John', email: 'john@example.com' });\nuser.save()\n  .then(() => console.log('User saved'))\n  .catch(error => console.error(error));\n```\n5. Perform CRUD operations (Create, Read, Update, Delete) with MongoDB using Mongoose.\n\n📚 Reference: https://mongoosejs.com/docs/guide.html",
        "start_char": 0,
        "end_char": 920,
        "key_answer": "Steps to use MongoDB with Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n2. Set up a connection to the MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Define a Mongoose schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', userSchema);\n```\n4. Use Mongoose methods to interact with the database:\n```javascript\n// Create a new user\nconst user = new User({ name: 'John', email: 'john@example.com' });\nuser.save()\n  .then(() => console.log('User saved'))\n  .catch(error => console.error(error));\n```\n5. Perform CRUD operations (Create, Read, Update, Delete) with MongoDB using Mongoose.\n\n📚 Reference: https://mongoosejs.com/docs/guide.html"
    },
    {
        "question": "How to set up unit testing in Node.js with Mocha and Chai?",
        "label": "nodejs, testing, mocha, chai",
        "language": "en",
        "context": "Unit testing ensures that individual components of your application work as expected. Mocha and Chai are popular libraries for writing and running tests in Node.js.",
        "answer": "Steps to set up unit testing in Node.js with Mocha and Chai:\n\n1. Install Mocha and Chai:\n```bash\nnpm install mocha chai --save-dev\n```\n2. Create a test file, e.g., `test/test.js`:\n```javascript\nconst assert = require('chai').assert;\n\ndescribe('MyFunction', function () {\n  it('should return true', function () {\n    assert.equal(true, true);\n  });\n});\n```\n3. Add a test script to `package.json`:\n```json\n\"scripts\": {\n  \"test\": \"mocha\"\n}\n```\n4. Run the tests:\n```bash\nnpm test\n```\n5. You can now write more tests for your functions using Mocha and Chai.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/mocha-chai-and-sinon-for-nodejs-unit-testing",
        "start_char": 0,
        "end_char": 694,
        "key_answer": "Steps to set up unit testing in Node.js with Mocha and Chai:\n\n1. Install Mocha and Chai:\n```bash\nnpm install mocha chai --save-dev\n```\n2. Create a test file, e.g., `test/test.js`:\n```javascript\nconst assert = require('chai').assert;\n\ndescribe('MyFunction', function () {\n  it('should return true', function () {\n    assert.equal(true, true);\n  });\n});\n```\n3. Add a test script to `package.json`:\n```json\n\"scripts\": {\n  \"test\": \"mocha\"\n}\n```\n4. Run the tests:\n```bash\nnpm test\n```\n5. You can now write more tests for your functions using Mocha and Chai.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/mocha-chai-and-sinon-for-nodejs-unit-testing"
    },
    {
        "question": "How to use async/await in Node.js for asynchronous operations?",
        "label": "nodejs, async-await, asynchronous",
        "language": "en",
        "context": "Async/await is a feature in JavaScript that allows for writing asynchronous code in a more readable manner.",
        "answer": "Steps to use async/await in Node.js:\n\n1. Define an `async` function to handle asynchronous operations:\n```javascript\nasync function fetchData() {\n  const data = await fetch('https://api.example.com/data');\n  const json = await data.json();\n  return json;\n}\n```\n2. Call the `async` function and handle errors using `try-catch`:\n```javascript\nasync function fetchData() {\n  try {\n    const data = await fetch('https://api.example.com/data');\n    const json = await data.json();\n    return json;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n3. Use `await` with asynchronous operations like API requests, reading files, etc.\n4. Async/await makes code cleaner and easier to debug compared to callbacks and promises.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 862,
        "key_answer": "Steps to use async/await in Node.js:\n\n1. Define an `async` function to handle asynchronous operations:\n```javascript\nasync function fetchData() {\n  const data = await fetch('https://api.example.com/data');\n  const json = await data.json();\n  return json;\n}\n```\n2. Call the `async` function and handle errors using `try-catch`:\n```javascript\nasync function fetchData() {\n  try {\n    const data = await fetch('https://api.example.com/data');\n    const json = await data.json();\n    return json;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n3. Use `await` with asynchronous operations like API requests, reading files, etc.\n4. Async/await makes code cleaner and easier to debug compared to callbacks and promises.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to deploy a Node.js application on AWS?",
        "label": "nodejs, aws, deployment",
        "language": "en",
        "context": "AWS (Amazon Web Services) provides scalable infrastructure for deploying Node.js applications in the cloud.",
        "answer": "Steps to deploy a Node.js application on AWS:\n\n1. Set up an AWS EC2 instance (Amazon Linux or Ubuntu).\n2. SSH into your instance:\n```bash\nssh -i my-key.pem ec2-user@my-ec2-public-ip\n```\n3. Install Node.js on your EC2 instance:\n```bash\nsudo yum install nodejs -y\n```\n4. Upload your Node.js application files to the EC2 instance.\n5. Install application dependencies:\n```bash\nnpm install\n```\n6. Start your application:\n```bash\nnode app.js\n```\n7. To keep the application running in the background, use `pm2`:\n```bash\nnpm install -g pm2\npm2 start app.js\n```\n8. Configure security groups and enable port 80 (HTTP) or 443 (HTTPS) to allow web traffic.\n9. Your Node.js application should now be accessible through the public IP address of your EC2 instance.\n\n📚 Reference: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html",
        "start_char": 0,
        "end_char": 863,
        "key_answer": "Steps to deploy a Node.js application on AWS:\n\n1. Set up an AWS EC2 instance (Amazon Linux or Ubuntu).\n2. SSH into your instance:\n```bash\nssh -i my-key.pem ec2-user@my-ec2-public-ip\n```\n3. Install Node.js on your EC2 instance:\n```bash\nsudo yum install nodejs -y\n```\n4. Upload your Node.js application files to the EC2 instance.\n5. Install application dependencies:\n```bash\nnpm install\n```\n6. Start your application:\n```bash\nnode app.js\n```\n7. To keep the application running in the background, use `pm2`:\n```bash\nnpm install -g pm2\npm2 start app.js\n```\n8. Configure security groups and enable port 80 (HTTP) or 443 (HTTPS) to allow web traffic.\n9. Your Node.js application should now be accessible through the public IP address of your EC2 instance.\n\n📚 Reference: https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EC2_GetStarted.html"
    },
    {
        "question": "How to create a chat application in Node.js?",
        "label": "nodejs, chat-application, socket.io",
        "language": "en",
        "context": "A real-time chat application can be built using WebSockets and libraries like `Socket.io` in Node.js.",
        "answer": "Steps to create a chat application in Node.js:\n\n1. Install `express` and `socket.io`:\n```bash\nnpm install express socket.io\n```\n2. Set up your Express server and Socket.io:\n```javascript\nconst express = require('express');\nconst socket = require('socket.io');\n\nconst app = express();\nconst server = app.listen(3000);\nconst io = socket(server);\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n```\n3. Create a simple frontend to send and display messages:\n```html\n<html>\n  <body>\n    <ul id=\"messages\"></ul>\n    <form action=\"\" id=\"form\" autocomplete=\"off\">\n      <input id=\"input\" autocomplete=\"off\" />\n      <button>Send</button>\n    </form>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js\"></script>\n    <script>\n      var socket = io();\n      var form = document.getElementById('form');\n      var input = document.getElementById('input');\n\n      form.addEventListener('submit', function (e) {\n        e.preventDefault();\n        socket.emit('chat message', input.value);\n        input.value = '';\n      });\n\n      socket.on('chat message', function (msg) {\n        var item = document.createElement('li');\n        item.textContent = msg;\n        document.getElementById('messages').appendChild(item);\n      });\n    </script>\n  </body>\n</html>\n```\n4. Run the server and open the app in the browser. Multiple users can join the chat.\n\n📚 Reference: https://socket.io/docs/v4/",
        "start_char": 0,
        "end_char": 1669,
        "key_answer": "Steps to create a chat application in Node.js:\n\n1. Install `express` and `socket.io`:\n```bash\nnpm install express socket.io\n```\n2. Set up your Express server and Socket.io:\n```javascript\nconst express = require('express');\nconst socket = require('socket.io');\n\nconst app = express();\nconst server = app.listen(3000);\nconst io = socket(server);\n\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/index.html');\n});\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n```\n3. Create a simple frontend to send and display messages:\n```html\n<html>\n  <body>\n    <ul id=\"messages\"></ul>\n    <form action=\"\" id=\"form\" autocomplete=\"off\">\n      <input id=\"input\" autocomplete=\"off\" />\n      <button>Send</button>\n    </form>\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.min.js\"></script>\n    <script>\n      var socket = io();\n      var form = document.getElementById('form');\n      var input = document.getElementById('input');\n\n      form.addEventListener('submit', function (e) {\n        e.preventDefault();\n        socket.emit('chat message', input.value);\n        input.value = '';\n      });\n\n      socket.on('chat message', function (msg) {\n        var item = document.createElement('li');\n        item.textContent = msg;\n        document.getElementById('messages').appendChild(item);\n      });\n    </script>\n  </body>\n</html>\n```\n4. Run the server and open the app in the browser. Multiple users can join the chat.\n\n📚 Reference: https://socket.io/docs/v4/"
    },
    {
        "question": "How to implement file upload in Node.js?",
        "label": "nodejs, file-upload",
        "language": "en",
        "context": "Node.js provides modules like `multer` to handle file uploads in web applications.",
        "answer": "Steps to implement file upload in Node.js:\n\n1. Install `multer` to handle file uploads:\n```bash\nnpm install multer\n```\n2. Set up a basic Express server:\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n```\n3. Create an HTML form to send the file:\n```html\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"file\">\n  <button type=\"submit\">Upload</button>\n</form>\n```\n4. The file will be uploaded to the `uploads/` directory.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 844,
        "key_answer": "Steps to implement file upload in Node.js:\n\n1. Install `multer` to handle file uploads:\n```bash\nnpm install multer\n```\n2. Set up a basic Express server:\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst app = express();\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n\napp.listen(3000, () => {\n  console.log('Server started on port 3000');\n});\n```\n3. Create an HTML form to send the file:\n```html\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n  <input type=\"file\" name=\"file\">\n  <button type=\"submit\">Upload</button>\n</form>\n```\n4. The file will be uploaded to the `uploads/` directory.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to implement a search feature in Node.js?",
        "label": "nodejs, search, feature",
        "language": "en",
        "context": "Adding a search feature allows users to search for data in your application.",
        "answer": "Steps to implement a search feature in Node.js:\n\n1. Define a route to handle the search request:\n```javascript\napp.get('/search', (req, res) => {\n  const query = req.query.q;\n  // Perform the search logic here\n  res.send('Search results for: ' + query);\n});\n```\n2. Implement the search logic (e.g., search through a database or an array):\n```javascript\nconst data = ['apple', 'banana', 'orange'];\nconst result = data.filter(item => item.includes(query));\nres.json(result);\n```\n3. You can also integrate with a search engine like Elasticsearch for more complex search functionality.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/express-search-nodejs-mongodb",
        "start_char": 0,
        "end_char": 692,
        "key_answer": "Steps to implement a search feature in Node.js:\n\n1. Define a route to handle the search request:\n```javascript\napp.get('/search', (req, res) => {\n  const query = req.query.q;\n  // Perform the search logic here\n  res.send('Search results for: ' + query);\n});\n```\n2. Implement the search logic (e.g., search through a database or an array):\n```javascript\nconst data = ['apple', 'banana', 'orange'];\nconst result = data.filter(item => item.includes(query));\nres.json(result);\n```\n3. You can also integrate with a search engine like Elasticsearch for more complex search functionality.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/express-search-nodejs-mongodb"
    },
    {
        "question": "How to set up MongoDB with Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database, and it's often used with Node.js to store data in a flexible, document-oriented way.",
        "answer": "Steps to set up MongoDB with Node.js:\n\n1. Install MongoDB in your local machine or use a cloud service like MongoDB Atlas.\n2. Install the `mongoose` package to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n3. Connect to MongoDB in your Node.js application:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n}).then(() => {\n  console.log('Connected to MongoDB');\n}).catch((error) => {\n  console.error('Error connecting to MongoDB:', error);\n});\n```\n4. Define a schema and model to interact with a collection in MongoDB:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  age: Number,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n5. Use the model to create and retrieve documents:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 25 });\nnewUser.save().then(() => console.log('User saved'));\n```\n6. Now you can use MongoDB with Node.js to store and retrieve data.\n\n📚 Reference: https://mongoosejs.com/docs/index.html",
        "start_char": 0,
        "end_char": 1142,
        "key_answer": "Steps to set up MongoDB with Node.js:\n\n1. Install MongoDB in your local machine or use a cloud service like MongoDB Atlas.\n2. Install the `mongoose` package to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n3. Connect to MongoDB in your Node.js application:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n}).then(() => {\n  console.log('Connected to MongoDB');\n}).catch((error) => {\n  console.error('Error connecting to MongoDB:', error);\n});\n```\n4. Define a schema and model to interact with a collection in MongoDB:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  age: Number,\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n5. Use the model to create and retrieve documents:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 25 });\nnewUser.save().then(() => console.log('User saved'));\n```\n6. Now you can use MongoDB with Node.js to store and retrieve data.\n\n📚 Reference: https://mongoosejs.com/docs/index.html"
    },
    {
        "question": "How to perform data validation in Node.js?",
        "label": "nodejs, data-validation, validation",
        "language": "en",
        "context": "Data validation is an essential part of any application to ensure that the incoming data is correct and in the expected format.",
        "answer": "Steps to perform data validation in Node.js:\n\n1. Install `express-validator` to handle validation:\n```bash\nnpm install express-validator\n```\n2. Use the validation functions in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register',\n  body('email').isEmail().withMessage('Invalid email'),\n  body('password').isLength({ min: 5 }).withMessage('Password should be at least 5 characters'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('User registered');\n  }\n);\n```\n3. Use `validationResult` to check for validation errors.\n4. You can also validate data before saving it to a database or performing other actions.\n\n📚 Reference: https://www.npmjs.com/package/express-validator",
        "start_char": 0,
        "end_char": 880,
        "key_answer": "Steps to perform data validation in Node.js:\n\n1. Install `express-validator` to handle validation:\n```bash\nnpm install express-validator\n```\n2. Use the validation functions in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register',\n  body('email').isEmail().withMessage('Invalid email'),\n  body('password').isLength({ min: 5 }).withMessage('Password should be at least 5 characters'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('User registered');\n  }\n);\n```\n3. Use `validationResult` to check for validation errors.\n4. You can also validate data before saving it to a database or performing other actions.\n\n📚 Reference: https://www.npmjs.com/package/express-validator"
    },
    {
        "question": "How to create a REST API in Node.js using Express?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "Creating a REST API with Node.js and Express is a common use case for building web applications and services.",
        "answer": "Steps to create a REST API in Node.js using Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n2. Set up your Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n```\n3. Create API endpoints to handle CRUD operations (Create, Read, Update, Delete):\n```javascript\n// Create\napp.post('/api/users', (req, res) => {\n  res.send('User created');\n});\n\n// Read\napp.get('/api/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\n// Update\napp.put('/api/users/:id', (req, res) => {\n  res.send('User updated');\n});\n\n// Delete\napp.delete('/api/users/:id', (req, res) => {\n  res.send('User deleted');\n});\n```\n4. Your API is now ready to perform CRUD operations.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 983,
        "key_answer": "Steps to create a REST API in Node.js using Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n2. Set up your Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n```\n3. Create API endpoints to handle CRUD operations (Create, Read, Update, Delete):\n```javascript\n// Create\napp.post('/api/users', (req, res) => {\n  res.send('User created');\n});\n\n// Read\napp.get('/api/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\n// Update\napp.put('/api/users/:id', (req, res) => {\n  res.send('User updated');\n});\n\n// Delete\napp.delete('/api/users/:id', (req, res) => {\n  res.send('User deleted');\n});\n```\n4. Your API is now ready to perform CRUD operations.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to integrate Google Maps API in Node.js?",
        "label": "nodejs, google-maps, api",
        "language": "en",
        "context": "Google Maps API allows you to integrate maps and location services into your Node.js application.",
        "answer": "Steps to integrate Google Maps API in Node.js:\n\n1. Get your Google Maps API key from the Google Cloud Console.\n2. Install the `@googlemaps/google-maps-services-js` package:\n```bash\nnpm install @googlemaps/google-maps-services-js\n```\n3. Initialize the Google Maps client in your Node.js application:\n```javascript\nconst googleMapsClient = require('@googlemaps/google-maps-services-js').Client;\n\nconst client = new googleMapsClient({\n  key: 'YOUR_API_KEY',\n});\n```\n4. Use the client to make API requests:\n```javascript\nclient.geocode({ address: '1600 Amphitheatre Parkway, Mountain View, CA' }).then(response => {\n  console.log(response.data.results[0].formatted_address);\n}).catch(error => {\n  console.error('Error:', error);\n});\n```\n5. You can use various Google Maps services such as Geocoding, Places, Routes, etc.\n\n📚 Reference: https://developers.google.com/maps/documentation/javascript/tutorial",
        "start_char": 0,
        "end_char": 924,
        "key_answer": "Steps to integrate Google Maps API in Node.js:\n\n1. Get your Google Maps API key from the Google Cloud Console.\n2. Install the `@googlemaps/google-maps-services-js` package:\n```bash\nnpm install @googlemaps/google-maps-services-js\n```\n3. Initialize the Google Maps client in your Node.js application:\n```javascript\nconst googleMapsClient = require('@googlemaps/google-maps-services-js').Client;\n\nconst client = new googleMapsClient({\n  key: 'YOUR_API_KEY',\n});\n```\n4. Use the client to make API requests:\n```javascript\nclient.geocode({ address: '1600 Amphitheatre Parkway, Mountain View, CA' }).then(response => {\n  console.log(response.data.results[0].formatted_address);\n}).catch(error => {\n  console.error('Error:', error);\n});\n```\n5. You can use various Google Maps services such as Geocoding, Places, Routes, etc.\n\n📚 Reference: https://developers.google.com/maps/documentation/javascript/tutorial"
    },
    {
        "question": "How to use Redis with Node.js?",
        "label": "nodejs, redis, caching",
        "language": "en",
        "context": "Redis is an in-memory data store often used for caching, session storage, and pub/sub messaging.",
        "answer": "Steps to use Redis with Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Set up a Redis client in your Node.js application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function () {\n  console.log('Connected to Redis');\n});\n```\n3. Use Redis to store and retrieve data:\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', function (err, reply) {\n  console.log(reply); // Will print 'value'\n});\n```\n4. Redis is useful for caching frequently accessed data to improve application performance.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 669,
        "key_answer": "Steps to use Redis with Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Set up a Redis client in your Node.js application:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function () {\n  console.log('Connected to Redis');\n});\n```\n3. Use Redis to store and retrieve data:\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', function (err, reply) {\n  console.log(reply); // Will print 'value'\n});\n```\n4. Redis is useful for caching frequently accessed data to improve application performance.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to implement OAuth authentication in Node.js?",
        "label": "nodejs, oauth, authentication",
        "language": "en",
        "context": "OAuth is an open standard for authorization, commonly used to allow third-party services to access user data without exposing user credentials.",
        "answer": "Steps to implement OAuth authentication in Node.js:\n\n1. Install the `passport` and `passport-oauth` packages:\n```bash\nnpm install passport passport-oauth\n```\n2. Set up Passport for OAuth authentication:\n```javascript\nconst passport = require('passport');\nconst OAuthStrategy = require('passport-oauth').OAuthStrategy;\n\npassport.use('oauth', new OAuthStrategy({\n  requestTokenURL: 'https://provider.com/oauth/request_token',\n  accessTokenURL: 'https://provider.com/oauth/access_token',\n  userAuthorizationURL: 'https://provider.com/oauth/authorize',\n  consumerKey: 'your_consumer_key',\n  consumerSecret: 'your_consumer_secret',\n}, function (token, tokenSecret, profile, done) {\n  // Save profile or do something with user data\n  done(null, profile);\n}));\n```\n3. Configure routes for OAuth authentication:\n```javascript\napp.get('/auth/oauth', passport.authenticate('oauth'));\napp.get('/auth/oauth/callback', passport.authenticate('oauth', {\n  successRedirect: '/profile',\n  failureRedirect: '/login',\n}));\n```\n4. Handle user login and authorization securely using OAuth.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/passport-oauth2-node-js",
        "start_char": 0,
        "end_char": 1187,
        "key_answer": "Steps to implement OAuth authentication in Node.js:\n\n1. Install the `passport` and `passport-oauth` packages:\n```bash\nnpm install passport passport-oauth\n```\n2. Set up Passport for OAuth authentication:\n```javascript\nconst passport = require('passport');\nconst OAuthStrategy = require('passport-oauth').OAuthStrategy;\n\npassport.use('oauth', new OAuthStrategy({\n  requestTokenURL: 'https://provider.com/oauth/request_token',\n  accessTokenURL: 'https://provider.com/oauth/access_token',\n  userAuthorizationURL: 'https://provider.com/oauth/authorize',\n  consumerKey: 'your_consumer_key',\n  consumerSecret: 'your_consumer_secret',\n}, function (token, tokenSecret, profile, done) {\n  // Save profile or do something with user data\n  done(null, profile);\n}));\n```\n3. Configure routes for OAuth authentication:\n```javascript\napp.get('/auth/oauth', passport.authenticate('oauth'));\napp.get('/auth/oauth/callback', passport.authenticate('oauth', {\n  successRedirect: '/profile',\n  failureRedirect: '/login',\n}));\n```\n4. Handle user login and authorization securely using OAuth.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/passport-oauth2-node-js"
    },
    {
        "question": "How to create a simple chat application with Socket.io?",
        "label": "nodejs, socket.io, chat",
        "language": "en",
        "context": "Socket.io is a library for real-time web applications, perfect for building chat applications.",
        "answer": "Steps to create a simple chat application with Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n2. Set up the server and client:\n```javascript\n// Server-side (Node.js)\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst app = http.createServer((req, res) => res.end('Hello, world!'));\nconst io = socketIo(app);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n\napp.listen(3000);\n\n// Client-side (HTML)\n<script src='/socket.io/socket.io.js'></script>\n<script>\n  var socket = io();\n  socket.emit('chat message', 'Hello, world!');\n  socket.on('chat message', function(msg){\n    console.log(msg);\n  });\n</script>\n```\n3. The chat app is now set up, allowing real-time communication between users.\n\n📚 Reference: https://socket.io/docs/v4/",
        "start_char": 0,
        "end_char": 994,
        "key_answer": "Steps to create a simple chat application with Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n2. Set up the server and client:\n```javascript\n// Server-side (Node.js)\nconst http = require('http');\nconst socketIo = require('socket.io');\nconst app = http.createServer((req, res) => res.end('Hello, world!'));\nconst io = socketIo(app);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('disconnect', () => {\n    console.log('User disconnected');\n  });\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n\napp.listen(3000);\n\n// Client-side (HTML)\n<script src='/socket.io/socket.io.js'></script>\n<script>\n  var socket = io();\n  socket.emit('chat message', 'Hello, world!');\n  socket.on('chat message', function(msg){\n    console.log(msg);\n  });\n</script>\n```\n3. The chat app is now set up, allowing real-time communication between users.\n\n📚 Reference: https://socket.io/docs/v4/"
    },
    {
        "question": "How to implement file upload in Express.js?",
        "label": "nodejs, express, file-upload",
        "language": "en",
        "context": "Handling file uploads is a common task when building web applications, especially when users need to upload images or documents.",
        "answer": "Steps to implement file upload in Express.js:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n2. Set up multer in your Express app:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\nconst upload = multer({ storage: storage });\n```\n3. Create a POST route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n4. Make sure you send the file in the correct format from the client side.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 777,
        "key_answer": "Steps to implement file upload in Express.js:\n\n1. Install the `multer` package:\n```bash\nnpm install multer\n```\n2. Set up multer in your Express app:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\nconst upload = multer({ storage: storage });\n```\n3. Create a POST route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n4. Make sure you send the file in the correct format from the client side.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to connect to MySQL from Node.js?",
        "label": "nodejs, mysql, database",
        "language": "en",
        "context": "MySQL is a widely used relational database management system. You can connect to MySQL from Node.js using the `mysql` package.",
        "answer": "Steps to connect to MySQL from Node.js:\n\n1. Install the `mysql` package:\n```bash\nnpm install mysql\n```\n2. Set up a connection to your MySQL database:\n```javascript\nconst mysql = require('mysql');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydatabase'\n});\n\nconnection.connect((err) => {\n  if (err) {\n    console.error('Error connecting to the database:', err.stack);\n    return;\n  }\n  console.log('Connected to MySQL database');\n});\n```\n3. Run queries to interact with the database:\n```javascript\nconnection.query('SELECT * FROM users', (err, results, fields) => {\n  if (err) throw err;\n  console.log('Results:', results);\n});\n```\n4. Remember to close the connection after you're done:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql",
        "start_char": 0,
        "end_char": 883,
        "key_answer": "Steps to connect to MySQL from Node.js:\n\n1. Install the `mysql` package:\n```bash\nnpm install mysql\n```\n2. Set up a connection to your MySQL database:\n```javascript\nconst mysql = require('mysql');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mydatabase'\n});\n\nconnection.connect((err) => {\n  if (err) {\n    console.error('Error connecting to the database:', err.stack);\n    return;\n  }\n  console.log('Connected to MySQL database');\n});\n```\n3. Run queries to interact with the database:\n```javascript\nconnection.query('SELECT * FROM users', (err, results, fields) => {\n  if (err) throw err;\n  console.log('Results:', results);\n});\n```\n4. Remember to close the connection after you're done:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql"
    },
    {
        "question": "How to implement a basic authentication in Express.js?",
        "label": "nodejs, express, authentication",
        "language": "en",
        "context": "Basic Authentication is a simple authentication scheme where the client sends the username and password in the `Authorization` header.",
        "answer": "Steps to implement basic authentication in Express.js:\n\n1. Install the `basic-auth` package:\n```bash\nnpm install basic-auth\n```\n2. Set up basic authentication middleware:\n```javascript\nconst express = require('express');\nconst basicAuth = require('basic-auth');\n\nconst app = express();\napp.use((req, res, next) => {\n  const user = basicAuth(req);\n  if (!user || user.name !== 'admin' || user.pass !== 'password') {\n    return res.status(401).send('Unauthorized');\n  }\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send('Hello, authenticated user!');\n});\n\napp.listen(3000);\n```\n3. Now your application requires the correct username and password for access.\n\n📚 Reference: https://www.npmjs.com/package/basic-auth",
        "start_char": 0,
        "end_char": 742,
        "key_answer": "Steps to implement basic authentication in Express.js:\n\n1. Install the `basic-auth` package:\n```bash\nnpm install basic-auth\n```\n2. Set up basic authentication middleware:\n```javascript\nconst express = require('express');\nconst basicAuth = require('basic-auth');\n\nconst app = express();\napp.use((req, res, next) => {\n  const user = basicAuth(req);\n  if (!user || user.name !== 'admin' || user.pass !== 'password') {\n    return res.status(401).send('Unauthorized');\n  }\n  next();\n});\n\napp.get('/', (req, res) => {\n  res.send('Hello, authenticated user!');\n});\n\napp.listen(3000);\n```\n3. Now your application requires the correct username and password for access.\n\n📚 Reference: https://www.npmjs.com/package/basic-auth"
    },
    {
        "question": "How to use JWT for token-based authentication in Node.js?",
        "label": "nodejs, jwt, token-based-authentication",
        "language": "en",
        "context": "Token-based authentication, particularly JWT, is widely used in modern web applications for securely managing user sessions.",
        "answer": "Steps to use JWT for token-based authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n2. Set up the authentication route to issue a token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst users = [{ id: 1, username: 'user1', password: 'password' }];\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((user) => user.username === username);\n  if (user && user.password === password) {\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n3. Protect your routes with the JWT token:\n```javascript\nfunction authenticateToken(req, res, next) {\n  const token = req.header('Authorization')?.split(' ')[1];\n  if (!token) return res.status(401).send('Access denied');\n  jwt.verify(token, 'secret', (err, user) => {\n    if (err) return res.status(403).send('Invalid token');\n    req.user = user;\n    next();\n  });\n}\n\napp.get('/protected', authenticateToken, (req, res) => {\n  res.send('Protected data');\n});\n```\n4. This will ensure secure communication with token-based authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-express",
        "start_char": 0,
        "end_char": 1419,
        "key_answer": "Steps to use JWT for token-based authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n2. Set up the authentication route to issue a token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n\nconst users = [{ id: 1, username: 'user1', password: 'password' }];\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((user) => user.username === username);\n  if (user && user.password === password) {\n    const token = jwt.sign({ id: user.id }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n3. Protect your routes with the JWT token:\n```javascript\nfunction authenticateToken(req, res, next) {\n  const token = req.header('Authorization')?.split(' ')[1];\n  if (!token) return res.status(401).send('Access denied');\n  jwt.verify(token, 'secret', (err, user) => {\n    if (err) return res.status(403).send('Invalid token');\n    req.user = user;\n    next();\n  });\n}\n\napp.get('/protected', authenticateToken, (req, res) => {\n  res.send('Protected data');\n});\n```\n4. This will ensure secure communication with token-based authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials/nodejs-jwt-express"
    },
    {
        "question": "How to implement pagination in Express.js with MongoDB?",
        "label": "nodejs, express, mongo, pagination",
        "language": "en",
        "context": "Pagination is important for displaying large datasets in a user-friendly manner, and can be implemented using MongoDB and Express.",
        "answer": "Steps to implement pagination in Express.js with MongoDB:\n\n1. Install necessary packages:\n```bash\nnpm install mongoose express\n```\n2. Set up a MongoDB connection using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Create a model for your data:\n```javascript\nconst Item = mongoose.model('Item', new mongoose.Schema({\n  name: String,\n  description: String\n}));\n```\n4. Implement pagination in your route:\n```javascript\napp.get('/items', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const pageSize = parseInt(req.query.pageSize) || 10;\n  const items = await Item.find().skip((page - 1) * pageSize).limit(pageSize);\n  res.json(items);\n});\n```\n5. You can now paginate your data easily with MongoDB and Express.\n\n📚 Reference: https://mongoosejs.com/docs/pagination.html",
        "start_char": 0,
        "end_char": 940,
        "key_answer": "Steps to implement pagination in Express.js with MongoDB:\n\n1. Install necessary packages:\n```bash\nnpm install mongoose express\n```\n2. Set up a MongoDB connection using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n3. Create a model for your data:\n```javascript\nconst Item = mongoose.model('Item', new mongoose.Schema({\n  name: String,\n  description: String\n}));\n```\n4. Implement pagination in your route:\n```javascript\napp.get('/items', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const pageSize = parseInt(req.query.pageSize) || 10;\n  const items = await Item.find().skip((page - 1) * pageSize).limit(pageSize);\n  res.json(items);\n});\n```\n5. You can now paginate your data easily with MongoDB and Express.\n\n📚 Reference: https://mongoosejs.com/docs/pagination.html"
    },
    {
        "question": "How to implement email sending in Node.js?",
        "label": "nodejs, email, nodemailer",
        "language": "en",
        "context": "Sending emails is a common feature in many web applications, such as for account verification or notifications.",
        "answer": "Steps to implement email sending in Node.js using Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n2. Set up Nodemailer transport:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'This is a test email'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Ensure that you replace the email and password with actual credentials.\n\n📚 Reference: https://www.npmjs.com/package/nodemailer",
        "start_char": 0,
        "end_char": 874,
        "key_answer": "Steps to implement email sending in Node.js using Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n2. Set up Nodemailer transport:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'This is a test email'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Ensure that you replace the email and password with actual credentials.\n\n📚 Reference: https://www.npmjs.com/package/nodemailer"
    },
    {
        "question": "How to secure an Express.js application?",
        "label": "nodejs, express, security",
        "language": "en",
        "context": "Security is an essential part of web development, especially in production environments.",
        "answer": "Steps to secure an Express.js application:\n\n1. Install Helmet.js to secure HTTP headers:\n```bash\nnpm install helmet\n```\n2. Use Helmet in your Express app:\n```javascript\nconst helmet = require('helmet');\nconst express = require('express');\nconst app = express();\n\napp.use(helmet());\n```\n3. Enable CORS to allow cross-origin requests safely:\n```bash\nnpm install cors\n```\n4. Use the CORS middleware:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n5. Use HTTPS for secure communication (requires SSL certificate).\n6. Sanitize user inputs to prevent SQL injection, XSS attacks, etc.\n7. Implement proper authentication and authorization.\n\n📚 Reference: https://expressjs.com/en/advanced/best-practice-security.html",
        "start_char": 0,
        "end_char": 752,
        "key_answer": "Steps to secure an Express.js application:\n\n1. Install Helmet.js to secure HTTP headers:\n```bash\nnpm install helmet\n```\n2. Use Helmet in your Express app:\n```javascript\nconst helmet = require('helmet');\nconst express = require('express');\nconst app = express();\n\napp.use(helmet());\n```\n3. Enable CORS to allow cross-origin requests safely:\n```bash\nnpm install cors\n```\n4. Use the CORS middleware:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n5. Use HTTPS for secure communication (requires SSL certificate).\n6. Sanitize user inputs to prevent SQL injection, XSS attacks, etc.\n7. Implement proper authentication and authorization.\n\n📚 Reference: https://expressjs.com/en/advanced/best-practice-security.html"
    },
    {
        "question": "How to set up MongoDB with Mongoose in Node.js?",
        "label": "nodejs, mongodb, mongoose",
        "language": "en",
        "context": "MongoDB is a NoSQL database, and Mongoose is an ODM (Object Data Modeling) library that provides a schema-based solution to model your data in MongoDB.",
        "answer": "Steps to set up MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch((err) => console.log('MongoDB connection error:', err));\n```\n3. Define a schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n4. Use the model to interact with the database:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 30, email: 'john@example.com' });\nnewUser.save().then(() => console.log('User saved')); \n```\n5. You can now interact with your MongoDB database using Mongoose.\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 957,
        "key_answer": "Steps to set up MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch((err) => console.log('MongoDB connection error:', err));\n```\n3. Define a schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n4. Use the model to interact with the database:\n```javascript\nconst newUser = new User({ name: 'John Doe', age: 30, email: 'john@example.com' });\nnewUser.save().then(() => console.log('User saved')); \n```\n5. You can now interact with your MongoDB database using Mongoose.\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to set up CORS in Express.js?",
        "label": "nodejs, express, cors",
        "language": "en",
        "context": "CORS (Cross-Origin Resource Sharing) allows you to manage how resources on your server can be requested from different domains.",
        "answer": "Steps to set up CORS in Express.js:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n2. Use CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\nconst express = require('express');\nconst app = express();\n\napp.use(cors());\n```\n3. Optionally, customize CORS options to restrict which origins can access your resources:\n```javascript\napp.use(cors({ origin: 'http://example.com' }));\n```\n4. You can now manage CORS settings for your Express app.\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 550,
        "key_answer": "Steps to set up CORS in Express.js:\n\n1. Install the `cors` package:\n```bash\nnpm install cors\n```\n2. Use CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\nconst express = require('express');\nconst app = express();\n\napp.use(cors());\n```\n3. Optionally, customize CORS options to restrict which origins can access your resources:\n```javascript\napp.use(cors({ origin: 'http://example.com' }));\n```\n4. You can now manage CORS settings for your Express app.\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to implement user registration and login in Express.js?",
        "label": "nodejs, express, authentication",
        "language": "en",
        "context": "User authentication is a common feature in most web applications to secure sensitive user data.",
        "answer": "Steps to implement user registration and login in Express.js:\n\n1. Install necessary packages:\n```bash\nnpm install bcryptjs jsonwebtoken express\n```\n2. Set up Express app and user registration route:\n```javascript\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n  users.push({ username, password: hashedPassword });\n  res.status(201).send('User registered');\n});\n```\n3. Set up login route:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((u) => u.username === username);\n  if (user && await bcrypt.compare(password, user.password)) {\n    const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n4. Now, you have basic registration and login functionality.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 1258,
        "key_answer": "Steps to implement user registration and login in Express.js:\n\n1. Install necessary packages:\n```bash\nnpm install bcryptjs jsonwebtoken express\n```\n2. Set up Express app and user registration route:\n```javascript\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n  users.push({ username, password: hashedPassword });\n  res.status(201).send('User registered');\n});\n```\n3. Set up login route:\n```javascript\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((u) => u.username === username);\n  if (user && await bcrypt.compare(password, user.password)) {\n    const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n4. Now, you have basic registration and login functionality.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to implement password hashing in Node.js?",
        "label": "nodejs, security, bcrypt",
        "language": "en",
        "context": "Password hashing is a security measure used to protect sensitive user data from being compromised.",
        "answer": "Steps to implement password hashing in Node.js using bcrypt:\n\n1. Install bcrypt:\n```bash\nnpm install bcryptjs\n```\n2. Hash a password:\n```javascript\nconst bcrypt = require('bcryptjs');\n\nconst password = 'my-secret-password';\nconst salt = bcrypt.genSaltSync(10);\nconst hashedPassword = bcrypt.hashSync(password, salt);\nconsole.log(hashedPassword);\n```\n3. Compare a password with a hashed password:\n```javascript\nconst isMatch = bcrypt.compareSync('my-secret-password', hashedPassword);\nconsole.log(isMatch); // true or false\n```\n4. You can now hash and compare passwords securely.\n\n📚 Reference: https://www.npmjs.com/package/bcryptjs",
        "start_char": 0,
        "end_char": 653,
        "key_answer": "Steps to implement password hashing in Node.js using bcrypt:\n\n1. Install bcrypt:\n```bash\nnpm install bcryptjs\n```\n2. Hash a password:\n```javascript\nconst bcrypt = require('bcryptjs');\n\nconst password = 'my-secret-password';\nconst salt = bcrypt.genSaltSync(10);\nconst hashedPassword = bcrypt.hashSync(password, salt);\nconsole.log(hashedPassword);\n```\n3. Compare a password with a hashed password:\n```javascript\nconst isMatch = bcrypt.compareSync('my-secret-password', hashedPassword);\nconsole.log(isMatch); // true or false\n```\n4. You can now hash and compare passwords securely.\n\n📚 Reference: https://www.npmjs.com/package/bcryptjs"
    },
    {
        "question": "How to set up JWT authentication in Express.js?",
        "label": "nodejs, express, jwt, authentication",
        "language": "en",
        "context": "JWT (JSON Web Tokens) is a secure method for transmitting user identity between the client and server.",
        "answer": "Steps to set up JWT authentication in Express.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n2. Create a route to authenticate users:\n```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Assume user validation is done\n  const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Create a middleware to verify the token:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('x-auth-token');\n  if (!token) {\n    return res.status(401).send('Access denied');\n  }\n  try {\n    const decoded = jwt.verify(token, 'secret');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(400).send('Invalid token');\n  }\n};\n```\n4. Use this middleware on protected routes.\n5. Your Express.js app is now set up with JWT authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 1106,
        "key_answer": "Steps to set up JWT authentication in Express.js:\n\n1. Install necessary packages:\n```bash\nnpm install jsonwebtoken express\n```\n2. Create a route to authenticate users:\n```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Assume user validation is done\n  const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Create a middleware to verify the token:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('x-auth-token');\n  if (!token) {\n    return res.status(401).send('Access denied');\n  }\n  try {\n    const decoded = jwt.verify(token, 'secret');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(400).send('Invalid token');\n  }\n};\n```\n4. Use this middleware on protected routes.\n5. Your Express.js app is now set up with JWT authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to implement basic user authentication with Node.js?",
        "label": "nodejs, express, authentication",
        "language": "en",
        "context": "User authentication is critical in securing sensitive information in a web application.",
        "answer": "Steps to implement basic user authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install express bcryptjs jsonwebtoken\n```\n2. Set up user model and routes:\n```javascript\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n  users.push({ username, password: hashedPassword });\n  res.status(201).send('User registered');\n});\n\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((u) => u.username === username);\n  if (user && await bcrypt.compare(password, user.password)) {\n    const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n3. Now, your Node.js app supports basic user authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials",
        "start_char": 0,
        "end_char": 1193,
        "key_answer": "Steps to implement basic user authentication in Node.js:\n\n1. Install necessary packages:\n```bash\nnpm install express bcryptjs jsonwebtoken\n```\n2. Set up user model and routes:\n```javascript\nconst express = require('express');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst app = express();\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', async (req, res) => {\n  const { username, password } = req.body;\n  const salt = await bcrypt.genSalt(10);\n  const hashedPassword = await bcrypt.hash(password, salt);\n  users.push({ username, password: hashedPassword });\n  res.status(201).send('User registered');\n});\n\napp.post('/login', async (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find((u) => u.username === username);\n  if (user && await bcrypt.compare(password, user.password)) {\n    const token = jwt.sign({ username }, 'secret', { expiresIn: '1h' });\n    res.json({ token });\n  } else {\n    res.status(401).send('Invalid credentials');\n  }\n});\n```\n3. Now, your Node.js app supports basic user authentication.\n\n📚 Reference: https://www.digitalocean.com/community/tutorials"
    },
    {
        "question": "How to implement logging in Node.js?",
        "label": "nodejs, logging, winston",
        "language": "en",
        "context": "Logging is essential for monitoring and debugging your application in production.",
        "answer": "Steps to implement logging in Node.js using Winston:\n\n1. Install Winston:\n```bash\nnpm install winston\n```\n2. Set up Winston logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.colorize(),\n    winston.format.simple()\n  ),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ],\n});\n```\n3. Log messages at various levels:\n```javascript\nlogger.info('Informational message');\nlogger.error('Error message');\nlogger.warn('Warning message');\n```\n4. Use Winston for logging in your application.\n\n📚 Reference: https://www.npmjs.com/package/winston",
        "start_char": 0,
        "end_char": 748,
        "key_answer": "Steps to implement logging in Node.js using Winston:\n\n1. Install Winston:\n```bash\nnpm install winston\n```\n2. Set up Winston logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.colorize(),\n    winston.format.simple()\n  ),\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'combined.log' })\n  ],\n});\n```\n3. Log messages at various levels:\n```javascript\nlogger.info('Informational message');\nlogger.error('Error message');\nlogger.warn('Warning message');\n```\n4. Use Winston for logging in your application.\n\n📚 Reference: https://www.npmjs.com/package/winston"
    },
    {
        "question": "How to set up a custom server in Next.js?",
        "label": "nextjs, server, custom-server",
        "language": "en",
        "context": "A custom server in Next.js allows you to extend the default functionality by integrating with other libraries or handling specific routes.",
        "answer": "Steps to set up a custom server in Next.js:\n\n1. Create a new server file (e.g., `server.js`):\n```javascript\nconst express = require('express');\nconst next = require('next');\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const server = express();\n  server.get('*', (req, res) => {\n    return handle(req, res);\n  });\n  server.listen(3000, (err) => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});\n```\n2. Run your custom server:\n```bash\nnode server.js\n```\n3. Customize your server with specific routes or integrations.\n\n📚 Reference: https://nextjs.org/docs/advanced-features/custom-server",
        "start_char": 0,
        "end_char": 756,
        "key_answer": "Steps to set up a custom server in Next.js:\n\n1. Create a new server file (e.g., `server.js`):\n```javascript\nconst express = require('express');\nconst next = require('next');\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const server = express();\n  server.get('*', (req, res) => {\n    return handle(req, res);\n  });\n  server.listen(3000, (err) => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});\n```\n2. Run your custom server:\n```bash\nnode server.js\n```\n3. Customize your server with specific routes or integrations.\n\n📚 Reference: https://nextjs.org/docs/advanced-features/custom-server"
    },
    {
        "question": "How to create a dynamic route in Next.js?",
        "label": "nextjs, dynamic-routes, routing",
        "language": "en",
        "context": "Dynamic routing in Next.js allows you to create pages based on the content, such as user profiles or product details.",
        "answer": "Steps to create a dynamic route in Next.js:\n\n1. Create a folder with the dynamic segment in the file name:\n```bash\npages/\n  products/\n    [id].js\n```\n2. Inside the dynamic file, use the `useRouter` hook to access the dynamic parameter:\n```javascript\nimport { useRouter } from 'next/router';\n\nconst Product = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  return <h1>Product ID: {id}</h1>;\n};\n\nexport default Product;\n```\n3. When a user visits `/products/123`, the dynamic segment `[id]` will be replaced with `123`.\n\n📚 Reference: https://nextjs.org/docs/routing/dynamic-routes",
        "start_char": 0,
        "end_char": 622,
        "key_answer": "Steps to create a dynamic route in Next.js:\n\n1. Create a folder with the dynamic segment in the file name:\n```bash\npages/\n  products/\n    [id].js\n```\n2. Inside the dynamic file, use the `useRouter` hook to access the dynamic parameter:\n```javascript\nimport { useRouter } from 'next/router';\n\nconst Product = () => {\n  const router = useRouter();\n  const { id } = router.query;\n  return <h1>Product ID: {id}</h1>;\n};\n\nexport default Product;\n```\n3. When a user visits `/products/123`, the dynamic segment `[id]` will be replaced with `123`.\n\n📚 Reference: https://nextjs.org/docs/routing/dynamic-routes"
    },
    {
        "question": "How to implement SSR in Next.js?",
        "label": "nextjs, ssr, server-side-rendering",
        "language": "en",
        "context": "Server-side rendering (SSR) allows you to pre-render a page's content on the server before sending it to the browser.",
        "answer": "Steps to implement SSR in Next.js:\n\n1. In the page component, export an `getServerSideProps` function:\n```javascript\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; \n}\n```\n2. In the page component, use the fetched data:\n```javascript\nconst Page = ({ data }) => {\n  return <div>{data}</div>;\n};\n\nexport default Page;\n```\n3. This will render the page with data fetched from the server.\n\n📚 Reference: https://nextjs.org/docs/basic-features/pages#server-side-rendering",
        "start_char": 0,
        "end_char": 603,
        "key_answer": "Steps to implement SSR in Next.js:\n\n1. In the page component, export an `getServerSideProps` function:\n```javascript\nexport async function getServerSideProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; \n}\n```\n2. In the page component, use the fetched data:\n```javascript\nconst Page = ({ data }) => {\n  return <div>{data}</div>;\n};\n\nexport default Page;\n```\n3. This will render the page with data fetched from the server.\n\n📚 Reference: https://nextjs.org/docs/basic-features/pages#server-side-rendering"
    },
    {
        "question": "How to implement static site generation (SSG) in Next.js?",
        "label": "nextjs, ssg, static-site-generation",
        "language": "en",
        "context": "Static site generation (SSG) allows you to pre-render pages at build time, making them fast to load.",
        "answer": "Steps to implement SSG in Next.js:\n\n1. In the page component, export a `getStaticProps` function:\n```javascript\nexport async function getStaticProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; \n}\n```\n2. In the page component, use the fetched data:\n```javascript\nconst Page = ({ data }) => {\n  return <div>{data}</div>;\n};\n\nexport default Page;\n```\n3. This will render the page with data fetched at build time.\n\n📚 Reference: https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation",
        "start_char": 0,
        "end_char": 611,
        "key_answer": "Steps to implement SSG in Next.js:\n\n1. In the page component, export a `getStaticProps` function:\n```javascript\nexport async function getStaticProps() {\n  const res = await fetch('https://api.example.com/data');\n  const data = await res.json();\n  return { props: { data } }; \n}\n```\n2. In the page component, use the fetched data:\n```javascript\nconst Page = ({ data }) => {\n  return <div>{data}</div>;\n};\n\nexport default Page;\n```\n3. This will render the page with data fetched at build time.\n\n📚 Reference: https://nextjs.org/docs/basic-features/data-fetching#getstaticprops-static-generation"
    },
    {
        "question": "How to add environment variables in Next.js?",
        "label": "nextjs, environment-variables",
        "language": "en",
        "context": "Environment variables allow you to configure your application based on the environment it is running in.",
        "answer": "Steps to add environment variables in Next.js:\n\n1. Create a `.env.local` file in the root directory:\n```bash\nNEXT_PUBLIC_API_URL=https://api.example.com\n```\n2. Access the environment variable in your application code:\n```javascript\nconst apiUrl = process.env.NEXT_PUBLIC_API_URL;\n```\n3. You can use this variable for any configuration or API URLs.\n4. Next.js supports different environment files for different environments (`.env.local`, `.env.production`, etc.).\n\n📚 Reference: https://nextjs.org/docs/basic-features/environment-variables",
        "start_char": 0,
        "end_char": 551,
        "key_answer": "Steps to add environment variables in Next.js:\n\n1. Create a `.env.local` file in the root directory:\n```bash\nNEXT_PUBLIC_API_URL=https://api.example.com\n```\n2. Access the environment variable in your application code:\n```javascript\nconst apiUrl = process.env.NEXT_PUBLIC_API_URL;\n```\n3. You can use this variable for any configuration or API URLs.\n4. Next.js supports different environment files for different environments (`.env.local`, `.env.production`, etc.).\n\n📚 Reference: https://nextjs.org/docs/basic-features/environment-variables"
    },
    {
        "question": "How to configure Babel in Next.js?",
        "label": "nextjs, babel, configuration",
        "language": "en",
        "context": "Babel is a JavaScript compiler that allows you to write modern JavaScript and have it work across different browsers.",
        "answer": "Steps to configure Babel in Next.js:\n\n1. Create a `babel.config.js` file in the root directory:\n```javascript\nmodule.exports = {\n  presets: ['next/babel'],\n};\n```\n2. Customize your Babel configuration by adding plugins or presets:\n```javascript\nmodule.exports = {\n  presets: ['next/babel'],\n  plugins: ['@babel/plugin-transform-runtime'],\n};\n```\n3. You can now use modern JavaScript features that are not natively supported in older browsers.\n\n📚 Reference: https://nextjs.org/docs/advanced-features/customizing-babel-config",
        "start_char": 0,
        "end_char": 540,
        "key_answer": "Steps to configure Babel in Next.js:\n\n1. Create a `babel.config.js` file in the root directory:\n```javascript\nmodule.exports = {\n  presets: ['next/babel'],\n};\n```\n2. Customize your Babel configuration by adding plugins or presets:\n```javascript\nmodule.exports = {\n  presets: ['next/babel'],\n  plugins: ['@babel/plugin-transform-runtime'],\n};\n```\n3. You can now use modern JavaScript features that are not natively supported in older browsers.\n\n📚 Reference: https://nextjs.org/docs/advanced-features/customizing-babel-config"
    },
    {
        "question": "How to implement caching in Node.js?",
        "label": "nodejs, caching, performance",
        "language": "en",
        "context": "Caching is a technique to store frequently accessed data in memory to reduce database load and improve performance.",
        "answer": "Steps to implement caching in Node.js using Redis:\n\n1. Install Redis and the Redis client for Node.js:\n```bash\nnpm install redis\n```\n2. Set up Redis client:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('error', (err) => console.log('Error ' + err));\n```\n3. Cache data in Redis:\n```javascript\nconst getCachedData = (key) => {\n  client.get(key, (err, data) => {\n    if (data) {\n      return JSON.parse(data);\n    }\n    return null;\n  });\n};\n```\n4. Store data in Redis cache:\n```javascript\nconst storeInCache = (key, value) => {\n  client.setex(key, 3600, JSON.stringify(value));\n};\n```\n5. You can now use caching in your Node.js app to store frequently accessed data.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 793,
        "key_answer": "Steps to implement caching in Node.js using Redis:\n\n1. Install Redis and the Redis client for Node.js:\n```bash\nnpm install redis\n```\n2. Set up Redis client:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('error', (err) => console.log('Error ' + err));\n```\n3. Cache data in Redis:\n```javascript\nconst getCachedData = (key) => {\n  client.get(key, (err, data) => {\n    if (data) {\n      return JSON.parse(data);\n    }\n    return null;\n  });\n};\n```\n4. Store data in Redis cache:\n```javascript\nconst storeInCache = (key, value) => {\n  client.setex(key, 3600, JSON.stringify(value));\n};\n```\n5. You can now use caching in your Node.js app to store frequently accessed data.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to create RESTful APIs in Express.js?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "RESTful APIs allow your application to communicate with other systems over HTTP using standard operations like GET, POST, PUT, and DELETE.",
        "answer": "Steps to create RESTful APIs in Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n2. Set up your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n3. Define RESTful routes:\n```javascript\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'GET request received' });\n});\n\napp.post('/api/data', (req, res) => {\n  res.json({ message: 'POST request received', data: req.body });\n});\n```\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n5. You now have a basic RESTful API running in Express.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 748,
        "key_answer": "Steps to create RESTful APIs in Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n2. Set up your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n3. Define RESTful routes:\n```javascript\napp.get('/api/data', (req, res) => {\n  res.json({ message: 'GET request received' });\n});\n\napp.post('/api/data', (req, res) => {\n  res.json({ message: 'POST request received', data: req.body });\n});\n```\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n5. You now have a basic RESTful API running in Express.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to use JWT for authentication in Node.js?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JWT (JSON Web Token) is a compact, URL-safe means of representing claims to be transferred between two parties.",
        "answer": "Steps to use JWT for authentication in Node.js:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Create a function to generate JWT:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst generateToken = (user) => {\n  return jwt.sign({ id: user.id }, 'your-secret-key', { expiresIn: '1h' });\n};\n```\n3. Verify JWT on each request:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Secure routes by using the `verifyToken` middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('Protected route accessed');\n});\n```\n5. Now your Node.js app uses JWT for authentication.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 942,
        "key_answer": "Steps to use JWT for authentication in Node.js:\n\n1. Install the `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Create a function to generate JWT:\n```javascript\nconst jwt = require('jsonwebtoken');\n\nconst generateToken = (user) => {\n  return jwt.sign({ id: user.id }, 'your-secret-key', { expiresIn: '1h' });\n};\n```\n3. Verify JWT on each request:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'your-secret-key', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Secure routes by using the `verifyToken` middleware:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('Protected route accessed');\n});\n```\n5. Now your Node.js app uses JWT for authentication.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to set up a cron job in Node.js?",
        "label": "nodejs, cron-job, scheduling",
        "language": "en",
        "context": "Cron jobs are used to run tasks on a scheduled basis at specified intervals.",
        "answer": "Steps to set up a cron job in Node.js using the `node-cron` package:\n\n1. Install `node-cron`:\n```bash\nnpm install node-cron\n```\n2. Set up a cron job:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Running task every minute');\n});\n```\n3. You can customize the schedule to run tasks at specific times (e.g., hourly, daily, etc.).\n4. Now your Node.js app will execute the scheduled task based on your cron configuration.\n\n📚 Reference: https://www.npmjs.com/package/node-cron",
        "start_char": 0,
        "end_char": 541,
        "key_answer": "Steps to set up a cron job in Node.js using the `node-cron` package:\n\n1. Install `node-cron`:\n```bash\nnpm install node-cron\n```\n2. Set up a cron job:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Running task every minute');\n});\n```\n3. You can customize the schedule to run tasks at specific times (e.g., hourly, daily, etc.).\n4. Now your Node.js app will execute the scheduled task based on your cron configuration.\n\n📚 Reference: https://www.npmjs.com/package/node-cron"
    },
    {
        "question": "How to implement pagination in MongoDB with Node.js?",
        "label": "nodejs, mongodb, pagination",
        "language": "en",
        "context": "Pagination helps you load a subset of documents from a database, improving performance and user experience.",
        "answer": "Steps to implement pagination in MongoDB with Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n2. Define a Mongoose model and query with pagination:\n```javascript\nconst User = mongoose.model('User', userSchema);\n\nconst getPaginatedUsers = async (page, limit) => {\n  const users = await User.find()\n    .skip((page - 1) * limit)\n    .limit(limit);\n  return users;\n};\n```\n3. Set up pagination on a route:\n```javascript\napp.get('/users', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const users = await getPaginatedUsers(page, limit);\n  res.json(users);\n});\n```\n4. Your MongoDB query will now return paginated results.\n\n📚 Reference: https://mongoosejs.com/docs/api/query.html#query_Query-skip",
        "start_char": 0,
        "end_char": 806,
        "key_answer": "Steps to implement pagination in MongoDB with Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n2. Define a Mongoose model and query with pagination:\n```javascript\nconst User = mongoose.model('User', userSchema);\n\nconst getPaginatedUsers = async (page, limit) => {\n  const users = await User.find()\n    .skip((page - 1) * limit)\n    .limit(limit);\n  return users;\n};\n```\n3. Set up pagination on a route:\n```javascript\napp.get('/users', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const users = await getPaginatedUsers(page, limit);\n  res.json(users);\n});\n```\n4. Your MongoDB query will now return paginated results.\n\n📚 Reference: https://mongoosejs.com/docs/api/query.html#query_Query-skip"
    },
    {
        "question": "How to use Socket.io with Node.js for real-time communication?",
        "label": "nodejs, socket.io, real-time",
        "language": "en",
        "context": "Socket.io allows for real-time, bi-directional communication between clients and servers over WebSockets.",
        "answer": "Steps to use Socket.io with Node.js:\n\n1. Install `socket.io`:\n```bash\nnpm install socket.io\n```\n2. Set up Socket.io server:\n```javascript\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.emit('message', 'Hello, client!');\n});\n```\n3. Emit events and listen for them on the client-side:\n```javascript\n// Client-side\nconst socket = io();\nsocket.on('message', (data) => {\n  console.log(data);\n});\n```\n4. Your Node.js app now supports real-time communication.\n\n📚 Reference: https://socket.io/docs/",
        "start_char": 0,
        "end_char": 689,
        "key_answer": "Steps to use Socket.io with Node.js:\n\n1. Install `socket.io`:\n```bash\nnpm install socket.io\n```\n2. Set up Socket.io server:\n```javascript\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.emit('message', 'Hello, client!');\n});\n```\n3. Emit events and listen for them on the client-side:\n```javascript\n// Client-side\nconst socket = io();\nsocket.on('message', (data) => {\n  console.log(data);\n});\n```\n4. Your Node.js app now supports real-time communication.\n\n📚 Reference: https://socket.io/docs/"
    },
    {
        "question": "How to connect to a MySQL database with Node.js?",
        "label": "nodejs, mysql, database",
        "language": "en",
        "context": "MySQL is a widely used relational database management system that is used to store structured data.",
        "answer": "Steps to connect to a MySQL database with Node.js using the `mysql2` package:\n\n1. Install the `mysql2` package:\n```bash\nnpm install mysql2\n```\n2. Set up MySQL connection:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'yourusername',\n  password: 'yourpassword',\n  database: 'yourdatabase'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database');\n});\n```\n3. Execute queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n4. Close the connection:\n```javascript\nconnection.end();\n```\n5. You can now interact with your MySQL database from Node.js.\n\n📚 Reference: https://www.npmjs.com/package/mysql2",
        "start_char": 0,
        "end_char": 831,
        "key_answer": "Steps to connect to a MySQL database with Node.js using the `mysql2` package:\n\n1. Install the `mysql2` package:\n```bash\nnpm install mysql2\n```\n2. Set up MySQL connection:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'yourusername',\n  password: 'yourpassword',\n  database: 'yourdatabase'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database');\n});\n```\n3. Execute queries:\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n4. Close the connection:\n```javascript\nconnection.end();\n```\n5. You can now interact with your MySQL database from Node.js.\n\n📚 Reference: https://www.npmjs.com/package/mysql2"
    },
    {
        "question": "How to create a middleware in Express.js?",
        "label": "nodejs, express, middleware",
        "language": "en",
        "context": "Middleware in Express.js is a function that gets access to the request, response, and next function in the request-response cycle.",
        "answer": "Steps to create middleware in Express.js:\n\n1. Create a middleware function:\n```javascript\nconst myMiddleware = (req, res, next) => {\n  console.log('Middleware executed');\n  next();\n};\n```\n2. Use the middleware function in your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(myMiddleware);\n```\n3. Your middleware will now execute for every request to your Express app.\n4. You can also apply middleware to specific routes:\n```javascript\napp.get('/some-route', myMiddleware, (req, res) => {\n  res.send('Route accessed');\n});\n```\n5. You can chain multiple middleware functions to be executed sequentially.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html",
        "start_char": 0,
        "end_char": 741,
        "key_answer": "Steps to create middleware in Express.js:\n\n1. Create a middleware function:\n```javascript\nconst myMiddleware = (req, res, next) => {\n  console.log('Middleware executed');\n  next();\n};\n```\n2. Use the middleware function in your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(myMiddleware);\n```\n3. Your middleware will now execute for every request to your Express app.\n4. You can also apply middleware to specific routes:\n```javascript\napp.get('/some-route', myMiddleware, (req, res) => {\n  res.send('Route accessed');\n});\n```\n5. You can chain multiple middleware functions to be executed sequentially.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html"
    },
    {
        "question": "How to handle errors in Node.js?",
        "label": "nodejs, error-handling",
        "language": "en",
        "context": "Error handling is crucial to ensure that your Node.js application runs smoothly and provides useful feedback to the user.",
        "answer": "Steps to handle errors in Node.js:\n\n1. Use try-catch blocks for synchronous code:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n2. For asynchronous code, use `.catch()` to handle promises:\n```javascript\nsomeAsyncFunction()\n  .then((result) => console.log(result))\n  .catch((err) => console.error(err.message));\n```\n3. You can also use the `process.on('uncaughtException')` event to handle uncaught exceptions:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception: ', err.message);\n  process.exit(1);  // Exit the process\n});\n```\n4. Proper error handling ensures that your Node.js app is more stable and user-friendly.\n\n📚 Reference: https://nodejs.org/en/docs/guides/error-handling/",
        "start_char": 0,
        "end_char": 815,
        "key_answer": "Steps to handle errors in Node.js:\n\n1. Use try-catch blocks for synchronous code:\n```javascript\ntry {\n  throw new Error('Something went wrong');\n} catch (err) {\n  console.error(err.message);\n}\n```\n2. For asynchronous code, use `.catch()` to handle promises:\n```javascript\nsomeAsyncFunction()\n  .then((result) => console.log(result))\n  .catch((err) => console.error(err.message));\n```\n3. You can also use the `process.on('uncaughtException')` event to handle uncaught exceptions:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Uncaught exception: ', err.message);\n  process.exit(1);  // Exit the process\n});\n```\n4. Proper error handling ensures that your Node.js app is more stable and user-friendly.\n\n📚 Reference: https://nodejs.org/en/docs/guides/error-handling/"
    },
    {
        "question": "How to use Sequelize with Node.js for MySQL?",
        "label": "nodejs, sequelize, mysql",
        "language": "en",
        "context": "Sequelize is an ORM (Object Relational Mapper) that provides an easy-to-use interface for working with relational databases such as MySQL.",
        "answer": "Steps to use Sequelize with Node.js and MySQL:\n\n1. Install Sequelize and MySQL2:\n```bash\nnpm install sequelize mysql2\n```\n2. Set up Sequelize and connect to MySQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/database');\n\nasync function testConnection() {\n  try {\n    await sequelize.authenticate();\n    console.log('Connection has been established successfully.');\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n  }\n}\ntestConnection();\n```\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING },\n});\n```\n4. Sync the model with the database:\n```javascript\nsequelize.sync();\n```\n5. Query the database:\n```javascript\nUser.findAll().then(users => console.log(users));\n```\n6. Your Node.js app is now set up with Sequelize and MySQL.\n\n📚 Reference: https://sequelize.org/",
        "start_char": 0,
        "end_char": 1013,
        "key_answer": "Steps to use Sequelize with Node.js and MySQL:\n\n1. Install Sequelize and MySQL2:\n```bash\nnpm install sequelize mysql2\n```\n2. Set up Sequelize and connect to MySQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/database');\n\nasync function testConnection() {\n  try {\n    await sequelize.authenticate();\n    console.log('Connection has been established successfully.');\n  } catch (error) {\n    console.error('Unable to connect to the database:', error);\n  }\n}\ntestConnection();\n```\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING },\n});\n```\n4. Sync the model with the database:\n```javascript\nsequelize.sync();\n```\n5. Query the database:\n```javascript\nUser.findAll().then(users => console.log(users));\n```\n6. Your Node.js app is now set up with Sequelize and MySQL.\n\n📚 Reference: https://sequelize.org/"
    },
    {
        "question": "How to implement real-time chat with Node.js and Socket.io?",
        "label": "nodejs, socket.io, real-time-chat",
        "language": "en",
        "context": "Real-time chat allows users to exchange messages instantly, often using WebSocket technology for efficient communication.",
        "answer": "Steps to implement real-time chat with Node.js and Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n2. Set up a Socket.io server:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('New client connected');\n  socket.on('message', (msg) => {\n    io.emit('message', msg);  // Broadcast message to all clients\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```\n3. On the client-side, connect and listen for messages:\n```javascript\nconst socket = io();\n\nsocket.on('message', (msg) => {\n  console.log('Received message: ', msg);\n});\n```\n4. Your chat system now broadcasts messages in real-time to all connected clients.\n\n📚 Reference: https://socket.io/docs/v4/",
        "start_char": 0,
        "end_char": 963,
        "key_answer": "Steps to implement real-time chat with Node.js and Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n2. Set up a Socket.io server:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('New client connected');\n  socket.on('message', (msg) => {\n    io.emit('message', msg);  // Broadcast message to all clients\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server listening on port 3000');\n});\n```\n3. On the client-side, connect and listen for messages:\n```javascript\nconst socket = io();\n\nsocket.on('message', (msg) => {\n  console.log('Received message: ', msg);\n});\n```\n4. Your chat system now broadcasts messages in real-time to all connected clients.\n\n📚 Reference: https://socket.io/docs/v4/"
    },
    {
        "question": "How to create an authentication system in Node.js?",
        "label": "nodejs, authentication, security",
        "language": "en",
        "context": "Authentication is essential for verifying users and providing access to secure areas in a web application.",
        "answer": "Steps to create an authentication system in Node.js:\n\n1. Install necessary libraries:\n```bash\nnpm install express bcryptjs jsonwebtoken```\n2. Set up user registration with bcryptjs to hash passwords:\n```javascript\nconst bcrypt = require('bcryptjs');\n\napp.post('/register', async (req, res) => {\n  const hashedPassword = await bcrypt.hash(req.body.password, 10);\n  // Save hashedPassword to the database\n});\n```\n3. Create a login endpoint to issue JSON Web Tokens (JWT):\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const token = jwt.sign({ userId: user.id }, 'secretkey');\n  res.json({ token });\n});\n```\n4. Protect routes using middleware to verify JWT:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n};\napp.use(verifyToken);\n```\n5. Your authentication system is now set up with Node.js.\n\n📚 Reference: https://www.npmjs.com/package/bcryptjs",
        "start_char": 0,
        "end_char": 1112,
        "key_answer": "Steps to create an authentication system in Node.js:\n\n1. Install necessary libraries:\n```bash\nnpm install express bcryptjs jsonwebtoken```\n2. Set up user registration with bcryptjs to hash passwords:\n```javascript\nconst bcrypt = require('bcryptjs');\n\napp.post('/register', async (req, res) => {\n  const hashedPassword = await bcrypt.hash(req.body.password, 10);\n  // Save hashedPassword to the database\n});\n```\n3. Create a login endpoint to issue JSON Web Tokens (JWT):\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const token = jwt.sign({ userId: user.id }, 'secretkey');\n  res.json({ token });\n});\n```\n4. Protect routes using middleware to verify JWT:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n};\napp.use(verifyToken);\n```\n5. Your authentication system is now set up with Node.js.\n\n📚 Reference: https://www.npmjs.com/package/bcryptjs"
    },
    {
        "question": "How to implement user authentication with Passport.js?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport.js is a middleware for handling user authentication in Node.js applications.",
        "answer": "Steps to implement user authentication with Passport.js:\n\n1. Install necessary libraries:\n```bash\nnpm install passport passport-local express-session```\n2. Set up Passport.js in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify user credentials\n  if (username === 'user' && password === 'password') {\n    return done(null, { id: 1, username: 'user' });\n  }\n  return done(null, false, { message: 'Incorrect credentials' });\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n3. Set up login and logout routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\napp.get('/logout', (req, res) => {\n  req.logout();\n  res.redirect('/');\n});\n```\n4. Your authentication system using Passport.js is now set up.\n\n📚 Reference: https://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 1022,
        "key_answer": "Steps to implement user authentication with Passport.js:\n\n1. Install necessary libraries:\n```bash\nnpm install passport passport-local express-session```\n2. Set up Passport.js in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify user credentials\n  if (username === 'user' && password === 'password') {\n    return done(null, { id: 1, username: 'user' });\n  }\n  return done(null, false, { message: 'Incorrect credentials' });\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n3. Set up login and logout routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\napp.get('/logout', (req, res) => {\n  req.logout();\n  res.redirect('/');\n});\n```\n4. Your authentication system using Passport.js is now set up.\n\n📚 Reference: https://www.passportjs.org/docs/"
    },
    {
        "question": "How to send an email using Node.js?",
        "label": "nodejs, email, nodemailer",
        "language": "en",
        "context": "NodeMailer is a module for sending emails from Node.js applications.",
        "answer": "Steps to send an email using Node.js and NodeMailer:\n\n1. Install NodeMailer:\n```bash\nnpm install nodemailer\n```\n2. Set up NodeMailer transport configuration:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test email',\n  text: 'Hello, this is a test email from Node.js'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Your Node.js app can now send emails.\n\n📚 Reference: https://nodemailer.com/",
        "start_char": 0,
        "end_char": 848,
        "key_answer": "Steps to send an email using Node.js and NodeMailer:\n\n1. Install NodeMailer:\n```bash\nnpm install nodemailer\n```\n2. Set up NodeMailer transport configuration:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test email',\n  text: 'Hello, this is a test email from Node.js'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Your Node.js app can now send emails.\n\n📚 Reference: https://nodemailer.com/"
    },
    {
        "question": "How to install and use MongoDB with Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in flexible, JSON-like documents.",
        "answer": "Steps to install and use MongoDB with Node.js:\n\n1. Install `mongodb` package:\n```bash\nnpm install mongodb\n```\n2. Connect to MongoDB using the MongoClient:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function connect() {\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n  } catch (err) {\n    console.error(err);\n  }\n}\nconnect();\n```\n3. Create a database and collection, and insert data:\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\nawait collection.insertOne({ name: 'John', age: 30 });\n```\n4. Query data from MongoDB:\n```javascript\nconst users = await collection.find().toArray();\nconsole.log(users);\n```\n5. Close the connection:\n```javascript\nclient.close();\n```\n6. Your Node.js app is now set up with MongoDB.\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/",
        "start_char": 0,
        "end_char": 982,
        "key_answer": "Steps to install and use MongoDB with Node.js:\n\n1. Install `mongodb` package:\n```bash\nnpm install mongodb\n```\n2. Connect to MongoDB using the MongoClient:\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function connect() {\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n  } catch (err) {\n    console.error(err);\n  }\n}\nconnect();\n```\n3. Create a database and collection, and insert data:\n```javascript\nconst db = client.db('mydb');\nconst collection = db.collection('users');\nawait collection.insertOne({ name: 'John', age: 30 });\n```\n4. Query data from MongoDB:\n```javascript\nconst users = await collection.find().toArray();\nconsole.log(users);\n```\n5. Close the connection:\n```javascript\nclient.close();\n```\n6. Your Node.js app is now set up with MongoDB.\n\n📚 Reference: https://mongodb.github.io/node-mongodb-native/"
    },
    {
        "question": "How to implement JWT-based authentication in a Node.js app?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) provide a compact, URL-safe means of representing claims to be transferred between two parties.",
        "answer": "Steps to implement JWT-based authentication in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Set up user login to issue a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'user' };  // Fetch user data\n  const token = jwt.sign(user, 'secretKey', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Protect routes using middleware to verify JWT:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  if (!token) return res.sendStatus(403);\n  jwt.verify(token, 'secretKey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Apply middleware to protect specific routes:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.json({ message: 'Protected route accessed' });\n});\n```\n5. Your app is now using JWT for authentication.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 1072,
        "key_answer": "Steps to implement JWT-based authentication in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Set up user login to issue a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const user = { id: 1, username: 'user' };  // Fetch user data\n  const token = jwt.sign(user, 'secretKey', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Protect routes using middleware to verify JWT:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  if (!token) return res.sendStatus(403);\n  jwt.verify(token, 'secretKey', (err, decoded) => {\n    if (err) return res.sendStatus(403);\n    req.user = decoded;\n    next();\n  });\n};\n```\n4. Apply middleware to protect specific routes:\n```javascript\napp.get('/protected', verifyToken, (req, res) => {\n  res.json({ message: 'Protected route accessed' });\n});\n```\n5. Your app is now using JWT for authentication.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to use Express.js for routing?",
        "label": "nodejs, express, routing",
        "language": "en",
        "context": "Routing in Express.js allows you to define URL paths and associate them with specific actions in your application.",
        "answer": "Steps to use Express.js for routing:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n2. Set up a basic Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello, world!');\n});\n\napp.get('/about', (req, res) => {\n  res.send('About us');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n3. Create dynamic routes with route parameters:\n```javascript\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  res.send(`User ID: ${userId}`);\n});\n```\n4. Use route handling for different HTTP methods (GET, POST, etc.):\n```javascript\napp.post('/submit', (req, res) => {\n  res.send('Form submitted');\n});\n```\n5. Your Express app now has routing set up.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 898,
        "key_answer": "Steps to use Express.js for routing:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n2. Set up a basic Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hello, world!');\n});\n\napp.get('/about', (req, res) => {\n  res.send('About us');\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n3. Create dynamic routes with route parameters:\n```javascript\napp.get('/users/:id', (req, res) => {\n  const userId = req.params.id;\n  res.send(`User ID: ${userId}`);\n});\n```\n4. Use route handling for different HTTP methods (GET, POST, etc.):\n```javascript\napp.post('/submit', (req, res) => {\n  res.send('Form submitted');\n});\n```\n5. Your Express app now has routing set up.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to use async/await in Node.js?",
        "label": "nodejs, async-await",
        "language": "en",
        "context": "Async/await provides a cleaner and more readable way to handle asynchronous operations in JavaScript.",
        "answer": "Steps to use async/await in Node.js:\n\n1. Define an asynchronous function using the `async` keyword:\n```javascript\nasync function fetchData() {\n  return 'Data fetched';\n}\n```\n2. Call the asynchronous function with `await` to get the result:\n```javascript\nasync function main() {\n  const result = await fetchData();\n  console.log(result);  // Output: Data fetched\n}\nmain();\n```\n3. Use async/await with promises:\n```javascript\nasync function fetchUser() {\n  const user = await getUserFromDb();  // Assumes getUserFromDb() returns a promise\n  console.log(user);\n}\n```\n4. You can use `try/catch` blocks for error handling:\n```javascript\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n  } catch (err) {\n    console.error('Error:', err);\n  }\n}\n```\n5. Async/await helps write clean and manageable asynchronous code.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 996,
        "key_answer": "Steps to use async/await in Node.js:\n\n1. Define an asynchronous function using the `async` keyword:\n```javascript\nasync function fetchData() {\n  return 'Data fetched';\n}\n```\n2. Call the asynchronous function with `await` to get the result:\n```javascript\nasync function main() {\n  const result = await fetchData();\n  console.log(result);  // Output: Data fetched\n}\nmain();\n```\n3. Use async/await with promises:\n```javascript\nasync function fetchUser() {\n  const user = await getUserFromDb();  // Assumes getUserFromDb() returns a promise\n  console.log(user);\n}\n```\n4. You can use `try/catch` blocks for error handling:\n```javascript\nasync function getData() {\n  try {\n    const data = await fetchData();\n    console.log(data);\n  } catch (err) {\n    console.error('Error:', err);\n  }\n}\n```\n5. Async/await helps write clean and manageable asynchronous code.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to set up a static file server with Express.js?",
        "label": "nodejs, express, static-files",
        "language": "en",
        "context": "Static file servers allow you to serve assets like images, CSS, and JavaScript files directly to clients.",
        "answer": "Steps to set up a static file server with Express.js:\n\n1. Set up Express and serve static files:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));  // 'public' folder will contain static files\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n2. Place your static files (e.g., `index.html`, CSS, JS) in the `public` folder.\n3. Now, clients can access the static files by visiting `http://localhost:3000/index.html` or any other file inside the `public` directory.\n4. This is ideal for serving frontend assets in a Node.js web app.\n\n📚 Reference: https://expressjs.com/en/starter/static-files.html",
        "start_char": 0,
        "end_char": 699,
        "key_answer": "Steps to set up a static file server with Express.js:\n\n1. Set up Express and serve static files:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.static('public'));  // 'public' folder will contain static files\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n2. Place your static files (e.g., `index.html`, CSS, JS) in the `public` folder.\n3. Now, clients can access the static files by visiting `http://localhost:3000/index.html` or any other file inside the `public` directory.\n4. This is ideal for serving frontend assets in a Node.js web app.\n\n📚 Reference: https://expressjs.com/en/starter/static-files.html"
    },
    {
        "question": "How to use Docker with Node.js?",
        "label": "nodejs, docker, containerization",
        "language": "en",
        "context": "Docker allows you to package your application into a container, ensuring that it runs consistently across different environments.",
        "answer": "Steps to use Docker with Node.js:\n\n1. Install Docker on your system:\n```bash\n# Follow the installation guide at https://docs.docker.com/get-docker/\n```\n2. Create a `Dockerfile` in your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ['node', 'app.js']\n```\n3. Build the Docker image:\n```bash\ndocker build -t node-app .\n```\n4. Run the Docker container:\n```bash\ndocker run -p 3000:3000 node-app\n```\n5. Your Node.js app is now running in a Docker container.\n\n📚 Reference: https://nodejs.org/en/docs/guides/nodejs-docker-webapp/",
        "start_char": 0,
        "end_char": 621,
        "key_answer": "Steps to use Docker with Node.js:\n\n1. Install Docker on your system:\n```bash\n# Follow the installation guide at https://docs.docker.com/get-docker/\n```\n2. Create a `Dockerfile` in your Node.js project:\n```dockerfile\nFROM node:14\nWORKDIR /app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD ['node', 'app.js']\n```\n3. Build the Docker image:\n```bash\ndocker build -t node-app .\n```\n4. Run the Docker container:\n```bash\ndocker run -p 3000:3000 node-app\n```\n5. Your Node.js app is now running in a Docker container.\n\n📚 Reference: https://nodejs.org/en/docs/guides/nodejs-docker-webapp/"
    },
    {
        "question": "How to use MongoDB with Express.js in a MERN stack?",
        "label": "mern, mongodb, express, nodejs",
        "language": "en",
        "context": "The MERN stack (MongoDB, Express, React, Node.js) is a popular stack for building full-stack JavaScript applications.",
        "answer": "Steps to use MongoDB with Express.js in a MERN stack:\n\n1. Set up a Node.js server with Express:\n```bash\nnpm install express\n```\n2. Install MongoDB and Mongoose for database interaction:\n```bash\nnpm install mongoose\n```\n3. Connect to MongoDB from your Express app:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mernapp', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('Error:', err));\n```\n4. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', userSchema);\n```\n5. Use the model in Express routes to save and query data:\n```javascript\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.send('User added');\n});\n```\n6. This completes the integration of MongoDB with Express in the MERN stack.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose",
        "start_char": 0,
        "end_char": 1137,
        "key_answer": "Steps to use MongoDB with Express.js in a MERN stack:\n\n1. Set up a Node.js server with Express:\n```bash\nnpm install express\n```\n2. Install MongoDB and Mongoose for database interaction:\n```bash\nnpm install mongoose\n```\n3. Connect to MongoDB from your Express app:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mernapp', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch((err) => console.error('Error:', err));\n```\n4. Define a Mongoose model:\n```javascript\nconst Schema = mongoose.Schema;\nconst userSchema = new Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', userSchema);\n```\n5. Use the model in Express routes to save and query data:\n```javascript\napp.post('/users', async (req, res) => {\n  const user = new User(req.body);\n  await user.save();\n  res.send('User added');\n});\n```\n6. This completes the integration of MongoDB with Express in the MERN stack.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/Server-side/Express_Nodejs/mongoose"
    },
    {
        "question": "How to use Express.js for creating RESTful APIs?",
        "label": "nodejs, express, api, rest",
        "language": "en",
        "context": "Express.js is a minimal web application framework that allows you to easily build RESTful APIs in Node.js.",
        "answer": "Steps to use Express.js for creating RESTful APIs:\n\n1. Set up Express app:\n```bash\nnpm install express\n```\n2. Define API routes for CRUD operations (Create, Read, Update, Delete):\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/api/users', (req, res) => {\n  // Logic to fetch users\n});\n\napp.post('/api/users', (req, res) => {\n  // Logic to create user\n});\n\napp.put('/api/users/:id', (req, res) => {\n  // Logic to update user\n});\n\napp.delete('/api/users/:id', (req, res) => {\n  // Logic to delete user\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n3. Each route corresponds to a different HTTP method (GET, POST, PUT, DELETE).\n4. You can interact with a database or other services in your route handlers.\n5. Express.js makes it simple to create RESTful APIs in Node.js.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 971,
        "key_answer": "Steps to use Express.js for creating RESTful APIs:\n\n1. Set up Express app:\n```bash\nnpm install express\n```\n2. Define API routes for CRUD operations (Create, Read, Update, Delete):\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.get('/api/users', (req, res) => {\n  // Logic to fetch users\n});\n\napp.post('/api/users', (req, res) => {\n  // Logic to create user\n});\n\napp.put('/api/users/:id', (req, res) => {\n  // Logic to update user\n});\n\napp.delete('/api/users/:id', (req, res) => {\n  // Logic to delete user\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n3. Each route corresponds to a different HTTP method (GET, POST, PUT, DELETE).\n4. You can interact with a database or other services in your route handlers.\n5. Express.js makes it simple to create RESTful APIs in Node.js.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to use Redis with Node.js for caching?",
        "label": "nodejs, redis, caching",
        "language": "en",
        "context": "Redis is an in-memory data structure store, used as a database, cache, and message broker. It is often used in Node.js for caching data.",
        "answer": "Steps to use Redis with Node.js for caching:\n\n1. Install Redis on your system and the `redis` Node.js client:\n```bash\nnpm install redis\n```\n2. Connect to Redis server in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n3. Set cache values in Redis:\n```javascript\nclient.set('username', 'john_doe', redis.print);\n```\n4. Get cache values from Redis:\n```javascript\nclient.get('username', function(err, reply) {\n  console.log(reply);  // Output: john_doe\n});\n```\n5. You can now use Redis for caching in your Node.js application.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 733,
        "key_answer": "Steps to use Redis with Node.js for caching:\n\n1. Install Redis on your system and the `redis` Node.js client:\n```bash\nnpm install redis\n```\n2. Connect to Redis server in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n3. Set cache values in Redis:\n```javascript\nclient.set('username', 'john_doe', redis.print);\n```\n4. Get cache values from Redis:\n```javascript\nclient.get('username', function(err, reply) {\n  console.log(reply);  // Output: john_doe\n});\n```\n5. You can now use Redis for caching in your Node.js application.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to schedule tasks in Node.js?",
        "label": "nodejs, task-scheduling",
        "language": "en",
        "context": "Task scheduling is useful for automating tasks that need to run at specific intervals, such as sending emails or running background jobs.",
        "answer": "Steps to schedule tasks in Node.js:\n\n1. Install the `node-cron` library:\n```bash\nnpm install node-cron\n```\n2. Create a cron job to schedule a task:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('0 0 * * *', () => {\n  console.log('Task is running every day at midnight');\n});\n```\n3. The cron expression can be customized to schedule tasks at different intervals.\n4. Task scheduling helps automate background tasks like sending notifications or cleaning up databases.\n\n📚 Reference: https://www.npmjs.com/package/node-cron",
        "start_char": 0,
        "end_char": 554,
        "key_answer": "Steps to schedule tasks in Node.js:\n\n1. Install the `node-cron` library:\n```bash\nnpm install node-cron\n```\n2. Create a cron job to schedule a task:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('0 0 * * *', () => {\n  console.log('Task is running every day at midnight');\n});\n```\n3. The cron expression can be customized to schedule tasks at different intervals.\n4. Task scheduling helps automate background tasks like sending notifications or cleaning up databases.\n\n📚 Reference: https://www.npmjs.com/package/node-cron"
    },
    {
        "question": "How to use GraphQL with Node.js?",
        "label": "nodejs, graphql",
        "language": "en",
        "context": "GraphQL is a query language for APIs, and it provides a runtime for executing those queries with your existing data.",
        "answer": "Steps to use GraphQL with Node.js:\n\n1. Install `express-graphql` and `graphql` packages:\n```bash\nnpm install express-graphql graphql\n```\n2. Define your GraphQL schema:\n```javascript\nconst { GraphQLSchema, GraphQLObjectType, GraphQLString } = require('graphql');\n\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  fields: {\n    message: {\n      type: GraphQLString,\n      resolve() {\n        return 'Hello, GraphQL!';\n      }\n    }\n  }\n});\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addMessage: {\n      type: GraphQLString,\n      args: { message: { type: GraphQLString } },\n      resolve(parent, args) {\n        return `Message: ${args.message}`;\n      }\n    }\n  }\n});\n\nconst schema = new GraphQLSchema({ query: RootQuery, mutation: Mutation });\n```\n3. Set up the GraphQL endpoint with Express:\n```javascript\nconst express = require('express');\nconst expressGraphQL = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', expressGraphQL({ schema, graphiql: true }));\n\napp.listen(4000, () => {\n  console.log('Server running on port 4000');\n});\n```\n4. Your Node.js app is now ready to handle GraphQL queries.\n\n📚 Reference: https://graphql.org/graphql-js/",
        "start_char": 0,
        "end_char": 1276,
        "key_answer": "Steps to use GraphQL with Node.js:\n\n1. Install `express-graphql` and `graphql` packages:\n```bash\nnpm install express-graphql graphql\n```\n2. Define your GraphQL schema:\n```javascript\nconst { GraphQLSchema, GraphQLObjectType, GraphQLString } = require('graphql');\n\nconst RootQuery = new GraphQLObjectType({\n  name: 'RootQueryType',\n  fields: {\n    message: {\n      type: GraphQLString,\n      resolve() {\n        return 'Hello, GraphQL!';\n      }\n    }\n  }\n});\n\nconst Mutation = new GraphQLObjectType({\n  name: 'Mutation',\n  fields: {\n    addMessage: {\n      type: GraphQLString,\n      args: { message: { type: GraphQLString } },\n      resolve(parent, args) {\n        return `Message: ${args.message}`;\n      }\n    }\n  }\n});\n\nconst schema = new GraphQLSchema({ query: RootQuery, mutation: Mutation });\n```\n3. Set up the GraphQL endpoint with Express:\n```javascript\nconst express = require('express');\nconst expressGraphQL = require('express-graphql');\n\nconst app = express();\n\napp.use('/graphql', expressGraphQL({ schema, graphiql: true }));\n\napp.listen(4000, () => {\n  console.log('Server running on port 4000');\n});\n```\n4. Your Node.js app is now ready to handle GraphQL queries.\n\n📚 Reference: https://graphql.org/graphql-js/"
    },
    {
        "question": "How to handle asynchronous code in Node.js?",
        "label": "nodejs, async, promises, callback",
        "language": "en",
        "context": "Asynchronous programming is crucial in Node.js to handle non-blocking I/O operations. Using promises or async/await helps to simplify asynchronous code.",
        "answer": "Steps to handle asynchronous code in Node.js:\n\n1. Use callbacks for asynchronous operations:\n```javascript\nfs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n2. Use promises for handling asynchronous code more cleanly:\n```javascript\nconst readFile = (path) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err);\n      resolve(data);\n    });\n  });\n};\n```\n3. Use async/await to simplify promise handling:\n```javascript\nasync function readFileAsync(path) {\n  try {\n    const data = await readFile(path);\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n```\n4. Asynchronous programming is essential for non-blocking operations in Node.js.\n\n📚 Reference: https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/",
        "start_char": 0,
        "end_char": 865,
        "key_answer": "Steps to handle asynchronous code in Node.js:\n\n1. Use callbacks for asynchronous operations:\n```javascript\nfs.readFile('file.txt', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n2. Use promises for handling asynchronous code more cleanly:\n```javascript\nconst readFile = (path) => {\n  return new Promise((resolve, reject) => {\n    fs.readFile(path, (err, data) => {\n      if (err) reject(err);\n      resolve(data);\n    });\n  });\n};\n```\n3. Use async/await to simplify promise handling:\n```javascript\nasync function readFileAsync(path) {\n  try {\n    const data = await readFile(path);\n    console.log(data);\n  } catch (err) {\n    console.error(err);\n  }\n}\n```\n4. Asynchronous programming is essential for non-blocking operations in Node.js.\n\n📚 Reference: https://nodejs.org/en/docs/guides/blocking-vs-non-blocking/"
    },
    {
        "question": "How to configure environment variables in Node.js?",
        "label": "nodejs, environment-variables",
        "language": "en",
        "context": "Environment variables are used to store configuration settings that are specific to an environment (development, production, etc.). In Node.js, you can configure them to keep sensitive information secure.",
        "answer": "Steps to configure environment variables in Node.js:\n\n1. Install the `dotenv` package to manage environment variables:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file in the root of your project and add environment variables:\n```.env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=secret\n```\n3. Load environment variables in your Node.js app:\n```javascript\nrequire('dotenv').config();\n\nconst dbHost = process.env.DB_HOST;\nconsole.log(`Database Host: ${dbHost}`);\n```\n4. Use the environment variables securely throughout your app.\n5. Add `.env` to `.gitignore` to avoid pushing sensitive information to version control.\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to configure environment variables in Node.js:\n\n1. Install the `dotenv` package to manage environment variables:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file in the root of your project and add environment variables:\n```.env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=secret\n```\n3. Load environment variables in your Node.js app:\n```javascript\nrequire('dotenv').config();\n\nconst dbHost = process.env.DB_HOST;\nconsole.log(`Database Host: ${dbHost}`);\n```\n4. Use the environment variables securely throughout your app.\n5. Add `.env` to `.gitignore` to avoid pushing sensitive information to version control.\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to use WebSockets in Node.js?",
        "label": "nodejs, websocket, real-time",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single TCP connection, making them ideal for real-time applications like chat apps or live notifications.",
        "answer": "Steps to use WebSockets in Node.js:\n\n1. Install the `ws` WebSocket library:\n```bash\nnpm install ws\n```\n2. Set up a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('Hello Client');\n});\n```\n3. Connect a WebSocket client to the server (you can use the browser's WebSocket API):\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\n\nws.onopen = function() {\n  ws.send('Hello Server');\n};\n\nws.onmessage = function(event) {\n  console.log(event.data);\n};\n```\n4. WebSockets enable real-time communication in your Node.js apps.\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 852,
        "key_answer": "Steps to use WebSockets in Node.js:\n\n1. Install the `ws` WebSocket library:\n```bash\nnpm install ws\n```\n2. Set up a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n  ws.on('message', function incoming(message) {\n    console.log('received: %s', message);\n  });\n\n  ws.send('Hello Client');\n});\n```\n3. Connect a WebSocket client to the server (you can use the browser's WebSocket API):\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\n\nws.onopen = function() {\n  ws.send('Hello Server');\n};\n\nws.onmessage = function(event) {\n  console.log(event.data);\n};\n```\n4. WebSockets enable real-time communication in your Node.js apps.\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to validate user input in Node.js?",
        "label": "nodejs, validation, input-validation",
        "language": "en",
        "context": "Validating user input is crucial to ensure that the data received from users is correct and safe to use in your application.",
        "answer": "Steps to validate user input in Node.js:\n\n1. Use a validation library like `express-validator` for input validation:\n```bash\nnpm install express-validator\n```\n2. Use `express-validator` to validate and sanitize input:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register',\n  body('email').isEmail().withMessage('Invalid email').trim().escape(),\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('User registered');\n  });\n```\n3. Handle validation errors appropriately to give feedback to users.\n\n📚 Reference: https://www.npmjs.com/package/express-validator",
        "start_char": 0,
        "end_char": 841,
        "key_answer": "Steps to validate user input in Node.js:\n\n1. Use a validation library like `express-validator` for input validation:\n```bash\nnpm install express-validator\n```\n2. Use `express-validator` to validate and sanitize input:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register',\n  body('email').isEmail().withMessage('Invalid email').trim().escape(),\n  body('password').isLength({ min: 6 }).withMessage('Password must be at least 6 characters'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    res.send('User registered');\n  });\n```\n3. Handle validation errors appropriately to give feedback to users.\n\n📚 Reference: https://www.npmjs.com/package/express-validator"
    },
    {
        "question": "How to implement OAuth 2.0 in Node.js?",
        "label": "nodejs, oauth2, authentication",
        "language": "en",
        "context": "OAuth 2.0 is a protocol for authorization that allows third-party applications to access user resources without sharing credentials.",
        "answer": "Steps to implement OAuth 2.0 in Node.js:\n\n1. Install OAuth-related libraries like `passport`, `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n2. Set up Passport.js with OAuth 2.0 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://provider.com/oauth2/auth',\n  tokenURL: 'https://provider.com/oauth2/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  // Handle the user profile and access token\n  return done(null, profile);\n}));\n```\n3. Add the routes to start the OAuth flow and handle the callback:\n```javascript\napp.get('/auth', passport.authenticate('oauth2'));\napp.get('/auth/callback', passport.authenticate('oauth2', { failureRedirect: '/' }), (req, res) => {\n  res.send('Authenticated');\n});\n```\n4. Your Node.js app is now set up with OAuth 2.0 for authentication.\n\n📚 Reference: https://www.npmjs.com/package/passport-oauth2",
        "start_char": 0,
        "end_char": 1143,
        "key_answer": "Steps to implement OAuth 2.0 in Node.js:\n\n1. Install OAuth-related libraries like `passport`, `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n2. Set up Passport.js with OAuth 2.0 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://provider.com/oauth2/auth',\n  tokenURL: 'https://provider.com/oauth2/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret',\n  callbackURL: 'http://localhost:3000/auth/callback'\n}, function(accessToken, refreshToken, profile, done) {\n  // Handle the user profile and access token\n  return done(null, profile);\n}));\n```\n3. Add the routes to start the OAuth flow and handle the callback:\n```javascript\napp.get('/auth', passport.authenticate('oauth2'));\napp.get('/auth/callback', passport.authenticate('oauth2', { failureRedirect: '/' }), (req, res) => {\n  res.send('Authenticated');\n});\n```\n4. Your Node.js app is now set up with OAuth 2.0 for authentication.\n\n📚 Reference: https://www.npmjs.com/package/passport-oauth2"
    },
    {
        "question": "How to use AWS S3 with Node.js?",
        "label": "nodejs, aws, s3, file-upload",
        "language": "en",
        "context": "Amazon S3 is an object storage service that provides scalable, durable, and low-latency storage. It can be used to store files like images, videos, and documents in your Node.js app.",
        "answer": "Steps to use AWS S3 with Node.js:\n\n1. Install the AWS SDK for JavaScript:\n```bash\nnpm install aws-sdk\n```\n2. Configure the AWS SDK with your access keys:\n```javascript\nconst AWS = require('aws-sdk');\nAWS.config.update({\n  accessKeyId: 'your-access-key',\n  secretAccessKey: 'your-secret-key',\n  region: 'us-east-1'\n});\n```\n3. Create an S3 instance and upload files:\n```javascript\nconst s3 = new AWS.S3();\n\nconst uploadParams = {\n  Bucket: 'your-bucket-name',\n  Key: 'file-name.jpg',\n  Body: fileData\n};\n\ns3.upload(uploadParams, function(err, data) {\n  if (err) console.log('Error uploading:', err);\n  else console.log('File uploaded:', data.Location);\n});\n```\n4. Your Node.js app can now upload files to AWS S3.\n\n📚 Reference: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html",
        "start_char": 0,
        "end_char": 820,
        "key_answer": "Steps to use AWS S3 with Node.js:\n\n1. Install the AWS SDK for JavaScript:\n```bash\nnpm install aws-sdk\n```\n2. Configure the AWS SDK with your access keys:\n```javascript\nconst AWS = require('aws-sdk');\nAWS.config.update({\n  accessKeyId: 'your-access-key',\n  secretAccessKey: 'your-secret-key',\n  region: 'us-east-1'\n});\n```\n3. Create an S3 instance and upload files:\n```javascript\nconst s3 = new AWS.S3();\n\nconst uploadParams = {\n  Bucket: 'your-bucket-name',\n  Key: 'file-name.jpg',\n  Body: fileData\n};\n\ns3.upload(uploadParams, function(err, data) {\n  if (err) console.log('Error uploading:', err);\n  else console.log('File uploaded:', data.Location);\n});\n```\n4. Your Node.js app can now upload files to AWS S3.\n\n📚 Reference: https://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html"
    },
    {
        "question": "How to handle rate limiting in Node.js?",
        "label": "nodejs, rate-limiting",
        "language": "en",
        "context": "Rate limiting is used to control the amount of incoming requests to your Node.js application, preventing abuse and ensuring fair usage of resources.",
        "answer": "Steps to handle rate limiting in Node.js:\n\n1. Install the `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n2. Set up rate limiting middleware in your Express app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Customize rate limits based on different routes or IP addresses.\n4. Rate limiting helps protect your app from malicious traffic.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit",
        "start_char": 0,
        "end_char": 677,
        "key_answer": "Steps to handle rate limiting in Node.js:\n\n1. Install the `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n2. Set up rate limiting middleware in your Express app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Customize rate limits based on different routes or IP addresses.\n4. Rate limiting helps protect your app from malicious traffic.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit"
    },
    {
        "question": "How to set up a proxy server in Node.js?",
        "label": "nodejs, proxy-server",
        "language": "en",
        "context": "A proxy server acts as an intermediary between a client and the internet. It can be used to forward requests from your application to external services or handle security features.",
        "answer": "Steps to set up a proxy server in Node.js:\n\n1. Install the `http-proxy-middleware` package:\n```bash\nnpm install http-proxy-middleware\n```\n2. Use the middleware in your Express app to create a proxy:\n```javascript\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\napp.use('/api', createProxyMiddleware({\n  target: 'https://external-api.com',\n  changeOrigin: true,\n  pathRewrite: { '^/api': '' }\n}));\n```\n3. Requests made to `/api` will be forwarded to the external API.\n4. Proxy servers are commonly used for security or forwarding requests to external services.\n\n📚 Reference: https://www.npmjs.com/package/http-proxy-middleware",
        "start_char": 0,
        "end_char": 665,
        "key_answer": "Steps to set up a proxy server in Node.js:\n\n1. Install the `http-proxy-middleware` package:\n```bash\nnpm install http-proxy-middleware\n```\n2. Use the middleware in your Express app to create a proxy:\n```javascript\nconst { createProxyMiddleware } = require('http-proxy-middleware');\n\napp.use('/api', createProxyMiddleware({\n  target: 'https://external-api.com',\n  changeOrigin: true,\n  pathRewrite: { '^/api': '' }\n}));\n```\n3. Requests made to `/api` will be forwarded to the external API.\n4. Proxy servers are commonly used for security or forwarding requests to external services.\n\n📚 Reference: https://www.npmjs.com/package/http-proxy-middleware"
    },
    {
        "question": "How to secure a Node.js API?",
        "label": "nodejs, api, security",
        "language": "en",
        "context": "Securing a Node.js API is essential to protect sensitive data and ensure that only authorized users can access your resources.",
        "answer": "Steps to secure a Node.js API:\n\n1. Use HTTPS to encrypt communication between the client and server.\n2. Implement authentication using JWT (JSON Web Tokens) for secure user sessions:\n```bash\nnpm install jsonwebtoken\n```\n3. Use middleware to verify JWT on protected routes:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.use('/api/protected', (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'secret-key');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n});\n```\n4. Validate inputs using libraries like `express-validator` to prevent injection attacks.\n5. Use rate limiting to prevent abuse of your API.\n\n📚 Reference: https://jwt.io/",
        "start_char": 0,
        "end_char": 805,
        "key_answer": "Steps to secure a Node.js API:\n\n1. Use HTTPS to encrypt communication between the client and server.\n2. Implement authentication using JWT (JSON Web Tokens) for secure user sessions:\n```bash\nnpm install jsonwebtoken\n```\n3. Use middleware to verify JWT on protected routes:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.use('/api/protected', (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  try {\n    const decoded = jwt.verify(token, 'secret-key');\n    req.user = decoded;\n    next();\n  } catch (err) {\n    res.status(401).send('Unauthorized');\n  }\n});\n```\n4. Validate inputs using libraries like `express-validator` to prevent injection attacks.\n5. Use rate limiting to prevent abuse of your API.\n\n📚 Reference: https://jwt.io/"
    },
    {
        "question": "How to manage session in Node.js?",
        "label": "nodejs, session, express",
        "language": "en",
        "context": "Session management is a way to store user-specific data on the server side, ensuring that the user remains authenticated throughout their interactions.",
        "answer": "Steps to manage sessions in Node.js:\n\n1. Install the `express-session` middleware:\n```bash\nnpm install express-session\n```\n2. Set up session middleware in your Express app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n3. Store user data in session:\n```javascript\napp.post('/login', (req, res) => {\n  req.session.user = { id: '1234', name: 'John Doe' };\n  res.send('User logged in');\n});\n```\n4. Access session data on protected routes:\n```javascript\napp.get('/profile', (req, res) => {\n  if (req.session.user) {\n    res.send(`Welcome, ${req.session.user.name}`);\n  } else {\n    res.send('Please log in');\n  }\n});\n```\n5. Use session to manage user state across requests.\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 905,
        "key_answer": "Steps to manage sessions in Node.js:\n\n1. Install the `express-session` middleware:\n```bash\nnpm install express-session\n```\n2. Set up session middleware in your Express app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n3. Store user data in session:\n```javascript\napp.post('/login', (req, res) => {\n  req.session.user = { id: '1234', name: 'John Doe' };\n  res.send('User logged in');\n});\n```\n4. Access session data on protected routes:\n```javascript\napp.get('/profile', (req, res) => {\n  if (req.session.user) {\n    res.send(`Welcome, ${req.session.user.name}`);\n  } else {\n    res.send('Please log in');\n  }\n});\n```\n5. Use session to manage user state across requests.\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to connect MongoDB to Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in a flexible, JSON-like format. It can be integrated with Node.js to store and retrieve data.",
        "answer": "Steps to connect MongoDB to Node.js:\n\n1. Install the `mongoose` package for MongoDB integration:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n```\n3. Define a Mongoose model to interact with a MongoDB collection:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n4. Perform CRUD operations on the MongoDB collection using Mongoose methods.\n\n📚 Reference: https://mongoosejs.com/",
        "start_char": 0,
        "end_char": 768,
        "key_answer": "Steps to connect MongoDB to Node.js:\n\n1. Install the `mongoose` package for MongoDB integration:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n```\n3. Define a Mongoose model to interact with a MongoDB collection:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n4. Perform CRUD operations on the MongoDB collection using Mongoose methods.\n\n📚 Reference: https://mongoosejs.com/"
    },
    {
        "question": "How to use Redis in Node.js?",
        "label": "nodejs, redis, caching",
        "language": "en",
        "context": "Redis is an in-memory data structure store that can be used as a database, cache, and message broker. It is commonly used in Node.js for caching and session management.",
        "answer": "Steps to use Redis in Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Set up a Redis client in your Node.js app:\n```javascript\nconst redis = require('redis');\n\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n3. Use Redis for caching:\n```javascript\nclient.set('key', 'value', 'EX', 3600); // Set key-value pair with an expiration time of 1 hour\nclient.get('key', (err, reply) => {\n  console.log(reply); // Output: 'value'\n});\n```\n4. Use Redis for session storage or message queuing.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 647,
        "key_answer": "Steps to use Redis in Node.js:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n2. Set up a Redis client in your Node.js app:\n```javascript\nconst redis = require('redis');\n\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n3. Use Redis for caching:\n```javascript\nclient.set('key', 'value', 'EX', 3600); // Set key-value pair with an expiration time of 1 hour\nclient.get('key', (err, reply) => {\n  console.log(reply); // Output: 'value'\n});\n```\n4. Use Redis for session storage or message queuing.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to handle file compression in Node.js?",
        "label": "nodejs, file-compression",
        "language": "en",
        "context": "File compression reduces the size of files and can be used to save storage space or reduce transmission time over networks.",
        "answer": "Steps to handle file compression in Node.js:\n\n1. Install the `zlib` or `archiver` package for compression:\n```bash\nnpm install zlib archiver\n```\n2. Use `zlib` for compressing files:\n```javascript\nconst zlib = require('zlib');\nconst fs = require('fs');\n\nconst file = fs.createReadStream('input.txt');\nconst output = fs.createWriteStream('input.txt.gz');\n\nfile.pipe(zlib.createGzip()).pipe(output);\n```\n3. Use `archiver` for creating zip archives:\n```javascript\nconst archiver = require('archiver');\n\nconst output = fs.createWriteStream('archive.zip');\nconst archive = archiver('zip', { zlib: { level: 9 } });\n\narchive.pipe(output);\narchive.file('input.txt', { name: 'input.txt' });\narchive.finalize();\n```\n4. Compression helps reduce file size for storage or network transfer.\n\n📚 Reference: https://nodejs.org/api/zlib.html",
        "start_char": 0,
        "end_char": 851,
        "key_answer": "Steps to handle file compression in Node.js:\n\n1. Install the `zlib` or `archiver` package for compression:\n```bash\nnpm install zlib archiver\n```\n2. Use `zlib` for compressing files:\n```javascript\nconst zlib = require('zlib');\nconst fs = require('fs');\n\nconst file = fs.createReadStream('input.txt');\nconst output = fs.createWriteStream('input.txt.gz');\n\nfile.pipe(zlib.createGzip()).pipe(output);\n```\n3. Use `archiver` for creating zip archives:\n```javascript\nconst archiver = require('archiver');\n\nconst output = fs.createWriteStream('archive.zip');\nconst archive = archiver('zip', { zlib: { level: 9 } });\n\narchive.pipe(output);\narchive.file('input.txt', { name: 'input.txt' });\narchive.finalize();\n```\n4. Compression helps reduce file size for storage or network transfer.\n\n📚 Reference: https://nodejs.org/api/zlib.html"
    },
    {
        "question": "How to implement authentication using Passport.js in Node.js?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport.js is a popular authentication middleware for Node.js, supporting many different authentication strategies.",
        "answer": "Steps to implement authentication using Passport.js in Node.js:\n\n1. Install Passport and related dependencies:\n```bash\nnpm install passport passport-local express-session\n```\n2. Set up Passport in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Authenticate the user\n  if (username === 'admin' && password === 'password') {\n    return done(null, { id: '1', name: 'Admin' });\n  } else {\n    return done(null, false, { message: 'Invalid credentials' });\n  }\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n3. Set up routes to handle login and session management:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/dashboard', failureRedirect: '/login' }));\n```\n4. Protect routes using `passport.authenticate()` middleware:\n```javascript\napp.get('/dashboard', passport.authenticate('local', { session: false }), (req, res) => {\n  res.send('Dashboard');\n});\n```\n5. Use session to store user data between requests.\n\n📚 Reference: http://www.passportjs.org/docs/\n",
        "start_char": 0,
        "end_char": 1198,
        "key_answer": "Steps to implement authentication using Passport.js in Node.js:\n\n1. Install Passport and related dependencies:\n```bash\nnpm install passport passport-local express-session\n```\n2. Set up Passport in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Authenticate the user\n  if (username === 'admin' && password === 'password') {\n    return done(null, { id: '1', name: 'Admin' });\n  } else {\n    return done(null, false, { message: 'Invalid credentials' });\n  }\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n3. Set up routes to handle login and session management:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/dashboard', failureRedirect: '/login' }));\n```\n4. Protect routes using `passport.authenticate()` middleware:\n```javascript\napp.get('/dashboard', passport.authenticate('local', { session: false }), (req, res) => {\n  res.send('Dashboard');\n});\n```\n5. Use session to store user data between requests.\n\n📚 Reference: http://www.passportjs.org/docs/\n"
    },
    {
        "question": "How to handle file uploads with Multer in Node.js?",
        "label": "nodejs, multer, file-upload",
        "language": "en",
        "context": "Multer is a middleware for handling multipart/form-data, which is used for uploading files in Node.js applications.",
        "answer": "Steps to handle file uploads with Multer in Node.js:\n\n1. Install `multer` middleware:\n```bash\nnpm install multer\n```\n2. Set up multer for file storage configuration:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create an endpoint to handle file upload:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n4. Ensure that `uploads/` directory exists for storing uploaded files.\n5. Handle file uploads and implement error handling for invalid file formats.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 859,
        "key_answer": "Steps to handle file uploads with Multer in Node.js:\n\n1. Install `multer` middleware:\n```bash\nnpm install multer\n```\n2. Set up multer for file storage configuration:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create an endpoint to handle file upload:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n4. Ensure that `uploads/` directory exists for storing uploaded files.\n5. Handle file uploads and implement error handling for invalid file formats.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to enable CORS in Node.js?",
        "label": "nodejs, cors, security",
        "language": "en",
        "context": "Cross-Origin Resource Sharing (CORS) is a mechanism that allows restricted resources on a web server to be requested from another domain.",
        "answer": "Steps to enable CORS in Node.js:\n\n1. Install the `cors` middleware:\n```bash\nnpm install cors\n```\n2. Use CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n3. Customize CORS options for specific routes or domains:\n```javascript\napp.use(cors({ origin: 'https://example.com' }));\n```\n4. CORS allows safe cross-origin requests from a client to the server.\n5. You can also configure CORS to allow specific methods, headers, or credentials.\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 554,
        "key_answer": "Steps to enable CORS in Node.js:\n\n1. Install the `cors` middleware:\n```bash\nnpm install cors\n```\n2. Use CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n3. Customize CORS options for specific routes or domains:\n```javascript\napp.use(cors({ origin: 'https://example.com' }));\n```\n4. CORS allows safe cross-origin requests from a client to the server.\n5. You can also configure CORS to allow specific methods, headers, or credentials.\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to use JWT for user authentication in Node.js?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are an open standard for securely transmitting information between client and server as a JSON object.",
        "answer": "Steps to use JWT for user authentication in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Create a route for user login and generate a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Authenticate user\n  const token = jwt.sign({ username }, 'secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Use middleware to verify the JWT token for protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  jwt.verify(token, 'secret-key', (err, decoded) => {\n    if (err) {\n      return res.status(403).send('Forbidden');\n    }\n    req.user = decoded;\n    next();\n  });\n};\n\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n4. JWT allows stateless authentication without the need to store sessions.\n\n📚 Reference: https://jwt.io/",
        "start_char": 0,
        "end_char": 1041,
        "key_answer": "Steps to use JWT for user authentication in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n2. Create a route for user login and generate a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  // Authenticate user\n  const token = jwt.sign({ username }, 'secret-key', { expiresIn: '1h' });\n  res.json({ token });\n});\n```\n3. Use middleware to verify the JWT token for protected routes:\n```javascript\nconst verifyToken = (req, res, next) => {\n  const token = req.header('Authorization').replace('Bearer ', '');\n  jwt.verify(token, 'secret-key', (err, decoded) => {\n    if (err) {\n      return res.status(403).send('Forbidden');\n    }\n    req.user = decoded;\n    next();\n  });\n};\n\napp.get('/protected', verifyToken, (req, res) => {\n  res.send('This is a protected route');\n});\n```\n4. JWT allows stateless authentication without the need to store sessions.\n\n📚 Reference: https://jwt.io/"
    },
    {
        "question": "How to implement rate limiting in Node.js?",
        "label": "nodejs, rate-limiting",
        "language": "en",
        "context": "Rate limiting is the process of limiting the number of requests a client can make to a server in a given period of time, which helps prevent abuse.",
        "answer": "Steps to implement rate limiting in Node.js:\n\n1. Install `express-rate-limit` middleware:\n```bash\nnpm install express-rate-limit\n```\n2. Set up rate limiting for your Express app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Customize rate limiting for specific routes or methods:\n```javascript\napp.use('/api/', limiter);\n```\n4. Rate limiting helps protect your application from DDoS attacks and other forms of abuse.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit",
        "start_char": 0,
        "end_char": 736,
        "key_answer": "Steps to implement rate limiting in Node.js:\n\n1. Install `express-rate-limit` middleware:\n```bash\nnpm install express-rate-limit\n```\n2. Set up rate limiting for your Express app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Customize rate limiting for specific routes or methods:\n```javascript\napp.use('/api/', limiter);\n```\n4. Rate limiting helps protect your application from DDoS attacks and other forms of abuse.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit"
    },
    {
        "question": "How to use Redis for session storage in Node.js?",
        "label": "nodejs, redis, session-storage",
        "language": "en",
        "context": "Redis is often used for session storage in Node.js applications due to its fast in-memory data store capabilities.",
        "answer": "Steps to use Redis for session storage in Node.js:\n\n1. Install `express-session` and `redis` packages:\n```bash\nnpm install express-session redis\n```\n2. Set up Redis store for session storage:\n```javascript\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\nconst redis = require('redis');\n\nconst redisClient = redis.createClient();\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: false,\n}));\n```\n3. Use sessions in your routes:\n```javascript\napp.get('/session', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('Session saved');\n});\n```\n4. Redis helps store sessions in memory for fast access across multiple instances.\n\n📚 Reference: https://www.npmjs.com/package/connect-redis",
        "start_char": 0,
        "end_char": 851,
        "key_answer": "Steps to use Redis for session storage in Node.js:\n\n1. Install `express-session` and `redis` packages:\n```bash\nnpm install express-session redis\n```\n2. Set up Redis store for session storage:\n```javascript\nconst session = require('express-session');\nconst RedisStore = require('connect-redis')(session);\nconst redis = require('redis');\n\nconst redisClient = redis.createClient();\napp.use(session({\n  store: new RedisStore({ client: redisClient }),\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: false,\n}));\n```\n3. Use sessions in your routes:\n```javascript\napp.get('/session', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('Session saved');\n});\n```\n4. Redis helps store sessions in memory for fast access across multiple instances.\n\n📚 Reference: https://www.npmjs.com/package/connect-redis"
    },
    {
        "question": "How to implement JWT authentication in a React app?",
        "label": "react, jwt, authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are commonly used for handling authentication in modern web applications.",
        "answer": "Steps to implement JWT authentication in a React app:\n\n1. Install necessary libraries:\n```bash\nnpm install axios react-router-dom jwt-decode\n```\n2. Create a login form and send a POST request to the backend to get a JWT token:\n```javascript\nimport axios from 'axios';\n\nconst login = async (username, password) => {\n  const response = await axios.post('/login', { username, password });\n  localStorage.setItem('token', response.data.token);\n};\n```\n3. Use `jwt-decode` to decode the token and check if it's valid:\n```javascript\nimport jwt_decode from 'jwt-decode';\n\nconst decodeToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const decoded = jwt_decode(token);\n    console.log(decoded);\n  }\n};\n```\n4. Protect routes in React using a custom hook:\n```javascript\nimport { Redirect } from 'react-router-dom';\n\nconst ProtectedRoute = ({ children }) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return <Redirect to='/login' />;\n  }\n  return children;\n};\n```\n5. Use JWT to maintain a stateless authentication system.\n\n📚 Reference: https://jwt.io/",
        "start_char": 0,
        "end_char": 1139,
        "key_answer": "Steps to implement JWT authentication in a React app:\n\n1. Install necessary libraries:\n```bash\nnpm install axios react-router-dom jwt-decode\n```\n2. Create a login form and send a POST request to the backend to get a JWT token:\n```javascript\nimport axios from 'axios';\n\nconst login = async (username, password) => {\n  const response = await axios.post('/login', { username, password });\n  localStorage.setItem('token', response.data.token);\n};\n```\n3. Use `jwt-decode` to decode the token and check if it's valid:\n```javascript\nimport jwt_decode from 'jwt-decode';\n\nconst decodeToken = () => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    const decoded = jwt_decode(token);\n    console.log(decoded);\n  }\n};\n```\n4. Protect routes in React using a custom hook:\n```javascript\nimport { Redirect } from 'react-router-dom';\n\nconst ProtectedRoute = ({ children }) => {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return <Redirect to='/login' />;\n  }\n  return children;\n};\n```\n5. Use JWT to maintain a stateless authentication system.\n\n📚 Reference: https://jwt.io/"
    },
    {
        "question": "How to use Axios to make API requests in React?",
        "label": "react, axios, api-requests",
        "language": "en",
        "context": "Axios is a promise-based HTTP client for JavaScript that is commonly used to make API requests in React applications.",
        "answer": "Steps to use Axios to make API requests in React:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n2. Import Axios and use it to make a GET or POST request:\n```javascript\nimport axios from 'axios';\n\n// Making a GET request\nconst fetchData = async () => {\n  const response = await axios.get('https://api.example.com/data');\n  console.log(response.data);\n};\n\n// Making a POST request\nconst postData = async () => {\n  const response = await axios.post('https://api.example.com/data', { key: 'value' });\n  console.log(response.data);\n};\n```\n3. Use `useEffect` to call the API on component mount:\n```javascript\nimport { useEffect } from 'react';\n\nuseEffect(() => {\n  fetchData();\n}, []);\n```\n4. Handle errors with `try...catch` block:\n```javascript\ntry {\n  const response = await axios.get('/data');\n} catch (error) {\n  console.error('Error fetching data', error);\n}\n```\n5. Axios can also be used for handling request/response interceptors and cancellation tokens.\n\n📚 Reference: https://axios-http.com/docs/intro",
        "start_char": 0,
        "end_char": 1047,
        "key_answer": "Steps to use Axios to make API requests in React:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n2. Import Axios and use it to make a GET or POST request:\n```javascript\nimport axios from 'axios';\n\n// Making a GET request\nconst fetchData = async () => {\n  const response = await axios.get('https://api.example.com/data');\n  console.log(response.data);\n};\n\n// Making a POST request\nconst postData = async () => {\n  const response = await axios.post('https://api.example.com/data', { key: 'value' });\n  console.log(response.data);\n};\n```\n3. Use `useEffect` to call the API on component mount:\n```javascript\nimport { useEffect } from 'react';\n\nuseEffect(() => {\n  fetchData();\n}, []);\n```\n4. Handle errors with `try...catch` block:\n```javascript\ntry {\n  const response = await axios.get('/data');\n} catch (error) {\n  console.error('Error fetching data', error);\n}\n```\n5. Axios can also be used for handling request/response interceptors and cancellation tokens.\n\n📚 Reference: https://axios-http.com/docs/intro"
    },
    {
        "question": "How to add routing in a React app using React Router?",
        "label": "react, routing, react-router",
        "language": "en",
        "context": "React Router is a library for handling routing in React applications, enabling navigation between different views or pages.",
        "answer": "Steps to add routing in a React app using React Router:\n\n1. Install React Router DOM:\n```bash\nnpm install react-router-dom\n```\n2. Set up the `BrowserRouter` to wrap your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route path='/' exact component={Home} />\n      <Route path='/about' component={About} />\n    </Switch>\n  </Router>\n);\n```\n3. Create components for each route:\n```javascript\nconst Home = () => <div>Home Page</div>;\nconst About = () => <div>About Page</div>;\n```\n4. Use the `Link` component for navigation:\n```javascript\nimport { Link } from 'react-router-dom';\n\n<Link to='/about'>Go to About</Link>\n```\n5. The `Switch` component ensures only the first matching route is rendered.\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 865,
        "key_answer": "Steps to add routing in a React app using React Router:\n\n1. Install React Router DOM:\n```bash\nnpm install react-router-dom\n```\n2. Set up the `BrowserRouter` to wrap your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nconst App = () => (\n  <Router>\n    <Switch>\n      <Route path='/' exact component={Home} />\n      <Route path='/about' component={About} />\n    </Switch>\n  </Router>\n);\n```\n3. Create components for each route:\n```javascript\nconst Home = () => <div>Home Page</div>;\nconst About = () => <div>About Page</div>;\n```\n4. Use the `Link` component for navigation:\n```javascript\nimport { Link } from 'react-router-dom';\n\n<Link to='/about'>Go to About</Link>\n```\n5. The `Switch` component ensures only the first matching route is rendered.\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to use the `useState` hook in React?",
        "label": "react, hooks, usestate",
        "language": "en",
        "context": "The `useState` hook is a fundamental part of React, used for managing state in functional components.",
        "answer": "Steps to use the `useState` hook in React:\n\n1. Import `useState` from React:\n```javascript\nimport { useState } from 'react';\n```\n2. Declare a state variable and its setter function using `useState`:\n```javascript\nconst [count, setCount] = useState(0);\n```\n3. Use the setter function to update the state value:\n```javascript\nsetCount(count + 1);\n```\n4. Use the state variable in your JSX:\n```javascript\n<button onClick={() => setCount(count + 1)}>{count}</button>\n```\n5. `useState` allows you to manage state in functional components without using class components.\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 640,
        "key_answer": "Steps to use the `useState` hook in React:\n\n1. Import `useState` from React:\n```javascript\nimport { useState } from 'react';\n```\n2. Declare a state variable and its setter function using `useState`:\n```javascript\nconst [count, setCount] = useState(0);\n```\n3. Use the setter function to update the state value:\n```javascript\nsetCount(count + 1);\n```\n4. Use the state variable in your JSX:\n```javascript\n<button onClick={() => setCount(count + 1)}>{count}</button>\n```\n5. `useState` allows you to manage state in functional components without using class components.\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to handle asynchronous operations in React using `useEffect`?",
        "label": "react, hooks, useeffect, async",
        "language": "en",
        "context": "The `useEffect` hook in React is used for performing side effects, such as fetching data or subscribing to events.",
        "answer": "Steps to handle asynchronous operations in React using `useEffect`:\n\n1. Define the async function inside `useEffect`:\n```javascript\nuseEffect(() => {\n  const fetchData = async () => {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    setData(data);\n  };\n  fetchData();\n}, []);\n```\n2. Use `async` functions inside `useEffect` to perform async operations like fetching data.\n3. Handle errors inside `useEffect` using `try...catch`:\n```javascript\ntry {\n  const response = await fetch('https://api.example.com/data');\n} catch (error) {\n  console.error('Error fetching data:', error);\n}\n```\n4. Ensure that `useEffect` is called on component mount or when dependencies change.\n5. Use loading and error states to manage UI feedback.\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 867,
        "key_answer": "Steps to handle asynchronous operations in React using `useEffect`:\n\n1. Define the async function inside `useEffect`:\n```javascript\nuseEffect(() => {\n  const fetchData = async () => {\n    const response = await fetch('https://api.example.com/data');\n    const data = await response.json();\n    setData(data);\n  };\n  fetchData();\n}, []);\n```\n2. Use `async` functions inside `useEffect` to perform async operations like fetching data.\n3. Handle errors inside `useEffect` using `try...catch`:\n```javascript\ntry {\n  const response = await fetch('https://api.example.com/data');\n} catch (error) {\n  console.error('Error fetching data:', error);\n}\n```\n4. Ensure that `useEffect` is called on component mount or when dependencies change.\n5. Use loading and error states to manage UI feedback.\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to use `useContext` hook in React?",
        "label": "react, hooks, usecontext",
        "language": "en",
        "context": "The `useContext` hook is used to consume context values in React functional components.",
        "answer": "Steps to use the `useContext` hook in React:\n\n1. Create a context using `createContext`:\n```javascript\nconst MyContext = createContext();\n```\n2. Use the `MyContext.Provider` to provide the context value in a parent component:\n```javascript\n<MyContext.Provider value={myValue}>\n  <ChildComponent />\n</MyContext.Provider>\n```\n3. Consume the context value in a child component using `useContext`:\n```javascript\nimport { useContext } from 'react';\n\nconst ChildComponent = () => {\n  const value = useContext(MyContext);\n  return <div>{value}</div>;\n};\n```\n4. `useContext` allows you to avoid prop drilling and share state across components.\n\n📚 Reference: https://reactjs.org/docs/context.html",
        "start_char": 0,
        "end_char": 710,
        "key_answer": "Steps to use the `useContext` hook in React:\n\n1. Create a context using `createContext`:\n```javascript\nconst MyContext = createContext();\n```\n2. Use the `MyContext.Provider` to provide the context value in a parent component:\n```javascript\n<MyContext.Provider value={myValue}>\n  <ChildComponent />\n</MyContext.Provider>\n```\n3. Consume the context value in a child component using `useContext`:\n```javascript\nimport { useContext } from 'react';\n\nconst ChildComponent = () => {\n  const value = useContext(MyContext);\n  return <div>{value}</div>;\n};\n```\n4. `useContext` allows you to avoid prop drilling and share state across components.\n\n📚 Reference: https://reactjs.org/docs/context.html"
    },
    {
        "question": "How to use React Hooks for managing form state?",
        "label": "react, hooks, form-management",
        "language": "en",
        "context": "React Hooks like `useState` and `useEffect` can be used to manage form state efficiently in functional components.",
        "answer": "Steps to use React Hooks for managing form state:\n\n1. Create a form component with `useState` for managing input values:\n```javascript\nconst Form = () => {\n  const [formData, setFormData] = useState({ name: '', email: '' });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle form submission\n  };\n```\n2. Bind the state variables to form fields:\n```javascript\n<form onSubmit={handleSubmit}>\n  <input\n    type='text'\n    name='name'\n    value={formData.name}\n    onChange={handleChange}\n  />\n  <input\n    type='email'\n    name='email'\n    value={formData.email}\n    onChange={handleChange}\n  />\n  <button type='submit'>Submit</button>\n</form>\n```\n3. `useState` makes it easy to manage form data in functional components.\n4. You can also use `useEffect` to reset the form after submission.\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 998,
        "key_answer": "Steps to use React Hooks for managing form state:\n\n1. Create a form component with `useState` for managing input values:\n```javascript\nconst Form = () => {\n  const [formData, setFormData] = useState({ name: '', email: '' });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Handle form submission\n  };\n```\n2. Bind the state variables to form fields:\n```javascript\n<form onSubmit={handleSubmit}>\n  <input\n    type='text'\n    name='name'\n    value={formData.name}\n    onChange={handleChange}\n  />\n  <input\n    type='email'\n    name='email'\n    value={formData.email}\n    onChange={handleChange}\n  />\n  <button type='submit'>Submit</button>\n</form>\n```\n3. `useState` makes it easy to manage form data in functional components.\n4. You can also use `useEffect` to reset the form after submission.\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to set up and configure ESLint in a React project?",
        "label": "react, eslint, code-quality",
        "language": "en",
        "context": "ESLint is a tool for identifying and reporting on patterns in JavaScript, commonly used to enforce code style and improve code quality in React applications.",
        "answer": "Steps to set up and configure ESLint in a React project:\n\n1. Install ESLint and the required plugins:\n```bash\nnpm install eslint eslint-plugin-react --save-dev\n```\n2. Initialize the ESLint configuration:\n```bash\nnpx eslint --init\n```\n3. Choose the appropriate settings during setup, such as React environment, JavaScript version, and style guide.\n4. Create an `.eslintrc.json` file with the following content:\n```json\n{\n  \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"plugins\": [\"react\"],\n  \"rules\": {\n    \"react/prop-types\": \"off\"\n  }\n}\n```\n5. Add a script to run ESLint:\n```json\n\"scripts\": {\n  \"lint\": \"eslint src/\"\n}\n```\n6. Run ESLint:\n```bash\nnpm run lint\n```\n7. ESLint will highlight issues in your code based on the rules you set up.\n\n📚 Reference: https://eslint.org/docs/user-guide/getting-started",
        "start_char": 0,
        "end_char": 943,
        "key_answer": "Steps to set up and configure ESLint in a React project:\n\n1. Install ESLint and the required plugins:\n```bash\nnpm install eslint eslint-plugin-react --save-dev\n```\n2. Initialize the ESLint configuration:\n```bash\nnpx eslint --init\n```\n3. Choose the appropriate settings during setup, such as React environment, JavaScript version, and style guide.\n4. Create an `.eslintrc.json` file with the following content:\n```json\n{\n  \"extends\": [\"eslint:recommended\", \"plugin:react/recommended\"],\n  \"env\": {\n    \"browser\": true,\n    \"node\": true\n  },\n  \"plugins\": [\"react\"],\n  \"rules\": {\n    \"react/prop-types\": \"off\"\n  }\n}\n```\n5. Add a script to run ESLint:\n```json\n\"scripts\": {\n  \"lint\": \"eslint src/\"\n}\n```\n6. Run ESLint:\n```bash\nnpm run lint\n```\n7. ESLint will highlight issues in your code based on the rules you set up.\n\n📚 Reference: https://eslint.org/docs/user-guide/getting-started"
    },
    {
        "question": "How to set up Redux DevTools in a React project?",
        "label": "react, redux, devtools",
        "language": "en",
        "context": "Redux DevTools is a powerful tool for debugging and inspecting Redux state in real-time.",
        "answer": "Steps to set up Redux DevTools in a React project:\n\n1. Install Redux DevTools extension for Chrome or Firefox from the browser's extension store.\n2. Install Redux DevTools extension in your project:\n```bash\nnpm install redux-devtools-extension --save-dev\n```\n3. Integrate Redux DevTools with your store configuration:\n```javascript\nimport { createStore } from 'redux';\nimport { rootReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools()\n);\n```\n4. After setting up, you can open the Redux DevTools in the browser to inspect actions and state changes.\n5. The DevTools provide advanced features like time travel debugging and action replay.\n\n📚 Reference: https://github.com/zalmoxisus/redux-devtools-extension",
        "start_char": 0,
        "end_char": 832,
        "key_answer": "Steps to set up Redux DevTools in a React project:\n\n1. Install Redux DevTools extension for Chrome or Firefox from the browser's extension store.\n2. Install Redux DevTools extension in your project:\n```bash\nnpm install redux-devtools-extension --save-dev\n```\n3. Integrate Redux DevTools with your store configuration:\n```javascript\nimport { createStore } from 'redux';\nimport { rootReducer } from './reducers';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools()\n);\n```\n4. After setting up, you can open the Redux DevTools in the browser to inspect actions and state changes.\n5. The DevTools provide advanced features like time travel debugging and action replay.\n\n📚 Reference: https://github.com/zalmoxisus/redux-devtools-extension"
    },
    {
        "question": "How to implement lazy loading of components in React?",
        "label": "react, lazy-loading",
        "language": "en",
        "context": "Lazy loading is a technique to load components only when they are needed, improving the performance of large React applications.",
        "answer": "Steps to implement lazy loading of components in React:\n\n1. Use `React.lazy` to dynamically import a component:\n```javascript\nimport React, { Suspense } from 'react';\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n```\n2. Wrap the lazy-loaded component inside a `Suspense` component to display a fallback while loading:\n```javascript\n<Suspense fallback={<div>Loading...</div>}>\n  <LazyComponent />\n</Suspense>\n```\n3. The component will now be loaded only when it is required (e.g., on route visit or button click).\n4. Use `React.lazy` only for components, not for functions or other parts of your application.\n\n📚 Reference: https://reactjs.org/docs/code-splitting.html",
        "start_char": 0,
        "end_char": 703,
        "key_answer": "Steps to implement lazy loading of components in React:\n\n1. Use `React.lazy` to dynamically import a component:\n```javascript\nimport React, { Suspense } from 'react';\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n```\n2. Wrap the lazy-loaded component inside a `Suspense` component to display a fallback while loading:\n```javascript\n<Suspense fallback={<div>Loading...</div>}>\n  <LazyComponent />\n</Suspense>\n```\n3. The component will now be loaded only when it is required (e.g., on route visit or button click).\n4. Use `React.lazy` only for components, not for functions or other parts of your application.\n\n📚 Reference: https://reactjs.org/docs/code-splitting.html"
    },
    {
        "question": "How to handle environment variables in React?",
        "label": "react, environment-variables",
        "language": "en",
        "context": "Environment variables are useful for managing configurations that differ between development, staging, and production environments.",
        "answer": "Steps to handle environment variables in React:\n\n1. Create an `.env` file in the root directory of your React project:\n```env\nREACT_APP_API_URL=https://api.example.com\nREACT_APP_ENV=production\n```\n2. Access the environment variables in your code:\n```javascript\nconst apiUrl = process.env.REACT_APP_API_URL;\nconsole.log(apiUrl); // Output: https://api.example.com\n```\n3. Prefix all environment variables with `REACT_APP_` to make them accessible in your React code.\n4. Use `process.env` to access the variables during build and runtime.\n5. To use different values in different environments, create multiple `.env` files like `.env.development`, `.env.production`.\n\n📚 Reference: https://create-react-app.dev/docs/adding-custom-environment-variables/",
        "start_char": 0,
        "end_char": 763,
        "key_answer": "Steps to handle environment variables in React:\n\n1. Create an `.env` file in the root directory of your React project:\n```env\nREACT_APP_API_URL=https://api.example.com\nREACT_APP_ENV=production\n```\n2. Access the environment variables in your code:\n```javascript\nconst apiUrl = process.env.REACT_APP_API_URL;\nconsole.log(apiUrl); // Output: https://api.example.com\n```\n3. Prefix all environment variables with `REACT_APP_` to make them accessible in your React code.\n4. Use `process.env` to access the variables during build and runtime.\n5. To use different values in different environments, create multiple `.env` files like `.env.development`, `.env.production`.\n\n📚 Reference: https://create-react-app.dev/docs/adding-custom-environment-variables/"
    },
    {
        "question": "How to create custom hooks in React?",
        "label": "react, hooks, custom-hooks",
        "language": "en",
        "context": "Custom hooks in React allow you to reuse stateful logic across multiple components without changing their component hierarchy.",
        "answer": "Steps to create custom hooks in React:\n\n1. Define a function starting with `use` (e.g., `useCounter`) and implement your logic:\n```javascript\nimport { useState } from 'react';\n\nconst useCounter = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  return { count, increment, decrement };\n};\n```\n2. Use the custom hook in your component:\n```javascript\nconst Counter = () => {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <button onClick={increment}>+</button>\n      <span>{count}</span>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n};\n```\n3. Custom hooks allow you to encapsulate reusable logic and make your components cleaner.\n4. You can create hooks for handling form state, API requests, and more.\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html",
        "start_char": 0,
        "end_char": 933,
        "key_answer": "Steps to create custom hooks in React:\n\n1. Define a function starting with `use` (e.g., `useCounter`) and implement your logic:\n```javascript\nimport { useState } from 'react';\n\nconst useCounter = () => {\n  const [count, setCount] = useState(0);\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n  return { count, increment, decrement };\n};\n```\n2. Use the custom hook in your component:\n```javascript\nconst Counter = () => {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <button onClick={increment}>+</button>\n      <span>{count}</span>\n      <button onClick={decrement}>-</button>\n    </div>\n  );\n};\n```\n3. Custom hooks allow you to encapsulate reusable logic and make your components cleaner.\n4. You can create hooks for handling form state, API requests, and more.\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html"
    },
    {
        "question": "How to manage component lifecycle in React using `useEffect`?",
        "label": "react, hooks, lifecycle, useeffect",
        "language": "en",
        "context": "`useEffect` allows you to handle side effects in functional components, including component lifecycle methods like `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount`.",
        "answer": "Steps to manage component lifecycle in React using `useEffect`:\n\n1. Run a side effect on component mount:\n```javascript\nuseEffect(() => {\n  // This runs when the component mounts\n  console.log('Component mounted');\n}, []);\n```\n2. Run a side effect on component update:\n```javascript\nuseEffect(() => {\n  // This runs when the component or any of its dependencies change\n  console.log('Component updated');\n}, [count]);\n```\n3. Clean up side effects when a component unmounts (like unsubscribing from an event):\n```javascript\nuseEffect(() => {\n  return () => {\n    console.log('Component will unmount');\n  };\n}, []);\n```\n4. `useEffect` combines the behavior of `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` into one API.\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 824,
        "key_answer": "Steps to manage component lifecycle in React using `useEffect`:\n\n1. Run a side effect on component mount:\n```javascript\nuseEffect(() => {\n  // This runs when the component mounts\n  console.log('Component mounted');\n}, []);\n```\n2. Run a side effect on component update:\n```javascript\nuseEffect(() => {\n  // This runs when the component or any of its dependencies change\n  console.log('Component updated');\n}, [count]);\n```\n3. Clean up side effects when a component unmounts (like unsubscribing from an event):\n```javascript\nuseEffect(() => {\n  return () => {\n    console.log('Component will unmount');\n  };\n}, []);\n```\n4. `useEffect` combines the behavior of `componentDidMount`, `componentDidUpdate`, and `componentWillUnmount` into one API.\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to handle forms with multiple input fields in React?",
        "label": "react, forms, multiple-inputs",
        "language": "en",
        "context": "Handling multiple input fields in a form can be done using controlled components in React with `useState`.",
        "answer": "Steps to handle forms with multiple input fields in React:\n\n1. Create a state object to manage multiple input values:\n```javascript\nconst [formData, setFormData] = useState({ name: '', email: '', age: '' });\n```\n2. Bind each input field to a property in the state object:\n```javascript\n<form>\n  <input\n    type='text'\n    name='name'\n    value={formData.name}\n    onChange={handleChange}\n  />\n  <input\n    type='email'\n    name='email'\n    value={formData.email}\n    onChange={handleChange}\n  />\n  <input\n    type='number'\n    name='age'\n    value={formData.age}\n    onChange={handleChange}\n  />\n</form>\n```\n3. Use a single `handleChange` function to handle updates for all input fields:\n```javascript\nconst handleChange = (e) => {\n  setFormData({ ...formData, [e.target.name]: e.target.value });\n};\n```\n4. This approach allows you to handle dynamic forms with multiple fields and update them efficiently.\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 992,
        "key_answer": "Steps to handle forms with multiple input fields in React:\n\n1. Create a state object to manage multiple input values:\n```javascript\nconst [formData, setFormData] = useState({ name: '', email: '', age: '' });\n```\n2. Bind each input field to a property in the state object:\n```javascript\n<form>\n  <input\n    type='text'\n    name='name'\n    value={formData.name}\n    onChange={handleChange}\n  />\n  <input\n    type='email'\n    name='email'\n    value={formData.email}\n    onChange={handleChange}\n  />\n  <input\n    type='number'\n    name='age'\n    value={formData.age}\n    onChange={handleChange}\n  />\n</form>\n```\n3. Use a single `handleChange` function to handle updates for all input fields:\n```javascript\nconst handleChange = (e) => {\n  setFormData({ ...formData, [e.target.name]: e.target.value });\n};\n```\n4. This approach allows you to handle dynamic forms with multiple fields and update them efficiently.\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to handle file uploads in Node.js?",
        "label": "node, file-upload, express",
        "language": "en",
        "context": "Handling file uploads in Node.js is common in applications that require users to upload documents, images, or other files.",
        "answer": "Steps to handle file uploads in Node.js:\n\n1. Install `multer` for handling multipart form-data:\n```bash\nnpm install multer\n```\n2. Set up `multer` in your Express app:\n```javascript\nconst multer = require('multer');\n\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n3. Optionally, configure `multer` for file size limits and storage options.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 515,
        "key_answer": "Steps to handle file uploads in Node.js:\n\n1. Install `multer` for handling multipart form-data:\n```bash\nnpm install multer\n```\n2. Set up `multer` in your Express app:\n```javascript\nconst multer = require('multer');\n\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n3. Optionally, configure `multer` for file size limits and storage options.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to secure a Node.js app with HTTPS?",
        "label": "node, security, https",
        "language": "en",
        "context": "HTTPS is a secure version of HTTP that uses SSL/TLS to encrypt communication between the server and the client.",
        "answer": "Steps to secure a Node.js app with HTTPS:\n\n1. Generate an SSL certificate (self-signed or from a CA):\n```bash\nopenssl genpkey -algorithm RSA -out server-key.pem\nopenssl req -new -key server-key.pem -out server.csr\nopenssl x509 -req -in server.csr -signkey server-key.pem -out server-cert.pem\n```\n2. Set up HTTPS server in your Node.js app:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello, HTTPS!');\n}).listen(443);\n```\n3. Redirect HTTP to HTTPS for better security.\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https",
        "start_char": 0,
        "end_char": 791,
        "key_answer": "Steps to secure a Node.js app with HTTPS:\n\n1. Generate an SSL certificate (self-signed or from a CA):\n```bash\nopenssl genpkey -algorithm RSA -out server-key.pem\nopenssl req -new -key server-key.pem -out server.csr\nopenssl x509 -req -in server.csr -signkey server-key.pem -out server-cert.pem\n```\n2. Set up HTTPS server in your Node.js app:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('server-key.pem'),\n  cert: fs.readFileSync('server-cert.pem')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello, HTTPS!');\n}).listen(443);\n```\n3. Redirect HTTP to HTTPS for better security.\n\n📚 Reference: https://nodejs.org/en/docs/guides/anatomy-of-an-http-transaction/#https"
    },
    {
        "question": "How to implement file system operations in Node.js?",
        "label": "node, filesystem, fs",
        "language": "en",
        "context": "The `fs` module in Node.js provides a set of file system operations for reading and writing files.",
        "answer": "Steps to implement file system operations in Node.js:\n\n1. Import the `fs` module:\n```javascript\nconst fs = require('fs');\n```\n2. Read a file asynchronously:\n```javascript\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n3. Write to a file asynchronously:\n```javascript\nfs.writeFile('example.txt', 'Hello, Node.js!', (err) => {\n  if (err) throw err;\n  console.log('File has been saved!');\n});\n```\n4. Use synchronous versions of the methods for blocking operations.\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/fs.html",
        "start_char": 0,
        "end_char": 607,
        "key_answer": "Steps to implement file system operations in Node.js:\n\n1. Import the `fs` module:\n```javascript\nconst fs = require('fs');\n```\n2. Read a file asynchronously:\n```javascript\nfs.readFile('example.txt', 'utf8', (err, data) => {\n  if (err) throw err;\n  console.log(data);\n});\n```\n3. Write to a file asynchronously:\n```javascript\nfs.writeFile('example.txt', 'Hello, Node.js!', (err) => {\n  if (err) throw err;\n  console.log('File has been saved!');\n});\n```\n4. Use synchronous versions of the methods for blocking operations.\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/fs.html"
    },
    {
        "question": "How to optimize performance in Node.js applications?",
        "label": "node, performance, optimization",
        "language": "en",
        "context": "Optimizing performance in Node.js applications is crucial to handle large-scale requests efficiently.",
        "answer": "Steps to optimize performance in Node.js applications:\n\n1. Use asynchronous programming: Utilize non-blocking I/O operations like `fs.readFile`, `setTimeout`, and Promises to avoid blocking the event loop.\n2. Utilize clustering: Leverage Node.js clustering to take advantage of multi-core processors.\n```javascript\nconst cluster = require('cluster');\nconst http = require('http');\n\nif (cluster.isMaster) {\n  const numCPUs = require('os').cpus().length;\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello, world!');\n  }).listen(8000);\n}\n```\n3. Use caching: Cache frequently accessed data to minimize database queries using Redis.\n4. Optimize your database queries: Use indexing, avoid N+1 queries, and minimize joins.\n5. Monitor your app: Use tools like New Relic or PM2 for performance monitoring.\n\n📚 Reference: https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/",
        "start_char": 0,
        "end_char": 1000,
        "key_answer": "Steps to optimize performance in Node.js applications:\n\n1. Use asynchronous programming: Utilize non-blocking I/O operations like `fs.readFile`, `setTimeout`, and Promises to avoid blocking the event loop.\n2. Utilize clustering: Leverage Node.js clustering to take advantage of multi-core processors.\n```javascript\nconst cluster = require('cluster');\nconst http = require('http');\n\nif (cluster.isMaster) {\n  const numCPUs = require('os').cpus().length;\n  for (let i = 0; i < numCPUs; i++) {\n    cluster.fork();\n  }\n} else {\n  http.createServer((req, res) => {\n    res.writeHead(200);\n    res.end('Hello, world!');\n  }).listen(8000);\n}\n```\n3. Use caching: Cache frequently accessed data to minimize database queries using Redis.\n4. Optimize your database queries: Use indexing, avoid N+1 queries, and minimize joins.\n5. Monitor your app: Use tools like New Relic or PM2 for performance monitoring.\n\n📚 Reference: https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/"
    },
    {
        "question": "How to integrate WebSocket in a Node.js application?",
        "label": "node, websocket, real-time",
        "language": "en",
        "context": "WebSockets allow full-duplex communication channels over a single TCP connection, making them ideal for real-time applications.",
        "answer": "Steps to integrate WebSocket in a Node.js application:\n\n1. Install `ws` library:\n```bash\nnpm install ws\n```\n2. Create a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, Client!');\n});\n```\n3. On the client-side, create a WebSocket connection:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  console.log('WebSocket connected');\n  socket.send('Hello, Server!');\n};\n\nsocket.onmessage = (event) => {\n  console.log('Message from server:', event.data);\n};\n```\n4. Optionally, use a framework like `socket.io` for more features.\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 859,
        "key_answer": "Steps to integrate WebSocket in a Node.js application:\n\n1. Install `ws` library:\n```bash\nnpm install ws\n```\n2. Create a WebSocket server in your Node.js app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, Client!');\n});\n```\n3. On the client-side, create a WebSocket connection:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  console.log('WebSocket connected');\n  socket.send('Hello, Server!');\n};\n\nsocket.onmessage = (event) => {\n  console.log('Message from server:', event.data);\n};\n```\n4. Optionally, use a framework like `socket.io` for more features.\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to manage environment variables in Node.js?",
        "label": "node, environment-variables, configuration",
        "language": "en",
        "context": "Environment variables allow you to store configuration values that can vary depending on the environment (development, production, etc.).",
        "answer": "Steps to manage environment variables in Node.js:\n\n1. Install `dotenv` package:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file in the root of your project with key-value pairs:\n```\nDATABASE_URL=your-database-url\nAPI_KEY=your-api-key\n```\n3. Load environment variables in your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DATABASE_URL); // Output: your-database-url\n```\n4. Optionally, use `dotenv-safe` to ensure required variables are defined.\n5. Do not commit the `.env` file to version control for security purposes.\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 631,
        "key_answer": "Steps to manage environment variables in Node.js:\n\n1. Install `dotenv` package:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file in the root of your project with key-value pairs:\n```\nDATABASE_URL=your-database-url\nAPI_KEY=your-api-key\n```\n3. Load environment variables in your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DATABASE_URL); // Output: your-database-url\n```\n4. Optionally, use `dotenv-safe` to ensure required variables are defined.\n5. Do not commit the `.env` file to version control for security purposes.\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to set up logging in a Node.js application?",
        "label": "node, logging, debug",
        "language": "en",
        "context": "Logging is crucial for debugging and monitoring the behavior of your application in production.",
        "answer": "Steps to set up logging in a Node.js application:\n\n1. Install `winston` for flexible logging:\n```bash\nnpm install winston\n```\n2. Set up a basic logger with `winston`:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console({ format: winston.format.simple() }),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n3. Optionally, use `winston` with other logging frameworks for advanced features like log rotation.\n\n📚 Reference: https://www.npmjs.com/package/winston",
        "start_char": 0,
        "end_char": 688,
        "key_answer": "Steps to set up logging in a Node.js application:\n\n1. Install `winston` for flexible logging:\n```bash\nnpm install winston\n```\n2. Set up a basic logger with `winston`:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console({ format: winston.format.simple() }),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n3. Optionally, use `winston` with other logging frameworks for advanced features like log rotation.\n\n📚 Reference: https://www.npmjs.com/package/winston"
    },
    {
        "question": "How to deploy a Node.js app to AWS Lambda?",
        "label": "node, aws, lambda, deployment",
        "language": "en",
        "context": "AWS Lambda is a serverless compute service that allows you to run Node.js applications without provisioning or managing servers.",
        "answer": "Steps to deploy a Node.js app to AWS Lambda:\n\n1. Create an AWS Lambda function in the AWS console and select Node.js as the runtime.\n2. Set up the AWS CLI and configure your credentials:\n```bash\naws configure\n```\n3. Create a `handler.js` file for your Lambda function:\n```javascript\nexports.handler = async (event) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!')\n  };\n};\n```\n4. Deploy the Lambda function using AWS CLI or AWS SDK:\n```bash\nzip function.zip handler.js\naws lambda update-function-code --function-name my-function --zip-file fileb://function.zip\n```\n5. Optionally, set up an API Gateway to trigger the Lambda function via HTTP.\n\n📚 Reference: https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html",
        "start_char": 0,
        "end_char": 778,
        "key_answer": "Steps to deploy a Node.js app to AWS Lambda:\n\n1. Create an AWS Lambda function in the AWS console and select Node.js as the runtime.\n2. Set up the AWS CLI and configure your credentials:\n```bash\naws configure\n```\n3. Create a `handler.js` file for your Lambda function:\n```javascript\nexports.handler = async (event) => {\n  return {\n    statusCode: 200,\n    body: JSON.stringify('Hello from Lambda!')\n  };\n};\n```\n4. Deploy the Lambda function using AWS CLI or AWS SDK:\n```bash\nzip function.zip handler.js\naws lambda update-function-code --function-name my-function --zip-file fileb://function.zip\n```\n5. Optionally, set up an API Gateway to trigger the Lambda function via HTTP.\n\n📚 Reference: https://docs.aws.amazon.com/lambda/latest/dg/nodejs-handler.html"
    },
    {
        "question": "How to use Redis in Node.js for caching?",
        "label": "node, redis, caching",
        "language": "en",
        "context": "Redis is an in-memory data structure store that is often used as a cache to speed up application performance.",
        "answer": "Steps to use Redis in Node.js for caching:\n\n1. Install `redis` npm package:\n```bash\nnpm install redis\n```\n2. Connect to Redis server:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n3. Cache data using Redis:\n```javascript\nclient.set('user:1000', JSON.stringify({ name: 'John Doe', age: 30 }));\n```\n4. Retrieve cached data:\n```javascript\nclient.get('user:1000', (err, reply) => {\n  console.log('Cached user:', JSON.parse(reply));\n});\n```\n5. Optionally, set cache expiration times for better memory management.\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 694,
        "key_answer": "Steps to use Redis in Node.js for caching:\n\n1. Install `redis` npm package:\n```bash\nnpm install redis\n```\n2. Connect to Redis server:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n3. Cache data using Redis:\n```javascript\nclient.set('user:1000', JSON.stringify({ name: 'John Doe', age: 30 }));\n```\n4. Retrieve cached data:\n```javascript\nclient.get('user:1000', (err, reply) => {\n  console.log('Cached user:', JSON.parse(reply));\n});\n```\n5. Optionally, set cache expiration times for better memory management.\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to implement rate limiting in an Express app?",
        "label": "node, express, rate-limiting",
        "language": "en",
        "context": "Rate limiting is essential to prevent abuse of an API by limiting the number of requests from a particular user within a given time frame.",
        "answer": "Steps to implement rate limiting in an Express app:\n\n1. Install `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n2. Create a rate limit middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Optionally, apply rate limiting to specific routes only:\n```javascript\napp.post('/login', limiter, (req, res) => {\n  res.send('Login attempt');\n});\n```\n4. Use a Redis store for distributed rate limiting if you're running multiple instances of your app.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit",
        "start_char": 0,
        "end_char": 791,
        "key_answer": "Steps to implement rate limiting in an Express app:\n\n1. Install `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n2. Create a rate limit middleware:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later.'\n});\n\napp.use(limiter);\n```\n3. Optionally, apply rate limiting to specific routes only:\n```javascript\napp.post('/login', limiter, (req, res) => {\n  res.send('Login attempt');\n});\n```\n4. Use a Redis store for distributed rate limiting if you're running multiple instances of your app.\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit"
    },
    {
        "question": "How to handle errors in Express middleware?",
        "label": "node, express, error-handling",
        "language": "en",
        "context": "Error handling in Express middleware is crucial for debugging and ensuring that errors are gracefully returned to the client.",
        "answer": "Steps to handle errors in Express middleware:\n\n1. Create an error handling middleware function:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n2. Use the error handler middleware at the end of the middleware stack:\n```javascript\napp.use(errorHandler);\n```\n3. Pass errors to the error handler by calling `next(err)` in route handlers or other middleware:\n```javascript\napp.get('/error', (req, res, next) => {\n  next(new Error('This is an error!'));\n});\n```\n4. Optionally, use custom error classes for better error categorization.\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html",
        "start_char": 0,
        "end_char": 709,
        "key_answer": "Steps to handle errors in Express middleware:\n\n1. Create an error handling middleware function:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n2. Use the error handler middleware at the end of the middleware stack:\n```javascript\napp.use(errorHandler);\n```\n3. Pass errors to the error handler by calling `next(err)` in route handlers or other middleware:\n```javascript\napp.get('/error', (req, res, next) => {\n  next(new Error('This is an error!'));\n});\n```\n4. Optionally, use custom error classes for better error categorization.\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html"
    },
    {
        "question": "How to handle cross-origin requests in Node.js?",
        "label": "node, express, cors",
        "language": "en",
        "context": "Cross-Origin Resource Sharing (CORS) is a mechanism that allows resources to be requested from another domain, outside the domain from which the resource originated.",
        "answer": "Steps to handle cross-origin requests in Node.js using CORS:\n\n1. Install `cors` package:\n```bash\nnpm install cors\n```\n2. Enable CORS in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n3. Optionally, configure CORS to allow specific domains or methods:\n```javascript\napp.use(cors({\n  origin: 'https://example.com',\n  methods: ['GET', 'POST']\n}));\n```\n4. Use `cors` only for specific routes if you need more granular control:\n```javascript\napp.get('/public', cors(), (req, res) => {\n  res.json({ message: 'Public resource' });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 643,
        "key_answer": "Steps to handle cross-origin requests in Node.js using CORS:\n\n1. Install `cors` package:\n```bash\nnpm install cors\n```\n2. Enable CORS in your Express app:\n```javascript\nconst cors = require('cors');\n\napp.use(cors());\n```\n3. Optionally, configure CORS to allow specific domains or methods:\n```javascript\napp.use(cors({\n  origin: 'https://example.com',\n  methods: ['GET', 'POST']\n}));\n```\n4. Use `cors` only for specific routes if you need more granular control:\n```javascript\napp.get('/public', cors(), (req, res) => {\n  res.json({ message: 'Public resource' });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to create a REST API in Node.js?",
        "label": "node, express, rest-api",
        "language": "en",
        "context": "A RESTful API is an architectural style that uses HTTP methods for communication between client and server.",
        "answer": "Steps to create a REST API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n2. Set up basic routing in Express:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  res.status(201).json({ id: 2, name: 'Jane Doe' });\n});\n```\n3. Use HTTP methods such as GET, POST, PUT, DELETE to interact with resources.\n4. Optionally, use `express.Router()` for more modular route handling.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 641,
        "key_answer": "Steps to create a REST API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n2. Set up basic routing in Express:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json([{ id: 1, name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  res.status(201).json({ id: 2, name: 'Jane Doe' });\n});\n```\n3. Use HTTP methods such as GET, POST, PUT, DELETE to interact with resources.\n4. Optionally, use `express.Router()` for more modular route handling.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to secure an Express API with JWT?",
        "label": "node, express, jwt, authentication",
        "language": "en",
        "context": "Securing APIs with JWT is a common practice for authentication and authorization in web applications.",
        "answer": "Steps to secure an Express API with JWT:\n\n1. Install `jsonwebtoken` and `express-jwt` packages:\n```bash\nnpm install jsonwebtoken express-jwt\n```\n2. Create a middleware to verify the JWT token:\n```javascript\nconst jwt = require('express-jwt');\n\napp.use(jwt({ secret: 'your-secret-key', algorithms: ['HS256'] }).unless({ path: ['/login', '/register'] }));\n```\n3. Issue a JWT token when a user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const token = jwt.sign({ userId: 123 }, 'your-secret-key');\n  res.json({ token });\n});\n```\n4. Protect routes by using the JWT verification middleware:\n```javascript\napp.get('/protected', (req, res) => {\n  res.json({ message: 'This is protected data' });\n});\n```\n5. Optionally, use token expiration and refresh tokens.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 892,
        "key_answer": "Steps to secure an Express API with JWT:\n\n1. Install `jsonwebtoken` and `express-jwt` packages:\n```bash\nnpm install jsonwebtoken express-jwt\n```\n2. Create a middleware to verify the JWT token:\n```javascript\nconst jwt = require('express-jwt');\n\napp.use(jwt({ secret: 'your-secret-key', algorithms: ['HS256'] }).unless({ path: ['/login', '/register'] }));\n```\n3. Issue a JWT token when a user logs in:\n```javascript\nconst jwt = require('jsonwebtoken');\n\napp.post('/login', (req, res) => {\n  const token = jwt.sign({ userId: 123 }, 'your-secret-key');\n  res.json({ token });\n});\n```\n4. Protect routes by using the JWT verification middleware:\n```javascript\napp.get('/protected', (req, res) => {\n  res.json({ message: 'This is protected data' });\n});\n```\n5. Optionally, use token expiration and refresh tokens.\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to connect to a MongoDB database in Node.js?",
        "label": "node, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database that is commonly used with Node.js applications.",
        "answer": "Steps to connect to a MongoDB database in Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB');\n});\n```\n3. Define your data models using Mongoose schemas.\n4. Perform CRUD operations using Mongoose methods.\n\n📚 Reference: https://mongoosejs.com/",
        "start_char": 0,
        "end_char": 563,
        "key_answer": "Steps to connect to a MongoDB database in Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nmongoose.connection.on('connected', () => {\n  console.log('Connected to MongoDB');\n});\n```\n3. Define your data models using Mongoose schemas.\n4. Perform CRUD operations using Mongoose methods.\n\n📚 Reference: https://mongoosejs.com/"
    },
    {
        "question": "How to send emails in Node.js?",
        "label": "node, email, nodemailer",
        "language": "en",
        "context": "Sending emails is a common feature in many Node.js applications for notifications and communication.",
        "answer": "Steps to send emails in Node.js using `nodemailer`:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n2. Set up the transport object with email service details:\n```javascript\nconst nodemailer = require('nodemailer');\n\nlet transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email using the `sendMail` method:\n```javascript\ntransporter.sendMail({\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email.'\n}, (err, info) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Optionally, use third-party email services for better email deliverability.\n\n📚 Reference: https://www.npmjs.com/package/nodemailer",
        "start_char": 0,
        "end_char": 897,
        "key_answer": "Steps to send emails in Node.js using `nodemailer`:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n2. Set up the transport object with email service details:\n```javascript\nconst nodemailer = require('nodemailer');\n\nlet transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n3. Send an email using the `sendMail` method:\n```javascript\ntransporter.sendMail({\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email.'\n}, (err, info) => {\n  if (err) {\n    console.log(err);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n4. Optionally, use third-party email services for better email deliverability.\n\n📚 Reference: https://www.npmjs.com/package/nodemailer"
    },
    {
        "question": "How to handle file uploads in Express?",
        "label": "node, express, file-upload",
        "language": "en",
        "context": "Handling file uploads is a common feature in web applications, especially for user-provided media or documents.",
        "answer": "Steps to handle file uploads in Express using `multer`:\n\n1. Install `multer` package:\n```bash\nnpm install multer\n```\n2. Set up a storage engine with `multer` to define file destination and naming:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function(req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create a route for handling file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n4. Optionally, add file size and type validation to `multer` configuration.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 825,
        "key_answer": "Steps to handle file uploads in Express using `multer`:\n\n1. Install `multer` package:\n```bash\nnpm install multer\n```\n2. Set up a storage engine with `multer` to define file destination and naming:\n```javascript\nconst multer = require('multer');\nconst storage = multer.diskStorage({\n  destination: function(req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function(req, file, cb) {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n3. Create a route for handling file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n4. Optionally, add file size and type validation to `multer` configuration.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to handle sessions in Node.js?",
        "label": "node, express, sessions",
        "language": "en",
        "context": "Sessions are used to store user data across multiple requests, typically for user authentication and maintaining state in web applications.",
        "answer": "Steps to handle sessions in Node.js using `express-session`:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n2. Set up session middleware in Express:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n3. Access and modify session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('User logged in');\n});\n```\n4. Optionally, set the session expiration time and store session data in a database.\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 706,
        "key_answer": "Steps to handle sessions in Node.js using `express-session`:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n2. Set up session middleware in Express:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n3. Access and modify session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'John Doe';\n  res.send('User logged in');\n});\n```\n4. Optionally, set the session expiration time and store session data in a database.\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to set up WebSockets in Node.js?",
        "label": "node, websocket, real-time",
        "language": "en",
        "context": "WebSockets provide full-duplex communication channels over a single TCP connection, often used for real-time features like chat applications or notifications.",
        "answer": "Steps to set up WebSockets in Node.js using `ws`:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n2. Set up a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, client!');\n});\n```\n3. Connect to the WebSocket server from the client-side using JavaScript's `WebSocket` API:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onmessage = function(event) {\n  console.log('Message from server:', event.data);\n};\nws.send('Hello, server!');\n```\n4. Optionally, use a message broker like Redis to scale WebSocket servers.\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 799,
        "key_answer": "Steps to set up WebSockets in Node.js using `ws`:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n2. Set up a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', ws => {\n  ws.on('message', message => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, client!');\n});\n```\n3. Connect to the WebSocket server from the client-side using JavaScript's `WebSocket` API:\n```javascript\nconst ws = new WebSocket('ws://localhost:8080');\nws.onmessage = function(event) {\n  console.log('Message from server:', event.data);\n};\nws.send('Hello, server!');\n```\n4. Optionally, use a message broker like Redis to scale WebSocket servers.\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to use environment variables in Node.js?",
        "label": "node, environment-variables, config",
        "language": "en",
        "context": "Environment variables allow configuration values to be set outside of the application code, useful for sensitive information like API keys or database credentials.",
        "answer": "Steps to use environment variables in Node.js:\n\n1. Install `dotenv` package to load variables from a `.env` file:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file at the root of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=password\n```\n3. Load the `.env` variables into your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DB_HOST); // Output: localhost\n```\n4. Optionally, use environment variables directly on your hosting platform like Heroku.\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 569,
        "key_answer": "Steps to use environment variables in Node.js:\n\n1. Install `dotenv` package to load variables from a `.env` file:\n```bash\nnpm install dotenv\n```\n2. Create a `.env` file at the root of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=password\n```\n3. Load the `.env` variables into your application:\n```javascript\nrequire('dotenv').config();\n\nconsole.log(process.env.DB_HOST); // Output: localhost\n```\n4. Optionally, use environment variables directly on your hosting platform like Heroku.\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to use promises in Node.js?",
        "label": "node, promises, async-await",
        "language": "en",
        "context": "Promises provide a way to handle asynchronous operations in Node.js, avoiding callback hell.",
        "answer": "Steps to use promises in Node.js:\n\n1. Create a promise using the `Promise` constructor:\n```javascript\nconst myPromise = new Promise((resolve, reject) => {\n  const success = true;\n  if (success) {\n    resolve('Task completed');\n  } else {\n    reject('Task failed');\n  }\n});\n```\n2. Use `.then()` to handle successful resolution and `.catch()` to handle errors:\n```javascript\nmyPromise.then(result => {\n  console.log(result);\n}).catch(error => {\n  console.log(error);\n});\n```\n3. Optionally, chain multiple promises using `.then()`.\n4. Use `async`/`await` for cleaner syntax when working with promises.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 725,
        "key_answer": "Steps to use promises in Node.js:\n\n1. Create a promise using the `Promise` constructor:\n```javascript\nconst myPromise = new Promise((resolve, reject) => {\n  const success = true;\n  if (success) {\n    resolve('Task completed');\n  } else {\n    reject('Task failed');\n  }\n});\n```\n2. Use `.then()` to handle successful resolution and `.catch()` to handle errors:\n```javascript\nmyPromise.then(result => {\n  console.log(result);\n}).catch(error => {\n  console.log(error);\n});\n```\n3. Optionally, chain multiple promises using `.then()`.\n4. Use `async`/`await` for cleaner syntax when working with promises.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "How to send emails using Node.js?",
        "label": "nodejs, email, nodemailer",
        "language": "en",
        "context": "Sending emails is common in web applications for verification, notifications, and alerts.",
        "answer": "Steps to send emails:\n\n1. Install nodemailer:\n```bash\nnpm install nodemailer\n```\n\n2. Create transporter:\n```javascript\nconst nodemailer = require('nodemailer');\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'you@gmail.com',\n    pass: 'password'\n  }\n});\n```\n\n3. Send email:\n```javascript\ntransporter.sendMail({\n  from: 'you@gmail.com',\n  to: 'friend@example.com',\n  subject: 'Hello',\n  text: 'Hi there!'\n});\n```\n\n📚 Reference: https://nodemailer.com/about/",
        "start_char": 0,
        "end_char": 526,
        "key_answer": "Steps to send emails:\n\n1. Install nodemailer:\n```bash\nnpm install nodemailer\n```\n\n2. Create transporter:\n```javascript\nconst nodemailer = require('nodemailer');\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'you@gmail.com',\n    pass: 'password'\n  }\n});\n```\n\n3. Send email:\n```javascript\ntransporter.sendMail({\n  from: 'you@gmail.com',\n  to: 'friend@example.com',\n  subject: 'Hello',\n  text: 'Hi there!'\n});\n```\n\n📚 Reference: https://nodemailer.com/about/"
    },
    {
        "question": "How to validate user input in Express.js using middleware?",
        "label": "nodejs, express, validation",
        "language": "en",
        "context": "Input validation ensures that the data received by the server is correct and safe.",
        "answer": "Steps to validate input:\n\n1. Install `express-validator`:\n```bash\nnpm install express-validator\n```\n\n2. Use validation middleware:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('Valid!');\n});\n```\n\n📚 Reference: https://express-validator.github.io/",
        "start_char": 0,
        "end_char": 556,
        "key_answer": "Steps to validate input:\n\n1. Install `express-validator`:\n```bash\nnpm install express-validator\n```\n\n2. Use validation middleware:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 5 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('Valid!');\n});\n```\n\n📚 Reference: https://express-validator.github.io/"
    },
    {
        "question": "How to create a REST API with Django Rest Framework?",
        "label": "django, rest-api, python",
        "language": "en",
        "context": "Django Rest Framework provides tools to easily create web APIs in Django.",
        "answer": "Steps to create REST API:\n\n1. Install Django Rest Framework:\n```bash\npip install djangorestframework\n```\n\n2. Add to `INSTALLED_APPS` in `settings.py`:\n```python\nINSTALLED_APPS = [\n  'rest_framework',\n]\n```\n\n3. Create a serializer:\n```python\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = User\n    fields = ['id', 'name', 'email']\n```\n\n4. Create views and URL routing:\n```python\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass UserList(APIView):\n  def get(self, request):\n    users = User.objects.all()\n    serializer = UserSerializer(users, many=True)\n    return Response(serializer.data)\n```\n\n📚 Reference: https://www.django-rest-framework.org/",
        "start_char": 0,
        "end_char": 796,
        "key_answer": "Steps to create REST API:\n\n1. Install Django Rest Framework:\n```bash\npip install djangorestframework\n```\n\n2. Add to `INSTALLED_APPS` in `settings.py`:\n```python\nINSTALLED_APPS = [\n  'rest_framework',\n]\n```\n\n3. Create a serializer:\n```python\nfrom rest_framework import serializers\n\nclass UserSerializer(serializers.ModelSerializer):\n  class Meta:\n    model = User\n    fields = ['id', 'name', 'email']\n```\n\n4. Create views and URL routing:\n```python\nfrom rest_framework.views import APIView\nfrom rest_framework.response import Response\n\nclass UserList(APIView):\n  def get(self, request):\n    users = User.objects.all()\n    serializer = UserSerializer(users, many=True)\n    return Response(serializer.data)\n```\n\n📚 Reference: https://www.django-rest-framework.org/"
    },
    {
        "question": "How to set up Google Analytics in a website?",
        "label": "analytics, google-analytics, website",
        "language": "en",
        "context": "Google Analytics is a powerful tool for tracking and analyzing web traffic.",
        "answer": "Steps to set up Google Analytics:\n\n1. Create a Google Analytics account at https://analytics.google.com.\n\n2. Add tracking code to your website's HTML:\n```html\n<script async src='https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXXX-X'></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', 'UA-XXXXXXXXX-X');\n</script>\n```\n\n3. View your data in the Google Analytics dashboard.\n\n📚 Reference: https://support.google.com/analytics/answer/1008015",
        "start_char": 0,
        "end_char": 560,
        "key_answer": "Steps to set up Google Analytics:\n\n1. Create a Google Analytics account at https://analytics.google.com.\n\n2. Add tracking code to your website's HTML:\n```html\n<script async src='https://www.googletagmanager.com/gtag/js?id=UA-XXXXXXXXX-X'></script>\n<script>\n  window.dataLayer = window.dataLayer || [];\n  function gtag(){dataLayer.push(arguments);}\n  gtag('js', new Date());\n  gtag('config', 'UA-XXXXXXXXX-X');\n</script>\n```\n\n3. View your data in the Google Analytics dashboard.\n\n📚 Reference: https://support.google.com/analytics/answer/1008015"
    },
    {
        "question": "How to create a JWT token in Node.js?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JWT (JSON Web Token) is used for secure user authentication in web applications.",
        "answer": "Steps to create a JWT token in Node.js:\n\n1. Install `jsonwebtoken` library:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-secret-key', { expiresIn: '1h' });\nconsole.log(token);\n```\n\n3. Verify a JWT token:\n```javascript\njwt.verify(token, 'your-secret-key', (err, decoded) => {\n  if (err) {\n    console.error('Invalid token');\n  } else {\n    console.log(decoded);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 567,
        "key_answer": "Steps to create a JWT token in Node.js:\n\n1. Install `jsonwebtoken` library:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a JWT token:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst token = jwt.sign({ userId: 123 }, 'your-secret-key', { expiresIn: '1h' });\nconsole.log(token);\n```\n\n3. Verify a JWT token:\n```javascript\njwt.verify(token, 'your-secret-key', (err, decoded) => {\n  if (err) {\n    console.error('Invalid token');\n  } else {\n    console.log(decoded);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to use React Router for navigation?",
        "label": "react, react-router, navigation",
        "language": "en",
        "context": "React Router is a popular library for handling routing in React applications.",
        "answer": "Steps to use React Router:\n\n1. Install `react-router-dom`:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up routing in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Link to routes:\n```javascript\nimport { Link } from 'react-router-dom';\n\n<Link to='/home'>Go to Home</Link>\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 600,
        "key_answer": "Steps to use React Router:\n\n1. Install `react-router-dom`:\n```bash\nnpm install react-router-dom\n```\n\n2. Set up routing in your app:\n```javascript\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Link to routes:\n```javascript\nimport { Link } from 'react-router-dom';\n\n<Link to='/home'>Go to Home</Link>\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to create a simple login form with React?",
        "label": "react, form, login",
        "language": "en",
        "context": "Creating a login form in React allows users to input their credentials and authenticate with a backend server.",
        "answer": "Steps to create a login form with React:\n\n1. Create the form component:\n```javascript\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Email:', email, 'Password:', password);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='email' value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Login</button>\n    </form>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 684,
        "key_answer": "Steps to create a login form with React:\n\n1. Create the form component:\n```javascript\nfunction LoginForm() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log('Email:', email, 'Password:', password);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type='email' value={email} onChange={(e) => setEmail(e.target.value)} />\n      <input type='password' value={password} onChange={(e) => setPassword(e.target.value)} />\n      <button type='submit'>Login</button>\n    </form>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to make an API call in React using Axios?",
        "label": "react, axios, api-call",
        "language": "en",
        "context": "Axios is a popular library for making HTTP requests from React applications.",
        "answer": "Steps to make an API call using Axios:\n\n1. Install `axios` library:\n```bash\nnpm install axios\n```\n\n2. Make an API call in your component:\n```javascript\nimport axios from 'axios';\n\nconst fetchData = async () => {\n  try {\n    const response = await axios.get('https://api.example.com/data');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n```\n\n3. Trigger the API call in `useEffect` or an event handler.\n\n📚 Reference: https://axios-http.com/docs/intro",
        "start_char": 0,
        "end_char": 534,
        "key_answer": "Steps to make an API call using Axios:\n\n1. Install `axios` library:\n```bash\nnpm install axios\n```\n\n2. Make an API call in your component:\n```javascript\nimport axios from 'axios';\n\nconst fetchData = async () => {\n  try {\n    const response = await axios.get('https://api.example.com/data');\n    console.log(response.data);\n  } catch (error) {\n    console.error('Error fetching data:', error);\n  }\n};\n```\n\n3. Trigger the API call in `useEffect` or an event handler.\n\n📚 Reference: https://axios-http.com/docs/intro"
    },
    {
        "question": "How to handle authentication using JWT in Node.js?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JWT (JSON Web Token) is a secure method for user authentication, often used in APIs.",
        "answer": "Steps to handle authentication using JWT in Node.js:\n\n1. Install `jsonwebtoken` and `bcryptjs`:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a JWT token after user login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Assuming user credentials are verified\nconst token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\n```\n\n3. Verify the token for protected routes:\n```javascript\nconst authMiddleware = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.status(403).send('Forbidden');\n    req.userId = decoded.userId;\n    next();\n  });\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 795,
        "key_answer": "Steps to handle authentication using JWT in Node.js:\n\n1. Install `jsonwebtoken` and `bcryptjs`:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a JWT token after user login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Assuming user credentials are verified\nconst token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\n```\n\n3. Verify the token for protected routes:\n```javascript\nconst authMiddleware = (req, res, next) => {\n  const token = req.headers['authorization'];\n  jwt.verify(token, 'secretkey', (err, decoded) => {\n    if (err) return res.status(403).send('Forbidden');\n    req.userId = decoded.userId;\n    next();\n  });\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to perform database migrations in Sequelize?",
        "label": "sequelize, database, migration",
        "language": "en",
        "context": "Sequelize is an ORM for Node.js that works with various SQL-based databases. Database migrations help in managing changes to the database schema.",
        "answer": "Steps to perform database migrations in Sequelize:\n\n1. Install Sequelize CLI:\n```bash\nnpm install --save sequelize sequelize-cli\n```\n\n2. Initialize Sequelize:\n```bash\nnpx sequelize-cli init\n```\n\n3. Create a migration file:\n```bash\nnpx sequelize-cli migration:generate --name create-users-table\n```\n\n4. Define the migration in the generated file:\n```javascript\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Users', {\n      id: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      name: Sequelize.STRING,\n      email: Sequelize.STRING,\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Users');\n  },\n};\n```\n\n5. Run the migration:\n```bash\nnpx sequelize-cli db:migrate\n```\n\n📚 Reference: https://sequelize.org/master/manual/migrations.html",
        "start_char": 0,
        "end_char": 920,
        "key_answer": "Steps to perform database migrations in Sequelize:\n\n1. Install Sequelize CLI:\n```bash\nnpm install --save sequelize sequelize-cli\n```\n\n2. Initialize Sequelize:\n```bash\nnpx sequelize-cli init\n```\n\n3. Create a migration file:\n```bash\nnpx sequelize-cli migration:generate --name create-users-table\n```\n\n4. Define the migration in the generated file:\n```javascript\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    return queryInterface.createTable('Users', {\n      id: {\n        type: Sequelize.INTEGER,\n        primaryKey: true,\n        autoIncrement: true,\n      },\n      name: Sequelize.STRING,\n      email: Sequelize.STRING,\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Users');\n  },\n};\n```\n\n5. Run the migration:\n```bash\nnpx sequelize-cli db:migrate\n```\n\n📚 Reference: https://sequelize.org/master/manual/migrations.html"
    },
    {
        "question": "How to perform user validation in Express.js?",
        "label": "express, validation, nodejs",
        "language": "en",
        "context": "User input validation ensures that the data submitted by users is in the correct format and is safe to use in your application.",
        "answer": "Steps to perform user validation in Express.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use `express-validator` in your route handlers:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/login',\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 }),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    // Proceed with authentication\n  }\n);\n```\n\n📚 Reference: https://express-validator.github.io/docs/",
        "start_char": 0,
        "end_char": 633,
        "key_answer": "Steps to perform user validation in Express.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use `express-validator` in your route handlers:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/login',\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 }),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n    // Proceed with authentication\n  }\n);\n```\n\n📚 Reference: https://express-validator.github.io/docs/"
    },
    {
        "question": "How to create a REST API with Express.js?",
        "label": "express, api, nodejs",
        "language": "en",
        "context": "Express.js is widely used to build RESTful APIs in Node.js applications.",
        "answer": "Steps to create a REST API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up routes for your API:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json({ message: 'List of users' });\n});\n\napp.post('/users', (req, res) => {\n  res.json({ message: 'User created' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. Test the API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 591,
        "key_answer": "Steps to create a REST API with Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up routes for your API:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/users', (req, res) => {\n  res.json({ message: 'List of users' });\n});\n\napp.post('/users', (req, res) => {\n  res.json({ message: 'User created' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. Test the API using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to set up WebSocket communication in Node.js?",
        "label": "nodejs, websocket, communication",
        "language": "en",
        "context": "WebSocket is a protocol that provides full-duplex communication channels over a single TCP connection.",
        "answer": "Steps to set up WebSocket communication in Node.js:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Set up WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.send('Welcome to WebSocket server');\n\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n});\n```\n\n3. Connect to WebSocket server from client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  socket.send('Hello, server!');\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 649,
        "key_answer": "Steps to set up WebSocket communication in Node.js:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Set up WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.send('Welcome to WebSocket server');\n\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n});\n```\n\n3. Connect to WebSocket server from client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\n\nsocket.onopen = () => {\n  socket.send('Hello, server!');\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to use Redux in React?",
        "label": "redux, react, state-management",
        "language": "en",
        "context": "Redux is a predictable state container for JavaScript apps, commonly used with React for state management.",
        "answer": "Steps to use Redux in React:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Provide the store to the React app:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n4. Connect components to Redux store using `connect`:\n```javascript\nimport { connect } from 'react-redux';\n\nconst UserComponent = ({ user }) => {\n  return <div>{user.name}</div>;\n};\n\nconst mapStateToProps = (state) => ({ user: state.user });\n\nexport default connect(mapStateToProps)(UserComponent);\n```\n\n📚 Reference: https://react-redux.js.org/",
        "start_char": 0,
        "end_char": 964,
        "key_answer": "Steps to use Redux in React:\n\n1. Install Redux and React-Redux:\n```bash\nnpm install redux react-redux\n```\n\n2. Create a Redux store:\n```javascript\nimport { createStore } from 'redux';\n\nconst reducer = (state = {}, action) => {\n  switch (action.type) {\n    case 'SET_USER':\n      return { ...state, user: action.payload };\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(reducer);\n```\n\n3. Provide the store to the React app:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n4. Connect components to Redux store using `connect`:\n```javascript\nimport { connect } from 'react-redux';\n\nconst UserComponent = ({ user }) => {\n  return <div>{user.name}</div>;\n};\n\nconst mapStateToProps = (state) => ({ user: state.user });\n\nexport default connect(mapStateToProps)(UserComponent);\n```\n\n📚 Reference: https://react-redux.js.org/"
    },
    {
        "question": "How to set up Redux Toolkit in React?",
        "label": "redux, react, toolkit",
        "language": "en",
        "context": "Redux Toolkit is a set of tools to help you write Redux logic in a simpler way, improving developer experience.",
        "answer": "Steps to set up Redux Toolkit in React:\n\n1. Install Redux Toolkit and React-Redux:\n```bash\nnpm install @reduxjs/toolkit react-redux\n```\n\n2. Create a Redux slice:\n```javascript\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: { user: null },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n  },\n});\n\nexport const { setUser } = userSlice.actions;\nexport default userSlice.reducer;\n```\n\n3. Set up the store:\n```javascript\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './userSlice';\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n```\n\n4. Provide the store to your React app:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://redux-toolkit.js.org/",
        "start_char": 0,
        "end_char": 958,
        "key_answer": "Steps to set up Redux Toolkit in React:\n\n1. Install Redux Toolkit and React-Redux:\n```bash\nnpm install @reduxjs/toolkit react-redux\n```\n\n2. Create a Redux slice:\n```javascript\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst userSlice = createSlice({\n  name: 'user',\n  initialState: { user: null },\n  reducers: {\n    setUser: (state, action) => {\n      state.user = action.payload;\n    },\n  },\n});\n\nexport const { setUser } = userSlice.actions;\nexport default userSlice.reducer;\n```\n\n3. Set up the store:\n```javascript\nimport { configureStore } from '@reduxjs/toolkit';\nimport userReducer from './userSlice';\n\nconst store = configureStore({\n  reducer: {\n    user: userReducer,\n  },\n});\n```\n\n4. Provide the store to your React app:\n```javascript\nimport { Provider } from 'react-redux';\nimport App from './App';\n\n<Provider store={store}>\n  <App />\n</Provider>\n```\n\n📚 Reference: https://redux-toolkit.js.org/"
    },
    {
        "question": "How to deploy a React app using GitHub Pages?",
        "label": "react, github-pages, deployment",
        "language": "en",
        "context": "GitHub Pages allows you to host static websites directly from a GitHub repository. It's a popular way to deploy React apps.",
        "answer": "Steps to deploy a React app using GitHub Pages:\n\n1. Install `gh-pages` package:\n```bash\nnpm install gh-pages\n```\n\n2. Add `homepage` property to `package.json`:\n```json\n\"homepage\": \"https://<your-username>.github.io/<repository-name>/\"\n```\n\n3. Modify `scripts` in `package.json` to include deploy commands:\n```json\n\"scripts\": {\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n}\n```\n\n4. Run the deploy command:\n```bash\nnpm run deploy\n```\n\n5. Visit your React app on GitHub Pages.\n\n📚 Reference: https://create-react-app.dev/docs/deployment/#github-pages",
        "start_char": 0,
        "end_char": 607,
        "key_answer": "Steps to deploy a React app using GitHub Pages:\n\n1. Install `gh-pages` package:\n```bash\nnpm install gh-pages\n```\n\n2. Add `homepage` property to `package.json`:\n```json\n\"homepage\": \"https://<your-username>.github.io/<repository-name>/\"\n```\n\n3. Modify `scripts` in `package.json` to include deploy commands:\n```json\n\"scripts\": {\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n}\n```\n\n4. Run the deploy command:\n```bash\nnpm run deploy\n```\n\n5. Visit your React app on GitHub Pages.\n\n📚 Reference: https://create-react-app.dev/docs/deployment/#github-pages"
    },
    {
        "question": "How to implement JWT authentication in React?",
        "label": "react, jwt, authentication",
        "language": "en",
        "context": "JWT (JSON Web Token) is commonly used for stateless authentication in web applications, where the server generates a token that the client stores and sends for future requests.",
        "answer": "Steps to implement JWT authentication in React:\n\n1. After user logs in, the server sends a JWT token:\n```javascript\nconst token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\nres.json({ token });\n```\n\n2. Store the JWT token in localStorage or sessionStorage on the client:\n```javascript\nlocalStorage.setItem('token', token);\n```\n\n3. Send the token with every API request by adding it to the request headers:\n```javascript\nconst token = localStorage.getItem('token');\nfetch('https://api.example.com/protected', {\n  headers: { 'Authorization': `Bearer ${token}` }\n});\n```\n\n4. Verify the token on the server for protected routes.\n\n📚 Reference: https://jwt.io/",
        "start_char": 0,
        "end_char": 700,
        "key_answer": "Steps to implement JWT authentication in React:\n\n1. After user logs in, the server sends a JWT token:\n```javascript\nconst token = jwt.sign({ userId: user._id }, 'secretkey', { expiresIn: '1h' });\nres.json({ token });\n```\n\n2. Store the JWT token in localStorage or sessionStorage on the client:\n```javascript\nlocalStorage.setItem('token', token);\n```\n\n3. Send the token with every API request by adding it to the request headers:\n```javascript\nconst token = localStorage.getItem('token');\nfetch('https://api.example.com/protected', {\n  headers: { 'Authorization': `Bearer ${token}` }\n});\n```\n\n4. Verify the token on the server for protected routes.\n\n📚 Reference: https://jwt.io/"
    },
    {
        "question": "How to use Axios for API requests in React?",
        "label": "react, axios, api",
        "language": "en",
        "context": "Axios is a promise-based HTTP client for the browser and Node.js, often used in React to make API requests.",
        "answer": "Steps to use Axios for API requests in React:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make an API request using Axios in a React component:\n```javascript\nimport axios from 'axios';\n\nfunction App() {\n  useEffect(() => {\n    axios.get('https://api.example.com/data')\n      .then(response => {\n        console.log(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n}\n```\n\n3. You can also use `axios.post()` for sending data.\n\n📚 Reference: https://axios-http.com/",
        "start_char": 0,
        "end_char": 570,
        "key_answer": "Steps to use Axios for API requests in React:\n\n1. Install Axios:\n```bash\nnpm install axios\n```\n\n2. Make an API request using Axios in a React component:\n```javascript\nimport axios from 'axios';\n\nfunction App() {\n  useEffect(() => {\n    axios.get('https://api.example.com/data')\n      .then(response => {\n        console.log(response.data);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n      });\n  }, []);\n}\n```\n\n3. You can also use `axios.post()` for sending data.\n\n📚 Reference: https://axios-http.com/"
    },
    {
        "question": "How to use the `useEffect` hook in React?",
        "label": "react, useEffect, hooks",
        "language": "en",
        "context": "The `useEffect` hook is used to perform side effects in function components, such as data fetching, setting up subscriptions, and manually changing the DOM.",
        "answer": "Steps to use the `useEffect` hook in React:\n\n1. Import `useEffect` from React:\n```javascript\nimport { useEffect } from 'react';\n```\n\n2. Use `useEffect` for side effects:\n```javascript\nuseEffect(() => {\n  console.log('Component mounted');\n}, []); // Empty array means this runs once\n```\n\n3. Optionally clean up after the effect:\n```javascript\nuseEffect(() => {\n  const interval = setInterval(() => {\n    console.log('Tick');\n  }, 1000);\n  return () => clearInterval(interval); // Cleanup\n}, []);\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html",
        "start_char": 0,
        "end_char": 579,
        "key_answer": "Steps to use the `useEffect` hook in React:\n\n1. Import `useEffect` from React:\n```javascript\nimport { useEffect } from 'react';\n```\n\n2. Use `useEffect` for side effects:\n```javascript\nuseEffect(() => {\n  console.log('Component mounted');\n}, []); // Empty array means this runs once\n```\n\n3. Optionally clean up after the effect:\n```javascript\nuseEffect(() => {\n  const interval = setInterval(() => {\n    console.log('Tick');\n  }, 1000);\n  return () => clearInterval(interval); // Cleanup\n}, []);\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-effect.html"
    },
    {
        "question": "How to set up Firebase in a React app?",
        "label": "react, firebase, setup",
        "language": "en",
        "context": "Firebase is a platform developed by Google that provides various tools for app development, including real-time databases and authentication services.",
        "answer": "Steps to set up Firebase in a React app:\n\n1. Create a Firebase project in the Firebase Console.\n\n2. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n3. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-messaging-sender-id',\n  appId: 'your-app-id'\n};\n\nfirebase.initializeApp(firebaseConfig);\n```\n\n4. Use Firebase services in your React components (e.g., authentication).\n\n📚 Reference: https://firebase.google.com/docs/web/setup",
        "start_char": 0,
        "end_char": 704,
        "key_answer": "Steps to set up Firebase in a React app:\n\n1. Create a Firebase project in the Firebase Console.\n\n2. Install Firebase SDK:\n```bash\nnpm install firebase\n```\n\n3. Initialize Firebase in your app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = {\n  apiKey: 'your-api-key',\n  authDomain: 'your-auth-domain',\n  projectId: 'your-project-id',\n  storageBucket: 'your-storage-bucket',\n  messagingSenderId: 'your-messaging-sender-id',\n  appId: 'your-app-id'\n};\n\nfirebase.initializeApp(firebaseConfig);\n```\n\n4. Use Firebase services in your React components (e.g., authentication).\n\n📚 Reference: https://firebase.google.com/docs/web/setup"
    },
    {
        "question": "How to create a custom hook in React?",
        "label": "react, custom-hook, hooks",
        "language": "en",
        "context": "Custom hooks allow you to reuse stateful logic between components in React.",
        "answer": "Steps to create a custom hook in React:\n\n1. Create a new file for the custom hook (e.g., `useCounter.js`).\n\n2. Define the custom hook function:\n```javascript\nimport { useState } from 'react';\n\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n\n  return { count, increment, decrement };\n}\n```\n\n3. Use the custom hook in a component:\n```javascript\nimport useCounter from './useCounter';\n\nfunction CounterComponent() {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html",
        "start_char": 0,
        "end_char": 876,
        "key_answer": "Steps to create a custom hook in React:\n\n1. Create a new file for the custom hook (e.g., `useCounter.js`).\n\n2. Define the custom hook function:\n```javascript\nimport { useState } from 'react';\n\nfunction useCounter(initialValue = 0) {\n  const [count, setCount] = useState(initialValue);\n\n  const increment = () => setCount(count + 1);\n  const decrement = () => setCount(count - 1);\n\n  return { count, increment, decrement };\n}\n```\n\n3. Use the custom hook in a component:\n```javascript\nimport useCounter from './useCounter';\n\nfunction CounterComponent() {\n  const { count, increment, decrement } = useCounter();\n  return (\n    <div>\n      <button onClick={increment}>Increment</button>\n      <button onClick={decrement}>Decrement</button>\n      <p>Count: {count}</p>\n    </div>\n  );\n}\n```\n\n📚 Reference: https://reactjs.org/docs/hooks-custom.html"
    },
    {
        "question": "How to set up a MySQL database with Node.js?",
        "label": "nodejs, mysql, database",
        "language": "en",
        "context": "Node.js can interact with MySQL databases using the `mysql` or `mysql2` package, which allows for querying and manipulating data.",
        "answer": "Steps to set up a MySQL database with Node.js:\n\n1. Install the MySQL package:\n```bash\nnpm install mysql2\n```\n\n2. Create a connection to the MySQL database:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'test_db'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database');\n});\n```\n\n3. Query the database (e.g., SELECT, INSERT, UPDATE, DELETE):\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n4. Close the connection:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql2",
        "start_char": 0,
        "end_char": 774,
        "key_answer": "Steps to set up a MySQL database with Node.js:\n\n1. Install the MySQL package:\n```bash\nnpm install mysql2\n```\n\n2. Create a connection to the MySQL database:\n```javascript\nconst mysql = require('mysql2');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: '',\n  database: 'test_db'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Connected to MySQL database');\n});\n```\n\n3. Query the database (e.g., SELECT, INSERT, UPDATE, DELETE):\n```javascript\nconnection.query('SELECT * FROM users', (err, results) => {\n  if (err) throw err;\n  console.log(results);\n});\n```\n\n4. Close the connection:\n```javascript\nconnection.end();\n```\n\n📚 Reference: https://www.npmjs.com/package/mysql2"
    },
    {
        "question": "How to create a simple web scraper in Node.js?",
        "label": "nodejs, web-scraping, js",
        "language": "en",
        "context": "Web scraping in Node.js can be done using libraries like `cheerio` for parsing HTML and `axios` for making HTTP requests.",
        "answer": "Steps to create a simple web scraper in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install axios cheerio\n```\n\n2. Fetch the HTML content of a webpage using `axios`:\n```javascript\nconst axios = require('axios');\nconst cheerio = require('cheerio');\n\naxios.get('https://example.com').then((response) => {\n  const $ = cheerio.load(response.data);\n  console.log($('title').text());\n});\n```\n\n3. Use `cheerio` to parse and extract data from the HTML.\n\n📚 Reference: https://www.npmjs.com/package/cheerio",
        "start_char": 0,
        "end_char": 527,
        "key_answer": "Steps to create a simple web scraper in Node.js:\n\n1. Install the required packages:\n```bash\nnpm install axios cheerio\n```\n\n2. Fetch the HTML content of a webpage using `axios`:\n```javascript\nconst axios = require('axios');\nconst cheerio = require('cheerio');\n\naxios.get('https://example.com').then((response) => {\n  const $ = cheerio.load(response.data);\n  console.log($('title').text());\n});\n```\n\n3. Use `cheerio` to parse and extract data from the HTML.\n\n📚 Reference: https://www.npmjs.com/package/cheerio"
    },
    {
        "question": "How to create an Angular app and set up routing?",
        "label": "angular, routing, frontend",
        "language": "en",
        "context": "Angular is a framework for building single-page applications. Routing allows users to navigate between different views in the app.",
        "answer": "Steps to create an Angular app and set up routing:\n\n1. Install Angular CLI and create a new app:\n```bash\nnpm install -g @angular/cli\nng new my-app\ncd my-app\n```\n\n2. Generate components for different views:\n```bash\nng generate component home\nng generate component about\n```\n\n3. Set up routing in the `app-routing.module.ts`:\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n  { path: '', redirectTo: '/home', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n4. Add `<router-outlet></router-outlet>` to the `app.component.html`.\n\n📚 Reference: https://angular.io/guide/router",
        "start_char": 0,
        "end_char": 1002,
        "key_answer": "Steps to create an Angular app and set up routing:\n\n1. Install Angular CLI and create a new app:\n```bash\nnpm install -g @angular/cli\nng new my-app\ncd my-app\n```\n\n2. Generate components for different views:\n```bash\nng generate component home\nng generate component about\n```\n\n3. Set up routing in the `app-routing.module.ts`:\n```typescript\nimport { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { AboutComponent } from './about/about.component';\n\nconst routes: Routes = [\n  { path: 'home', component: HomeComponent },\n  { path: 'about', component: AboutComponent },\n  { path: '', redirectTo: '/home', pathMatch: 'full' }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n```\n\n4. Add `<router-outlet></router-outlet>` to the `app.component.html`.\n\n📚 Reference: https://angular.io/guide/router"
    },
    {
        "question": "How to implement a basic authentication system in Node.js?",
        "label": "nodejs, authentication, security",
        "language": "en",
        "context": "Authentication is essential for ensuring that users can access their accounts and services securely. Basic authentication can be set up using Passport.js in Node.js.",
        "answer": "Steps to implement basic authentication in Node.js:\n\n1. Install Passport and necessary packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport.js for local authentication:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Logic to verify username and password\n}));\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  // Logic to fetch user by ID\n});\n```\n\n3. Set up express-session and Passport middleware in your app:\n```javascript\napp.use(require('express-session')({ secret: 'secret', resave: false, saveUninitialized: false }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Implement the login route to authenticate users:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: https://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 1084,
        "key_answer": "Steps to implement basic authentication in Node.js:\n\n1. Install Passport and necessary packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport.js for local authentication:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Logic to verify username and password\n}));\n\npassport.serializeUser((user, done) => {\n  done(null, user.id);\n});\n\npassport.deserializeUser((id, done) => {\n  // Logic to fetch user by ID\n});\n```\n\n3. Set up express-session and Passport middleware in your app:\n```javascript\napp.use(require('express-session')({ secret: 'secret', resave: false, saveUninitialized: false }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Implement the login route to authenticate users:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: https://www.passportjs.org/docs/"
    },
    {
        "question": "How to perform input validation in a Node.js application?",
        "label": "nodejs, validation, input",
        "language": "en",
        "context": "Input validation ensures that data provided by users is in the expected format before it is processed or stored.",
        "answer": "Steps to perform input validation in a Node.js application:\n\n1. Install the `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use `express-validator` to validate request data:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('Registration successful');\n});\n```\n\n3. Handle errors if validation fails.\n\n📚 Reference: https://express-validator.github.io/docs/",
        "start_char": 0,
        "end_char": 689,
        "key_answer": "Steps to perform input validation in a Node.js application:\n\n1. Install the `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use `express-validator` to validate request data:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('Registration successful');\n});\n```\n\n3. Handle errors if validation fails.\n\n📚 Reference: https://express-validator.github.io/docs/"
    },
    {
        "question": "How to connect Node.js with Redis?",
        "label": "nodejs, redis, database",
        "language": "en",
        "context": "Redis is an in-memory data structure store, often used for caching and session management. You can connect Node.js to Redis using the `redis` package.",
        "answer": "Steps to connect Node.js with Redis:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n\n2. Create a Redis client and connect:\n```javascript\nconst redis = require('redis');\n\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379\n});\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Use Redis commands for data manipulation (e.g., `get`, `set`):\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', (err, reply) => {\n  console.log(reply); // Will output 'value'\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 624,
        "key_answer": "Steps to connect Node.js with Redis:\n\n1. Install the `redis` package:\n```bash\nnpm install redis\n```\n\n2. Create a Redis client and connect:\n```javascript\nconst redis = require('redis');\n\nconst client = redis.createClient({\n  host: 'localhost',\n  port: 6379\n});\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Use Redis commands for data manipulation (e.g., `get`, `set`):\n```javascript\nclient.set('key', 'value', redis.print);\nclient.get('key', (err, reply) => {\n  console.log(reply); // Will output 'value'\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to use Sequelize for ORM in Node.js?",
        "label": "nodejs, sequelize, orm",
        "language": "en",
        "context": "Sequelize is an ORM (Object-Relational Mapping) tool for Node.js that allows you to interact with relational databases like MySQL, PostgreSQL, and SQLite.",
        "answer": "Steps to use Sequelize for ORM in Node.js:\n\n1. Install Sequelize and the appropriate database package (e.g., mysql2 for MySQL):\n```bash\nnpm install sequelize mysql2\n```\n\n2. Set up Sequelize and connect to the database:\n```javascript\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/mydatabase');\n```\n\n3. Define a model for a table:\n```javascript\nconst User = sequelize.define('User', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  email: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    unique: true\n  }\n});\n```\n\n4. Sync the models and interact with the database:\n```javascript\nsequelize.sync().then(() => {\n  User.create({ name: 'John Doe', email: 'john@example.com' });\n});\n```\n\n📚 Reference: https://sequelize.org/",
        "start_char": 0,
        "end_char": 846,
        "key_answer": "Steps to use Sequelize for ORM in Node.js:\n\n1. Install Sequelize and the appropriate database package (e.g., mysql2 for MySQL):\n```bash\nnpm install sequelize mysql2\n```\n\n2. Set up Sequelize and connect to the database:\n```javascript\nconst { Sequelize } = require('sequelize');\n\nconst sequelize = new Sequelize('mysql://user:password@localhost:3306/mydatabase');\n```\n\n3. Define a model for a table:\n```javascript\nconst User = sequelize.define('User', {\n  name: {\n    type: Sequelize.STRING,\n    allowNull: false\n  },\n  email: {\n    type: Sequelize.STRING,\n    allowNull: false,\n    unique: true\n  }\n});\n```\n\n4. Sync the models and interact with the database:\n```javascript\nsequelize.sync().then(() => {\n  User.create({ name: 'John Doe', email: 'john@example.com' });\n});\n```\n\n📚 Reference: https://sequelize.org/"
    },
    {
        "question": "How to set up a MongoDB connection in Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database, which is widely used with Node.js applications due to its flexibility and scalability.",
        "answer": "Steps to set up a MongoDB connection in Node.js:\n\n1. Install the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('Connected to MongoDB');\n}).catch(err => {\n  console.log('Error connecting to MongoDB:', err);\n});\n```\n\n3. Define a Mongoose model for data interaction:\n```javascript\nconst User = mongoose.model('User', new mongoose.Schema({\n  name: String,\n  email: String\n}));\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 682,
        "key_answer": "Steps to set up a MongoDB connection in Node.js:\n\n1. Install the `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydatabase', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => {\n  console.log('Connected to MongoDB');\n}).catch(err => {\n  console.log('Error connecting to MongoDB:', err);\n});\n```\n\n3. Define a Mongoose model for data interaction:\n```javascript\nconst User = mongoose.model('User', new mongoose.Schema({\n  name: String,\n  email: String\n}));\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to create a REST API using Express and Node.js?",
        "label": "express, nodejs, rest-api",
        "language": "en",
        "context": "A REST API allows communication between clients and servers using standard HTTP methods. Express.js simplifies the process of creating APIs in Node.js.",
        "answer": "Steps to create a REST API using Express and Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express application with API routes:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/users', (req, res) => {\n  res.json([{ name: 'John Doe' }, { name: 'Jane Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).json(newUser);\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\n3. Test your API using Postman or curl.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 683,
        "key_answer": "Steps to create a REST API using Express and Node.js:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create a basic Express application with API routes:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/users', (req, res) => {\n  res.json([{ name: 'John Doe' }, { name: 'Jane Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  const newUser = req.body;\n  res.status(201).json(newUser);\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}`);\n});\n```\n\n3. Test your API using Postman or curl.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to create a JWT authentication system in Express.js?",
        "label": "express, jwt, authentication",
        "language": "en",
        "context": "JSON Web Tokens (JWT) are widely used for securing REST APIs and implementing authentication in web applications.",
        "answer": "Steps to create a JWT authentication system in Express.js:\n\n1. Install the required packages:\n```bash\nnpm install express jsonwebtoken bcryptjs\n```\n\n2. Set up the JWT authentication logic:\n```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst app = express();\n\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = bcrypt.hashSync(password, 8);\n  users.push({ username, password: hashedPassword });\n  res.send('User registered');\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find(u => u.username === username);\n  if (!user || !bcrypt.compareSync(password, user.password)) {\n    return res.status(401).send('Invalid credentials');\n  }\n  const token = jwt.sign({ username: user.username }, 'secret', { expiresIn: '1h' });\n  res.json({ token });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 1140,
        "key_answer": "Steps to create a JWT authentication system in Express.js:\n\n1. Install the required packages:\n```bash\nnpm install express jsonwebtoken bcryptjs\n```\n\n2. Set up the JWT authentication logic:\n```javascript\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\nconst app = express();\n\napp.use(express.json());\n\nconst users = [];\n\napp.post('/register', (req, res) => {\n  const { username, password } = req.body;\n  const hashedPassword = bcrypt.hashSync(password, 8);\n  users.push({ username, password: hashedPassword });\n  res.send('User registered');\n});\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  const user = users.find(u => u.username === username);\n  if (!user || !bcrypt.compareSync(password, user.password)) {\n    return res.status(401).send('Invalid credentials');\n  }\n  const token = jwt.sign({ username: user.username }, 'secret', { expiresIn: '1h' });\n  res.json({ token });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to configure a proxy server in Node.js?",
        "label": "nodejs, proxy, server",
        "language": "en",
        "context": "A proxy server acts as an intermediary between a client and a destination server. It is commonly used for load balancing, caching, and security.",
        "answer": "Steps to configure a proxy server in Node.js:\n\n1. Install the `http-proxy` package:\n```bash\nnpm install http-proxy\n```\n\n2. Create a basic proxy server using the `http-proxy` module:\n```javascript\nconst http = require('http');\nconst httpProxy = require('http-proxy');\n\nconst proxy = httpProxy.createProxyServer({});\n\nconst server = http.createServer((req, res) => {\n  proxy.web(req, res, { target: 'http://localhost:3000' });\n});\n\nserver.listen(8000, () => {\n  console.log('Proxy server running on port 8000');\n});\n```\n\n3. The proxy server will forward incoming requests to `http://localhost:3000`.\n\n📚 Reference: https://www.npmjs.com/package/http-proxy",
        "start_char": 0,
        "end_char": 677,
        "key_answer": "Steps to configure a proxy server in Node.js:\n\n1. Install the `http-proxy` package:\n```bash\nnpm install http-proxy\n```\n\n2. Create a basic proxy server using the `http-proxy` module:\n```javascript\nconst http = require('http');\nconst httpProxy = require('http-proxy');\n\nconst proxy = httpProxy.createProxyServer({});\n\nconst server = http.createServer((req, res) => {\n  proxy.web(req, res, { target: 'http://localhost:3000' });\n});\n\nserver.listen(8000, () => {\n  console.log('Proxy server running on port 8000');\n});\n```\n\n3. The proxy server will forward incoming requests to `http://localhost:3000`.\n\n📚 Reference: https://www.npmjs.com/package/http-proxy"
    },
    {
        "question": "How to handle errors in Node.js with middleware?",
        "label": "nodejs, error-handling, middleware",
        "language": "en",
        "context": "In a Node.js application, proper error handling ensures that the application behaves as expected and can recover from unexpected issues.",
        "answer": "Steps to handle errors in Node.js using middleware:\n\n1. Create a custom error-handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Throw errors in your route handlers as needed:\n```javascript\napp.get('/error', (req, res, next) => {\n  next(new Error('Example error'));\n});\n```\n\n3. The error-handling middleware will catch the error and send a response with a 500 status code.\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html",
        "start_char": 0,
        "end_char": 564,
        "key_answer": "Steps to handle errors in Node.js using middleware:\n\n1. Create a custom error-handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. Throw errors in your route handlers as needed:\n```javascript\napp.get('/error', (req, res, next) => {\n  next(new Error('Example error'));\n});\n```\n\n3. The error-handling middleware will catch the error and send a response with a 500 status code.\n\n📚 Reference: https://expressjs.com/en/guide/error-handling.html"
    },
    {
        "question": "How to use Nodemailer for sending emails in Node.js?",
        "label": "nodejs, nodemailer, email",
        "language": "en",
        "context": "Nodemailer is a popular library for sending emails from Node.js applications, supporting various transport methods such as SMTP, AWS SES, etc.",
        "answer": "Steps to send emails using Nodemailer in Node.js:\n\n1. Install the Nodemailer package:\n```bash\nnpm install nodemailer\n```\n\n2. Set up the transport method and send an email:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'youremail@gmail.com',\n    pass: 'yourpassword'\n  }\n});\n\nconst mailOptions = {\n  from: 'youremail@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Hello from Node.js',\n  text: 'This is a test email from Node.js'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(error);\n  }\n  console.log('Email sent: ' + info.response);\n});\n```\n\n📚 Reference: https://nodemailer.com/",
        "start_char": 0,
        "end_char": 769,
        "key_answer": "Steps to send emails using Nodemailer in Node.js:\n\n1. Install the Nodemailer package:\n```bash\nnpm install nodemailer\n```\n\n2. Set up the transport method and send an email:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'youremail@gmail.com',\n    pass: 'yourpassword'\n  }\n});\n\nconst mailOptions = {\n  from: 'youremail@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Hello from Node.js',\n  text: 'This is a test email from Node.js'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    return console.log(error);\n  }\n  console.log('Email sent: ' + info.response);\n});\n```\n\n📚 Reference: https://nodemailer.com/"
    },
    {
        "question": "How to integrate a payment gateway in Node.js?",
        "label": "nodejs, payment-gateway, integration",
        "language": "en",
        "context": "Integrating a payment gateway into a Node.js application allows you to process online payments securely using services like Stripe, PayPal, or others.",
        "answer": "Steps to integrate a payment gateway (e.g., Stripe) in Node.js:\n\n1. Install the Stripe package:\n```bash\nnpm install stripe\n```\n\n2. Set up the Stripe API key in your application:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n```\n\n3. Create a payment route to handle payments:\n```javascript\napp.post('/pay', async (req, res) => {\n  const { amount, token } = req.body;\n  try {\n    const charge = await stripe.charges.create({\n      amount: amount * 100, // Amount in cents\n      currency: 'usd',\n      description: 'Payment for order',\n      source: token\n    });\n    res.json(charge);\n  } catch (err) {\n    res.status(500).send('Payment failed');\n  }\n});\n```\n\n4. Test payment flow using Stripe test cards.\n\n📚 Reference: https://stripe.com/docs/api",
        "start_char": 0,
        "end_char": 798,
        "key_answer": "Steps to integrate a payment gateway (e.g., Stripe) in Node.js:\n\n1. Install the Stripe package:\n```bash\nnpm install stripe\n```\n\n2. Set up the Stripe API key in your application:\n```javascript\nconst stripe = require('stripe')('your-secret-key');\n```\n\n3. Create a payment route to handle payments:\n```javascript\napp.post('/pay', async (req, res) => {\n  const { amount, token } = req.body;\n  try {\n    const charge = await stripe.charges.create({\n      amount: amount * 100, // Amount in cents\n      currency: 'usd',\n      description: 'Payment for order',\n      source: token\n    });\n    res.json(charge);\n  } catch (err) {\n    res.status(500).send('Payment failed');\n  }\n});\n```\n\n4. Test payment flow using Stripe test cards.\n\n📚 Reference: https://stripe.com/docs/api"
    },
    {
        "question": "How to create a real-time chat application using Node.js and Socket.io?",
        "label": "nodejs, socketio, chat-application",
        "language": "en",
        "context": "Socket.io enables real-time, bi-directional communication between web clients and servers, making it ideal for building chat applications.",
        "answer": "Steps to create a real-time chat application using Node.js and Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n\n2. Set up the server with Socket.io support:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. Create a client-side script to connect to the server and send/receive messages.\n\n📚 Reference: https://socket.io/docs/v4/",
        "start_char": 0,
        "end_char": 791,
        "key_answer": "Steps to create a real-time chat application using Node.js and Socket.io:\n\n1. Install Socket.io:\n```bash\nnpm install socket.io\n```\n\n2. Set up the server with Socket.io support:\n```javascript\nconst express = require('express');\nconst http = require('http');\nconst socketIo = require('socket.io');\n\nconst app = express();\nconst server = http.createServer(app);\nconst io = socketIo(server);\n\nio.on('connection', (socket) => {\n  console.log('a user connected');\n  socket.on('chat message', (msg) => {\n    io.emit('chat message', msg);\n  });\n});\n\nserver.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. Create a client-side script to connect to the server and send/receive messages.\n\n📚 Reference: https://socket.io/docs/v4/"
    },
    {
        "question": "How to set up logging in Node.js using Winston?",
        "label": "nodejs, logging, winston",
        "language": "en",
        "context": "Winston is a logging library for Node.js that supports multiple transports (e.g., file, console, remote server). It allows for flexible and advanced logging in applications.",
        "answer": "Steps to set up logging with Winston in Node.js:\n\n1. Install Winston package:\n```bash\nnpm install winston\n```\n\n2. Configure Winston logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n3. You can log to different outputs by adding more transports.\n\n📚 Reference: https://github.com/winstonjs/winston",
        "start_char": 0,
        "end_char": 591,
        "key_answer": "Steps to set up logging with Winston in Node.js:\n\n1. Install Winston package:\n```bash\nnpm install winston\n```\n\n2. Configure Winston logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n3. You can log to different outputs by adding more transports.\n\n📚 Reference: https://github.com/winstonjs/winston"
    },
    {
        "question": "How to implement a basic REST API in Node.js with Express?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "Express is a minimal web framework for Node.js that simplifies building REST APIs, providing routing, middleware, and other essential features.",
        "answer": "Steps to implement a basic REST API with Node.js and Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Set up a basic server and routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello, World!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. You can add more routes (e.g., POST, PUT, DELETE) for the REST API.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 555,
        "key_answer": "Steps to implement a basic REST API with Node.js and Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Set up a basic server and routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello, World!' });\n});\n\napp.listen(3000, () => {\n  console.log('Server running on http://localhost:3000');\n});\n```\n\n3. You can add more routes (e.g., POST, PUT, DELETE) for the REST API.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to authenticate users in Node.js using JWT?",
        "label": "nodejs, jwt, authentication",
        "language": "en",
        "context": "JSON Web Token (JWT) is a secure way to authenticate users in a Node.js application, often used for user login and authorization.",
        "answer": "Steps to authenticate users with JWT in Node.js:\n\n1. Install `jsonwebtoken` and `bcryptjs` for token generation and password hashing:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a JWT token after user login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Hash password before saving\nconst hashedPassword = bcrypt.hashSync('password123', 8);\n\n// Generate JWT token\nconst token = jwt.sign({ userId: user.id }, 'secretKey', { expiresIn: '1h' });\n```\n\n3. Verify JWT token on subsequent requests:\n```javascript\napp.get('/protected', (req, res) => {\n  const token = req.headers['authorization']?.split(' ')[1];\n  jwt.verify(token, 'secretKey', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    res.send('Protected data');\n  });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken",
        "start_char": 0,
        "end_char": 905,
        "key_answer": "Steps to authenticate users with JWT in Node.js:\n\n1. Install `jsonwebtoken` and `bcryptjs` for token generation and password hashing:\n```bash\nnpm install jsonwebtoken bcryptjs\n```\n\n2. Create a JWT token after user login:\n```javascript\nconst jwt = require('jsonwebtoken');\nconst bcrypt = require('bcryptjs');\n\n// Hash password before saving\nconst hashedPassword = bcrypt.hashSync('password123', 8);\n\n// Generate JWT token\nconst token = jwt.sign({ userId: user.id }, 'secretKey', { expiresIn: '1h' });\n```\n\n3. Verify JWT token on subsequent requests:\n```javascript\napp.get('/protected', (req, res) => {\n  const token = req.headers['authorization']?.split(' ')[1];\n  jwt.verify(token, 'secretKey', (err, decoded) => {\n    if (err) return res.status(401).send('Unauthorized');\n    res.send('Protected data');\n  });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/jsonwebtoken"
    },
    {
        "question": "How to set up a Node.js application with MongoDB using Mongoose?",
        "label": "nodejs, mongodb, mongoose",
        "language": "en",
        "context": "Mongoose is a popular ODM (Object Data Modeling) library for MongoDB and Node.js, providing a simple way to interact with MongoDB.",
        "answer": "Steps to set up a Node.js application with MongoDB using Mongoose:\n\n1. Install Mongoose and MongoDB driver:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a Mongoose schema and model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create, read, update, and delete data using Mongoose models.\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 668,
        "key_answer": "Steps to set up a Node.js application with MongoDB using Mongoose:\n\n1. Install Mongoose and MongoDB driver:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a Mongoose schema and model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  age: Number,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Create, read, update, and delete data using Mongoose models.\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to set up session management in Node.js using Express-session?",
        "label": "nodejs, express-session, session-management",
        "language": "en",
        "context": "Session management is crucial in web applications for keeping track of user information across multiple requests, typically for authentication.",
        "answer": "Steps to set up session management with Express-session:\n\n1. Install Express-session package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n```\n\n3. Use the session to store user-specific data:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'username';\n  res.send('Logged in');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 601,
        "key_answer": "Steps to set up session management with Express-session:\n\n1. Install Express-session package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: false }\n}));\n```\n\n3. Use the session to store user-specific data:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'username';\n  res.send('Logged in');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to send emails in Node.js using Nodemailer?",
        "label": "nodejs, nodemailer, email",
        "language": "en",
        "context": "Nodemailer is a module for Node.js that makes it easy to send emails from your application, with support for different email services.",
        "answer": "Steps to send emails in Node.js using Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n\n2. Set up Nodemailer transporter:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient-email@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email.'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n\n📚 Reference: https://nodemailer.com/",
        "start_char": 0,
        "end_char": 789,
        "key_answer": "Steps to send emails in Node.js using Nodemailer:\n\n1. Install Nodemailer:\n```bash\nnpm install nodemailer\n```\n\n2. Set up Nodemailer transporter:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Send an email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient-email@example.com',\n  subject: 'Test Email',\n  text: 'Hello, this is a test email.'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n\n📚 Reference: https://nodemailer.com/"
    },
    {
        "question": "How to set up a RESTful API in Node.js with Express?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "A RESTful API allows communication between different systems over HTTP, and Express makes it easy to create RESTful routes and handle requests.",
        "answer": "Steps to set up a RESTful API with Node.js and Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create RESTful routes for GET, POST, PUT, DELETE requests:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/items', (req, res) => {\n  res.json({ items: ['item1', 'item2'] });\n});\n\napp.post('/api/items', (req, res) => {\n  // Add a new item\n  res.json({ message: 'Item added' });\n});\n\napp.put('/api/items/:id', (req, res) => {\n  // Update an item\n  res.json({ message: 'Item updated' });\n});\n\napp.delete('/api/items/:id', (req, res) => {\n  // Delete an item\n  res.json({ message: 'Item deleted' });\n});\n\napp.listen(3000, () => {\n  console.log('API running on http://localhost:3000');\n});\n```\n\n3. Use Express's built-in methods to handle different HTTP methods.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 912,
        "key_answer": "Steps to set up a RESTful API with Node.js and Express:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Create RESTful routes for GET, POST, PUT, DELETE requests:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/items', (req, res) => {\n  res.json({ items: ['item1', 'item2'] });\n});\n\napp.post('/api/items', (req, res) => {\n  // Add a new item\n  res.json({ message: 'Item added' });\n});\n\napp.put('/api/items/:id', (req, res) => {\n  // Update an item\n  res.json({ message: 'Item updated' });\n});\n\napp.delete('/api/items/:id', (req, res) => {\n  // Delete an item\n  res.json({ message: 'Item deleted' });\n});\n\napp.listen(3000, () => {\n  console.log('API running on http://localhost:3000');\n});\n```\n\n3. Use Express's built-in methods to handle different HTTP methods.\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to create a simple authentication system with Node.js and Passport?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport is an authentication middleware for Node.js that can be used to manage user login, registration, and authorization.",
        "answer": "Steps to create an authentication system with Passport in Node.js:\n\n1. Install Passport and Passport-local strategy:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport middleware:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify username and password\n  done(null, { id: 1, username: 'user' });\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n3. Handle login and registration with Passport:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 778,
        "key_answer": "Steps to create an authentication system with Passport in Node.js:\n\n1. Install Passport and Passport-local strategy:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport middleware:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify username and password\n  done(null, { id: 1, username: 'user' });\n}));\n\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n3. Handle login and registration with Passport:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\n```\n\n📚 Reference: http://www.passportjs.org/docs/"
    },
    {
        "question": "How to implement file uploads in Node.js using Multer?",
        "label": "nodejs, multer, file-upload",
        "language": "en",
        "context": "Multer is a middleware for handling file uploads in Node.js, providing easy file handling and integration with Express.",
        "answer": "Steps to implement file uploads with Multer in Node.js:\n\n1. Install `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up Multer middleware to handle file uploads:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Use Multer middleware in a route to handle the file upload:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 733,
        "key_answer": "Steps to implement file uploads with Multer in Node.js:\n\n1. Install `multer` package:\n```bash\nnpm install multer\n```\n\n2. Set up Multer middleware to handle file uploads:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Use Multer middleware in a route to handle the file upload:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to use MongoDB aggregation framework in Node.js?",
        "label": "nodejs, mongodb, aggregation",
        "language": "en",
        "context": "MongoDB's aggregation framework allows you to perform complex data transformations and calculations directly within the database.",
        "answer": "Steps to use MongoDB aggregation framework in Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB and define a schema:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb');\n\nconst productSchema = new mongoose.Schema({\n  name: String,\n  price: Number,\n  category: String\n});\n\nconst Product = mongoose.model('Product', productSchema);\n```\n\n3. Use aggregation pipeline to perform complex queries:\n```javascript\nProduct.aggregate([\n  { $match: { category: 'Electronics' } },\n  { $group: { _id: '$category', totalPrice: { $sum: '$price' } } },\n  { $sort: { totalPrice: -1 } }\n]).exec((err, result) => {\n  console.log(result);\n});\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/aggregation/",
        "start_char": 0,
        "end_char": 826,
        "key_answer": "Steps to use MongoDB aggregation framework in Node.js:\n\n1. Install `mongoose` package:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB and define a schema:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb');\n\nconst productSchema = new mongoose.Schema({\n  name: String,\n  price: Number,\n  category: String\n});\n\nconst Product = mongoose.model('Product', productSchema);\n```\n\n3. Use aggregation pipeline to perform complex queries:\n```javascript\nProduct.aggregate([\n  { $match: { category: 'Electronics' } },\n  { $group: { _id: '$category', totalPrice: { $sum: '$price' } } },\n  { $sort: { totalPrice: -1 } }\n]).exec((err, result) => {\n  console.log(result);\n});\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/aggregation/"
    },
    {
        "question": "How to integrate Google OAuth in a Node.js application?",
        "label": "nodejs, google-oauth, authentication",
        "language": "en",
        "context": "Google OAuth allows users to authenticate into your Node.js application using their Google account, simplifying login and improving security.",
        "answer": "Steps to integrate Google OAuth in Node.js:\n\n1. Install required packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth strategy in Passport:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'YOUR_GOOGLE_CLIENT_ID',\n  clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```\n\n3. Set up routes for authentication and callback:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n📚 Reference: http://www.passportjs.org/packages/passport-google-oauth20/",
        "start_char": 0,
        "end_char": 976,
        "key_answer": "Steps to integrate Google OAuth in Node.js:\n\n1. Install required packages:\n```bash\nnpm install passport passport-google-oauth20 express-session\n```\n\n2. Set up Google OAuth strategy in Passport:\n```javascript\nconst passport = require('passport');\nconst GoogleStrategy = require('passport-google-oauth20').Strategy;\n\npassport.use(new GoogleStrategy({\n  clientID: 'YOUR_GOOGLE_CLIENT_ID',\n  clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',\n  callbackURL: 'http://localhost:3000/auth/google/callback'\n}, (accessToken, refreshToken, profile, done) => {\n  return done(null, profile);\n}));\n```\n\n3. Set up routes for authentication and callback:\n```javascript\napp.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));\napp.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n📚 Reference: http://www.passportjs.org/packages/passport-google-oauth20/"
    },
    {
        "question": "How to configure file upload limits in Express.js?",
        "label": "nodejs, express, file-upload",
        "language": "en",
        "context": "Limiting the size of file uploads helps to prevent denial of service attacks and ensures the application can handle large files properly.",
        "answer": "Steps to configure file upload limits in Express.js:\n\n1. Install `multer` for file uploads:\n```bash\nnpm install multer\n```\n\n2. Set upload size limit with Multer middleware:\n```javascript\nconst multer = require('multer');\n\nconst upload = multer({\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n\n3. Handle errors in case the file size exceeds the limit:\n```javascript\napp.use((err, req, res, next) => {\n  if (err instanceof multer.MulterError && err.code === 'LIMIT_FILE_SIZE') {\n    res.status(400).send('File size too large');\n  } else {\n    next(err);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 768,
        "key_answer": "Steps to configure file upload limits in Express.js:\n\n1. Install `multer` for file uploads:\n```bash\nnpm install multer\n```\n\n2. Set upload size limit with Multer middleware:\n```javascript\nconst multer = require('multer');\n\nconst upload = multer({\n  limits: { fileSize: 10 * 1024 * 1024 } // 10MB limit\n});\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully');\n});\n```\n\n3. Handle errors in case the file size exceeds the limit:\n```javascript\napp.use((err, req, res, next) => {\n  if (err instanceof multer.MulterError && err.code === 'LIMIT_FILE_SIZE') {\n    res.status(400).send('File size too large');\n  } else {\n    next(err);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to deploy a Node.js application on AWS EC2?",
        "label": "nodejs, aws, deployment",
        "language": "en",
        "context": "Deploying a Node.js application on AWS EC2 allows you to host your application in the cloud, providing scalability and reliability.",
        "answer": "Steps to deploy a Node.js application on AWS EC2:\n\n1. Launch an EC2 instance on AWS and connect to it using SSH.\n\n2. Install Node.js and NPM on your EC2 instance:\n```bash\nsudo apt update\nsudo apt install nodejs\nsudo apt install npm\n```\n\n3. Upload your application code to the EC2 instance using `scp` or any other method.\n\n4. Install dependencies for your application:\n```bash\nnpm install\n```\n\n5. Start your Node.js application:\n```bash\nnode app.js\n```\n\n6. Optionally, use PM2 to manage your application as a background service:\n```bash\nnpm install pm2 -g\npm2 start app.js\n```\n\n📚 Reference: https://aws.amazon.com/getting-started/hands-on/deploy-nodejs-web-app/",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to deploy a Node.js application on AWS EC2:\n\n1. Launch an EC2 instance on AWS and connect to it using SSH.\n\n2. Install Node.js and NPM on your EC2 instance:\n```bash\nsudo apt update\nsudo apt install nodejs\nsudo apt install npm\n```\n\n3. Upload your application code to the EC2 instance using `scp` or any other method.\n\n4. Install dependencies for your application:\n```bash\nnpm install\n```\n\n5. Start your Node.js application:\n```bash\nnode app.js\n```\n\n6. Optionally, use PM2 to manage your application as a background service:\n```bash\nnpm install pm2 -g\npm2 start app.js\n```\n\n📚 Reference: https://aws.amazon.com/getting-started/hands-on/deploy-nodejs-web-app/"
    },
    {
        "question": "How to implement JWT refresh token mechanism in Node.js?",
        "label": "nodejs, jwt, refresh-token",
        "language": "en",
        "context": "A JWT refresh token mechanism is used to keep users logged in for longer periods by allowing them to refresh their authentication tokens without requiring re-login.",
        "answer": "Steps to implement JWT refresh token mechanism in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a function to generate a refresh token:\n```javascript\nfunction generateRefreshToken(user) {\n  return jwt.sign({ id: user.id }, 'your_refresh_token_secret', { expiresIn: '7d' });\n}\n```\n\n3. Create a route to issue a refresh token when the old token expires:\n```javascript\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = req.body.refreshToken;\n  if (!refreshToken) return res.status(403).send('Access denied');\n  jwt.verify(refreshToken, 'your_refresh_token_secret', (err, decoded) => {\n    if (err) return res.status(403).send('Invalid refresh token');\n    const newAccessToken = generateAccessToken(decoded.user);\n    res.json({ accessToken: newAccessToken });\n  });\n});\n```\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 904,
        "key_answer": "Steps to implement JWT refresh token mechanism in Node.js:\n\n1. Install `jsonwebtoken` package:\n```bash\nnpm install jsonwebtoken\n```\n\n2. Create a function to generate a refresh token:\n```javascript\nfunction generateRefreshToken(user) {\n  return jwt.sign({ id: user.id }, 'your_refresh_token_secret', { expiresIn: '7d' });\n}\n```\n\n3. Create a route to issue a refresh token when the old token expires:\n```javascript\napp.post('/refresh-token', (req, res) => {\n  const refreshToken = req.body.refreshToken;\n  if (!refreshToken) return res.status(403).send('Access denied');\n  jwt.verify(refreshToken, 'your_refresh_token_secret', (err, decoded) => {\n    if (err) return res.status(403).send('Invalid refresh token');\n    const newAccessToken = generateAccessToken(decoded.user);\n    res.json({ accessToken: newAccessToken });\n  });\n});\n```\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to use Redis as a caching layer in a Node.js application?",
        "label": "nodejs, redis, caching",
        "language": "en",
        "context": "Redis is an in-memory data structure store that is commonly used for caching to improve performance in web applications.",
        "answer": "Steps to use Redis as a caching layer in Node.js:\n\n1. Install `redis` package:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Use Redis to cache data:\n```javascript\nclient.set('key', 'value', 'EX', 60); // Set key-value pair with expiration time\n\nclient.get('key', (err, reply) => {\n  if (err) throw err;\n  console.log(reply); // Output: value\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 618,
        "key_answer": "Steps to use Redis as a caching layer in Node.js:\n\n1. Install `redis` package:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client in your Node.js app:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Connected to Redis');\n});\n```\n\n3. Use Redis to cache data:\n```javascript\nclient.set('key', 'value', 'EX', 60); // Set key-value pair with expiration time\n\nclient.get('key', (err, reply) => {\n  if (err) throw err;\n  console.log(reply); // Output: value\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "How to implement a simple REST API in Node.js using Express?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "A REST API allows different systems to communicate over HTTP using standard HTTP methods such as GET, POST, PUT, DELETE.",
        "answer": "Steps to implement a simple REST API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n\n2. Set up an Express server and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello World' });\n});\n\napp.post('/api', (req, res) => {\n  res.json({ message: 'Data received' });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Use tools like Postman to test your API.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 624,
        "key_answer": "Steps to implement a simple REST API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n\n2. Set up an Express server and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api', (req, res) => {\n  res.json({ message: 'Hello World' });\n});\n\napp.post('/api', (req, res) => {\n  res.json({ message: 'Data received' });\n});\n\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n3. Use tools like Postman to test your API.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to implement email sending in Node.js using Nodemailer?",
        "label": "nodejs, nodemailer, email",
        "language": "en",
        "context": "Nodemailer is a popular Node.js module that allows you to send emails from your application using various transport methods like SMTP.",
        "answer": "Steps to implement email sending in Node.js using Nodemailer:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n\n2. Set up a Nodemailer transporter:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Send an email using the `sendMail` method:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello World'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/nodemailer",
        "start_char": 0,
        "end_char": 835,
        "key_answer": "Steps to implement email sending in Node.js using Nodemailer:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n\n2. Set up a Nodemailer transporter:\n```javascript\nconst nodemailer = require('nodemailer');\n\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Send an email using the `sendMail` method:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello World'\n};\n\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log(error);\n  } else {\n    console.log('Email sent: ' + info.response);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/nodemailer"
    },
    {
        "question": "How to integrate Stripe for payments in Node.js?",
        "label": "nodejs, stripe, payments",
        "language": "en",
        "context": "Stripe is a payment gateway that allows businesses to accept payments online, and it can be integrated into a Node.js application to handle online transactions.",
        "answer": "Steps to integrate Stripe in Node.js:\n\n1. Install `stripe` package:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your Node.js app:\n```javascript\nconst stripe = require('stripe')('your_stripe_secret_key');\n```\n\n3. Create a route to handle payments:\n```javascript\napp.post('/create-payment-intent', async (req, res) => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000, // Amount in cents\n    currency: 'usd',\n  });\n  res.send({ clientSecret: paymentIntent.client_secret });\n});\n```\n\n4. On the frontend, use Stripe.js to handle the payment:\n```javascript\nconst stripe = Stripe('your_publishable_key');\nstripe.confirmCardPayment(clientSecret, {\n  payment_method: {\n    card: cardElement,\n    billing_details: { name: 'Name' }\n  }\n}).then(function(result) {\n  if (result.error) {\n    console.log(result.error.message);\n  } else {\n    console.log('Payment successful!');\n  }\n});\n```\n\n📚 Reference: https://stripe.com/docs/payments/accept-a-payment",
        "start_char": 0,
        "end_char": 1018,
        "key_answer": "Steps to integrate Stripe in Node.js:\n\n1. Install `stripe` package:\n```bash\nnpm install stripe\n```\n\n2. Set up Stripe in your Node.js app:\n```javascript\nconst stripe = require('stripe')('your_stripe_secret_key');\n```\n\n3. Create a route to handle payments:\n```javascript\napp.post('/create-payment-intent', async (req, res) => {\n  const paymentIntent = await stripe.paymentIntents.create({\n    amount: 1000, // Amount in cents\n    currency: 'usd',\n  });\n  res.send({ clientSecret: paymentIntent.client_secret });\n});\n```\n\n4. On the frontend, use Stripe.js to handle the payment:\n```javascript\nconst stripe = Stripe('your_publishable_key');\nstripe.confirmCardPayment(clientSecret, {\n  payment_method: {\n    card: cardElement,\n    billing_details: { name: 'Name' }\n  }\n}).then(function(result) {\n  if (result.error) {\n    console.log(result.error.message);\n  } else {\n    console.log('Payment successful!');\n  }\n});\n```\n\n📚 Reference: https://stripe.com/docs/payments/accept-a-payment"
    },
    {
        "question": "How to schedule tasks in Node.js using node-cron?",
        "label": "nodejs, cron, task-scheduling",
        "language": "en",
        "context": "node-cron is a simple and powerful task scheduler for Node.js applications that allows you to run jobs at specified intervals.",
        "answer": "Steps to schedule tasks in Node.js using node-cron:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n\n2. Set up a scheduled task in your Node.js app:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Task is running every minute');\n});\n```\n\n3. You can also specify more complex schedules, such as running tasks daily or at specific times:\n```javascript\ncron.schedule('0 0 * * *', () => {\n  console.log('Task runs every day at midnight');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/node-cron",
        "start_char": 0,
        "end_char": 590,
        "key_answer": "Steps to schedule tasks in Node.js using node-cron:\n\n1. Install `node-cron` package:\n```bash\nnpm install node-cron\n```\n\n2. Set up a scheduled task in your Node.js app:\n```javascript\nconst cron = require('node-cron');\n\ncron.schedule('* * * * *', () => {\n  console.log('Task is running every minute');\n});\n```\n\n3. You can also specify more complex schedules, such as running tasks daily or at specific times:\n```javascript\ncron.schedule('0 0 * * *', () => {\n  console.log('Task runs every day at midnight');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/node-cron"
    },
    {
        "question": "How to set up authentication using Passport.js in a Node.js app?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport.js is an authentication middleware for Node.js that supports various authentication strategies such as local login, OAuth, and more.",
        "answer": "Steps to set up authentication using Passport.js in Node.js:\n\n1. Install `passport`, `passport-local`, `express-session` packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport.js middleware in your app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Authenticate user\n  if (username === 'admin' && password === 'password') {\n    return done(null, { id: 1, username: 'admin' });\n  } else {\n    return done(null, false, { message: 'Invalid credentials' });\n  }\n}));\n\napp.use(express.session({ secret: 'secret', resave: false, saveUninitialized: false }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n3. Create login and logout routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\napp.get('/logout', (req, res) => {\n  req.logout((err) => {\n    res.redirect('/');\n  });\n});\n```\n\n📚 Reference: http://www.passportjs.org/docs/",
        "start_char": 0,
        "end_char": 1122,
        "key_answer": "Steps to set up authentication using Passport.js in Node.js:\n\n1. Install `passport`, `passport-local`, `express-session` packages:\n```bash\nnpm install passport passport-local express-session\n```\n\n2. Set up Passport.js middleware in your app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Authenticate user\n  if (username === 'admin' && password === 'password') {\n    return done(null, { id: 1, username: 'admin' });\n  } else {\n    return done(null, false, { message: 'Invalid credentials' });\n  }\n}));\n\napp.use(express.session({ secret: 'secret', resave: false, saveUninitialized: false }));\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n3. Create login and logout routes:\n```javascript\napp.post('/login', passport.authenticate('local', { successRedirect: '/', failureRedirect: '/login' }));\napp.get('/logout', (req, res) => {\n  req.logout((err) => {\n    res.redirect('/');\n  });\n});\n```\n\n📚 Reference: http://www.passportjs.org/docs/"
    },
    {
        "question": "How to create a REST API with MongoDB and Mongoose in Node.js?",
        "label": "nodejs, mongoose, mongodb, rest-api",
        "language": "en",
        "context": "MongoDB and Mongoose are commonly used for handling data in a REST API built with Node.js. Mongoose provides a simple interface for interacting with MongoDB.",
        "answer": "Steps to create a REST API with MongoDB and Mongoose in Node.js:\n\n1. Install `express` and `mongoose`:\n```bash\nnpm install express mongoose\n```\n\n2. Set up your MongoDB connection with Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema for your data:\n```javascript\nconst itemSchema = new mongoose.Schema({ name: String });\nconst Item = mongoose.model('Item', itemSchema);\n```\n\n4. Create API routes to interact with your data:\n```javascript\napp.post('/items', (req, res) => {\n  const item = new Item({ name: req.body.name });\n  item.save().then(() => res.status(201).send(item));\n});\n\napp.get('/items', (req, res) => {\n  Item.find().then(items => res.status(200).send(items));\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 892,
        "key_answer": "Steps to create a REST API with MongoDB and Mongoose in Node.js:\n\n1. Install `express` and `mongoose`:\n```bash\nnpm install express mongoose\n```\n\n2. Set up your MongoDB connection with Mongoose:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema for your data:\n```javascript\nconst itemSchema = new mongoose.Schema({ name: String });\nconst Item = mongoose.model('Item', itemSchema);\n```\n\n4. Create API routes to interact with your data:\n```javascript\napp.post('/items', (req, res) => {\n  const item = new Item({ name: req.body.name });\n  item.save().then(() => res.status(201).send(item));\n});\n\napp.get('/items', (req, res) => {\n  Item.find().then(items => res.status(200).send(items));\n});\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to create a custom middleware in Express.js?",
        "label": "express, nodejs, middleware",
        "language": "en",
        "context": "Middleware in Express.js functions as a way to add custom logic to the request-response cycle, allowing for flexible application behavior.",
        "answer": "Steps to create custom middleware in Express.js:\n\n1. Define your custom middleware function:\n```javascript\nfunction myMiddleware(req, res, next) {\n  console.log('Custom middleware triggered');\n  next();\n}\n```\n\n2. Use the middleware in your Express app:\n```javascript\napp.use(myMiddleware);\n```\n\n3. You can also use the middleware for specific routes:\n```javascript\napp.get('/route', myMiddleware, (req, res) => {\n  res.send('Middleware applied to this route');\n});\n```\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html",
        "start_char": 0,
        "end_char": 557,
        "key_answer": "Steps to create custom middleware in Express.js:\n\n1. Define your custom middleware function:\n```javascript\nfunction myMiddleware(req, res, next) {\n  console.log('Custom middleware triggered');\n  next();\n}\n```\n\n2. Use the middleware in your Express app:\n```javascript\napp.use(myMiddleware);\n```\n\n3. You can also use the middleware for specific routes:\n```javascript\napp.get('/route', myMiddleware, (req, res) => {\n  res.send('Middleware applied to this route');\n});\n```\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html"
    },
    {
        "question": "How to implement WebSockets in a Node.js app?",
        "label": "nodejs, websocket, real-time",
        "language": "en",
        "context": "WebSockets enable real-time, full-duplex communication between the server and clients, making them useful for chat applications, live updates, and more.",
        "answer": "Steps to implement WebSockets in a Node.js app:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Set up WebSocket server in your app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, client!');\n});\n```\n\n3. On the client-side, use the WebSocket API:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\nsocket.onmessage = (event) => { console.log(event.data); };\nsocket.send('Hello, server!');\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 672,
        "key_answer": "Steps to implement WebSockets in a Node.js app:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Set up WebSocket server in your app:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.on('message', (message) => {\n    console.log('received: %s', message);\n  });\n  ws.send('Hello, client!');\n});\n```\n\n3. On the client-side, use the WebSocket API:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\nsocket.onmessage = (event) => { console.log(event.data); };\nsocket.send('Hello, server!');\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to handle CORS issues in a Node.js application?",
        "label": "nodejs, cors, security",
        "language": "en",
        "context": "CORS (Cross-Origin Resource Sharing) issues occur when your frontend tries to make a request to a server on a different domain, and the server isn't configured to allow it.",
        "answer": "Steps to handle CORS issues in Node.js:\n\n1. Install `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use the CORS middleware in your app:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n\n3. You can also specify allowed origins:\n```javascript\napp.use(cors({ origin: 'https://your-frontend.com' }));\n```\n\n4. For more control, configure CORS for specific routes:\n```javascript\napp.get('/api', cors(), (req, res) => {\n  res.json({ msg: 'CORS is working!' });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 556,
        "key_answer": "Steps to handle CORS issues in Node.js:\n\n1. Install `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use the CORS middleware in your app:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n\n3. You can also specify allowed origins:\n```javascript\napp.use(cors({ origin: 'https://your-frontend.com' }));\n```\n\n4. For more control, configure CORS for specific routes:\n```javascript\napp.get('/api', cors(), (req, res) => {\n  res.json({ msg: 'CORS is working!' });\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to implement rate limiting in a Node.js application?",
        "label": "nodejs, rate-limiting, security",
        "language": "en",
        "context": "Rate limiting helps prevent abuse of an API by limiting the number of requests a client can make in a given time frame.",
        "answer": "Steps to implement rate limiting in Node.js:\n\n1. Install `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Set up rate limiting middleware in your app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later'\n});\n\napp.use(limiter);\n```\n\n3. You can also apply rate limiting to specific routes:\n```javascript\napp.use('/api/', limiter);\n```\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit",
        "start_char": 0,
        "end_char": 642,
        "key_answer": "Steps to implement rate limiting in Node.js:\n\n1. Install `express-rate-limit` package:\n```bash\nnpm install express-rate-limit\n```\n\n2. Set up rate limiting middleware in your app:\n```javascript\nconst rateLimit = require('express-rate-limit');\n\nconst limiter = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 100, // Limit each IP to 100 requests per windowMs\n  message: 'Too many requests, please try again later'\n});\n\napp.use(limiter);\n```\n\n3. You can also apply rate limiting to specific routes:\n```javascript\napp.use('/api/', limiter);\n```\n\n📚 Reference: https://www.npmjs.com/package/express-rate-limit"
    },
    {
        "question": "How to validate incoming data in a Node.js application?",
        "label": "nodejs, validation, security",
        "language": "en",
        "context": "Data validation ensures that the input received from users or other sources is clean and safe to use in your application.",
        "answer": "Steps to validate incoming data in Node.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use validation middleware in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('User registered successfully');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-validator",
        "start_char": 0,
        "end_char": 631,
        "key_answer": "Steps to validate incoming data in Node.js:\n\n1. Install `express-validator` package:\n```bash\nnpm install express-validator\n```\n\n2. Use validation middleware in your routes:\n```javascript\nconst { body, validationResult } = require('express-validator');\n\napp.post('/register', [\n  body('email').isEmail(),\n  body('password').isLength({ min: 6 })\n], (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  res.send('User registered successfully');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-validator"
    },
    {
        "question": "How to handle file uploads with Multer and store files in AWS S3 in Node.js?",
        "label": "nodejs, multer, aws, file-upload",
        "language": "en",
        "context": "Using Multer to handle file uploads and AWS S3 to store the uploaded files provides a reliable solution for managing files in the cloud.",
        "answer": "Steps to handle file uploads with Multer and store in AWS S3 in Node.js:\n\n1. Install `multer`, `aws-sdk`, and `multer-s3` packages:\n```bash\nnpm install multer aws-sdk multer-s3\n```\n\n2. Set up AWS S3 configuration:\n```javascript\nconst AWS = require('aws-sdk');\nAWS.config.update({\n  accessKeyId: 'your-access-key',\n  secretAccessKey: 'your-secret-key',\n  region: 'your-region'\n});\n\nconst s3 = new AWS.S3();\n```\n\n3. Set up Multer with S3 storage:\n```javascript\nconst multer = require('multer');\nconst multerS3 = require('multer-s3');\n\nconst upload = multer({\n  storage: multerS3({\n    s3: s3,\n    bucket: 'your-bucket-name',\n    acl: 'public-read',\n    key: function (req, file, cb) {\n      cb(null, Date.now().toString() + '-' + file.originalname);\n    }\n  })\n});\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully to S3');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer-s3",
        "start_char": 0,
        "end_char": 972,
        "key_answer": "Steps to handle file uploads with Multer and store in AWS S3 in Node.js:\n\n1. Install `multer`, `aws-sdk`, and `multer-s3` packages:\n```bash\nnpm install multer aws-sdk multer-s3\n```\n\n2. Set up AWS S3 configuration:\n```javascript\nconst AWS = require('aws-sdk');\nAWS.config.update({\n  accessKeyId: 'your-access-key',\n  secretAccessKey: 'your-secret-key',\n  region: 'your-region'\n});\n\nconst s3 = new AWS.S3();\n```\n\n3. Set up Multer with S3 storage:\n```javascript\nconst multer = require('multer');\nconst multerS3 = require('multer-s3');\n\nconst upload = multer({\n  storage: multerS3({\n    s3: s3,\n    bucket: 'your-bucket-name',\n    acl: 'public-read',\n    key: function (req, file, cb) {\n      cb(null, Date.now().toString() + '-' + file.originalname);\n    }\n  })\n});\n\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully to S3');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/multer-s3"
    },
    {
        "question": "How to create a custom error handler in Express.js?",
        "label": "express, nodejs, error-handling",
        "language": "en",
        "context": "Custom error handling allows you to define your own logic for handling errors in Express.js applications, improving debugging and user experience.",
        "answer": "Steps to create a custom error handler in Express.js:\n\n1. Define your error-handling middleware:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n\n2. Use the error handler middleware in your app:\n```javascript\napp.use(errorHandler);\n```\n\n3. You can also create specific error handlers for different error types, such as validation errors:\n```javascript\napp.use((err, req, res, next) => {\n  if (err.name === 'ValidationError') {\n    res.status(400).send('Validation failed');\n  } else {\n    next(err);\n  }\n});\n```\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html#custom-error-handling",
        "start_char": 0,
        "end_char": 720,
        "key_answer": "Steps to create a custom error handler in Express.js:\n\n1. Define your error-handling middleware:\n```javascript\nfunction errorHandler(err, req, res, next) {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n}\n```\n\n2. Use the error handler middleware in your app:\n```javascript\napp.use(errorHandler);\n```\n\n3. You can also create specific error handlers for different error types, such as validation errors:\n```javascript\napp.use((err, req, res, next) => {\n  if (err.name === 'ValidationError') {\n    res.status(400).send('Validation failed');\n  } else {\n    next(err);\n  }\n});\n```\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html#custom-error-handling"
    },
    {
        "question": "How to implement OAuth2 authentication in a Node.js app?",
        "label": "nodejs, oauth2, authentication",
        "language": "en",
        "context": "OAuth2 is a protocol for authorization, often used to give third-party applications access to a user's data without exposing their credentials.",
        "answer": "Steps to implement OAuth2 authentication in Node.js:\n\n1. Install `passport`, `passport-oauth2`, and `express-session` packages:\n```bash\nnpm install passport passport-oauth2 express-session\n```\n\n2. Set up the OAuth2 strategy in Passport.js:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2').Strategy;\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth/authorize',\n  tokenURL: 'https://example.com/oauth/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret'\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOrCreate({ oauthId: profile.id }, (err, user) => {\n    return done(err, user);\n  });\n}));\n```\n\n3. Use Passport.js for authentication:\n```javascript\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.get('/login', passport.authenticate('oauth2')); // Initiates the OAuth2 flow\n```\n\n📚 Reference: https://www.npmjs.com/package/passport-oauth2",
        "start_char": 0,
        "end_char": 1008,
        "key_answer": "Steps to implement OAuth2 authentication in Node.js:\n\n1. Install `passport`, `passport-oauth2`, and `express-session` packages:\n```bash\nnpm install passport passport-oauth2 express-session\n```\n\n2. Set up the OAuth2 strategy in Passport.js:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2').Strategy;\n\npassport.use(new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth/authorize',\n  tokenURL: 'https://example.com/oauth/token',\n  clientID: 'your-client-id',\n  clientSecret: 'your-client-secret'\n}, (accessToken, refreshToken, profile, done) => {\n  User.findOrCreate({ oauthId: profile.id }, (err, user) => {\n    return done(err, user);\n  });\n}));\n```\n\n3. Use Passport.js for authentication:\n```javascript\napp.use(passport.initialize());\napp.use(passport.session());\n\napp.get('/login', passport.authenticate('oauth2')); // Initiates the OAuth2 flow\n```\n\n📚 Reference: https://www.npmjs.com/package/passport-oauth2"
    },
    {
        "question": "How to implement file compression in Node.js?",
        "label": "nodejs, file-compression, utility",
        "language": "en",
        "context": "File compression reduces the file size, making it easier to store or transfer, and is often used for optimizing performance in web applications.",
        "answer": "Steps to implement file compression in Node.js:\n\n1. Install `zlib` (built-in in Node.js) and `fs` modules:\n```javascript\nconst zlib = require('zlib');\nconst fs = require('fs');\n```\n\n2. Compress a file:\n```javascript\nconst input = fs.createReadStream('input.txt');\nconst output = fs.createWriteStream('input.txt.gz');\nconst compress = zlib.createGzip();\ninput.pipe(compress).pipe(output);\n```\n\n3. Decompress a file:\n```javascript\nconst decompress = zlib.createGunzip();\nconst input = fs.createReadStream('input.txt.gz');\nconst output = fs.createWriteStream('output.txt');\ninput.pipe(decompress).pipe(output);\n```\n\n📚 Reference: https://nodejs.org/api/zlib.html",
        "start_char": 0,
        "end_char": 682,
        "key_answer": "Steps to implement file compression in Node.js:\n\n1. Install `zlib` (built-in in Node.js) and `fs` modules:\n```javascript\nconst zlib = require('zlib');\nconst fs = require('fs');\n```\n\n2. Compress a file:\n```javascript\nconst input = fs.createReadStream('input.txt');\nconst output = fs.createWriteStream('input.txt.gz');\nconst compress = zlib.createGzip();\ninput.pipe(compress).pipe(output);\n```\n\n3. Decompress a file:\n```javascript\nconst decompress = zlib.createGunzip();\nconst input = fs.createReadStream('input.txt.gz');\nconst output = fs.createWriteStream('output.txt');\ninput.pipe(decompress).pipe(output);\n```\n\n📚 Reference: https://nodejs.org/api/zlib.html"
    },
    {
        "question": "How to handle session management in Express.js?",
        "label": "express, session, security",
        "language": "en",
        "context": "Session management helps track user state and data across multiple requests, commonly used for login states, shopping carts, etc.",
        "answer": "Steps to handle session management in Express.js:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware in your app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n\n3. Use the session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'admin';\n  res.send('User logged in');\n});\n\napp.get('/profile', (req, res) => {\n  res.send(`Welcome, ${req.session.user}`);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to handle session management in Express.js:\n\n1. Install `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware in your app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your-secret-key',\n  resave: false,\n  saveUninitialized: true,\n  cookie: { secure: true }\n}));\n```\n\n3. Use the session data in your routes:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'admin';\n  res.send('User logged in');\n});\n\napp.get('/profile', (req, res) => {\n  res.send(`Welcome, ${req.session.user}`);\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to configure CORS (Cross-Origin Resource Sharing) in a Node.js app?",
        "label": "nodejs, cors, security",
        "language": "en",
        "context": "CORS is a mechanism that allows web applications to make requests to servers in different domains, improving security by controlling which domains are allowed to access resources.",
        "answer": "Steps to configure CORS in a Node.js app:\n\n1. Install `cors` package:\n```bash\nnpm install cors\n```\n\n2. Set up CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\n\nconst options = {\n  origin: 'http://example.com',\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n};\n\napp.use(cors(options));\n```\n\n3. You can also allow all origins (not recommended for production):\n```javascript\napp.use(cors());\n```\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 531,
        "key_answer": "Steps to configure CORS in a Node.js app:\n\n1. Install `cors` package:\n```bash\nnpm install cors\n```\n\n2. Set up CORS middleware in your Express app:\n```javascript\nconst cors = require('cors');\n\nconst options = {\n  origin: 'http://example.com',\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n};\n\napp.use(cors(options));\n```\n\n3. You can also allow all origins (not recommended for production):\n```javascript\napp.use(cors());\n```\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to create a RESTful API in Node.js using Express?",
        "label": "nodejs, express, rest-api",
        "language": "en",
        "context": "A RESTful API is an architectural style for designing networked applications that use stateless communication and standard HTTP methods.",
        "answer": "Steps to create a RESTful API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n\n2. Set up your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n```\n\n3. Define your API routes:\n```javascript\napp.get('/users', (req, res) => {\n  res.json([{ name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  const user = req.body;\n  res.status(201).json(user);\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 678,
        "key_answer": "Steps to create a RESTful API in Node.js using Express:\n\n1. Install `express` package:\n```bash\nnpm install express\n```\n\n2. Set up your Express app:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n```\n\n3. Define your API routes:\n```javascript\napp.get('/users', (req, res) => {\n  res.json([{ name: 'John Doe' }]);\n});\n\napp.post('/users', (req, res) => {\n  const user = req.body;\n  res.status(201).json(user);\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('Server running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to set up a logger in a Node.js application?",
        "label": "nodejs, logging, utility",
        "language": "en",
        "context": "Logging helps you track the behavior of your application, making it easier to debug and monitor its performance.",
        "answer": "Steps to set up a logger in Node.js:\n\n1. Install `winston` logging library:\n```bash\nnpm install winston\n```\n\n2. Configure the logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Use the logger in your application:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://www.npmjs.com/package/winston",
        "start_char": 0,
        "end_char": 580,
        "key_answer": "Steps to set up a logger in Node.js:\n\n1. Install `winston` logging library:\n```bash\nnpm install winston\n```\n\n2. Configure the logger:\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Use the logger in your application:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://www.npmjs.com/package/winston"
    },
    {
        "question": "How to test a Node.js API using Mocha and Chai?",
        "label": "nodejs, testing, mocha, chai",
        "language": "en",
        "context": "Mocha and Chai are testing frameworks that allow you to write unit and integration tests for your Node.js applications.",
        "answer": "Steps to test a Node.js API using Mocha and Chai:\n\n1. Install Mocha, Chai, and Chai HTTP:\n```bash\nnpm install mocha chai chai-http --save-dev\n```\n\n2. Write your test cases:\n```javascript\nconst chai = require('chai');\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst expect = chai.expect;\n\ndescribe('GET /users', () => {\n  it('should return a list of users', (done) => {\n    chai.request('http://localhost:3000')\n      .get('/users')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.an('array');\n        done();\n      });\n  });\n});\n```\n\n3. Run the tests:\n```bash\nnpx mocha\n```\n\n📚 Reference: https://www.chaijs.com/",
        "start_char": 0,
        "end_char": 712,
        "key_answer": "Steps to test a Node.js API using Mocha and Chai:\n\n1. Install Mocha, Chai, and Chai HTTP:\n```bash\nnpm install mocha chai chai-http --save-dev\n```\n\n2. Write your test cases:\n```javascript\nconst chai = require('chai');\nconst chaiHttp = require('chai-http');\nchai.use(chaiHttp);\nconst expect = chai.expect;\n\ndescribe('GET /users', () => {\n  it('should return a list of users', (done) => {\n    chai.request('http://localhost:3000')\n      .get('/users')\n      .end((err, res) => {\n        expect(res.status).to.equal(200);\n        expect(res.body).to.be.an('array');\n        done();\n      });\n  });\n});\n```\n\n3. Run the tests:\n```bash\nnpx mocha\n```\n\n📚 Reference: https://www.chaijs.com/"
    },
    {
        "question": "How to handle errors in Node.js using middleware?",
        "label": "nodejs, error-handling, middleware",
        "language": "en",
        "context": "Error handling middleware in Node.js helps manage errors in a centralized way and provides a standard response to clients.",
        "answer": "Steps to handle errors in Node.js using middleware:\n\n1. Define an error handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. In your routes, pass errors to the middleware using `next()`:\n```javascript\napp.get('/', (req, res, next) => {\n  const error = new Error('Something went wrong');\n  next(error);\n});\n```\n\n3. The error handler will capture and respond to the error.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html",
        "start_char": 0,
        "end_char": 563,
        "key_answer": "Steps to handle errors in Node.js using middleware:\n\n1. Define an error handling middleware:\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).send('Something went wrong!');\n});\n```\n\n2. In your routes, pass errors to the middleware using `next()`:\n```javascript\napp.get('/', (req, res, next) => {\n  const error = new Error('Something went wrong');\n  next(error);\n});\n```\n\n3. The error handler will capture and respond to the error.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html"
    },
    {
        "question": "How to implement user authentication in Node.js using Passport.js?",
        "label": "nodejs, passport, authentication",
        "language": "en",
        "context": "Passport.js is a flexible and modular authentication middleware for Node.js, making it easy to implement user authentication in your app.",
        "answer": "Steps to implement user authentication in Node.js using Passport.js:\n\n1. Install Passport.js and its local strategy:\n```bash\nnpm install passport passport-local\n```\n\n2. Set up Passport.js in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify username and password\n  // Call done() with the user object or false if authentication fails\n}));\n```\n\n3. Initialize Passport and use it as middleware:\n```javascript\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Create login and registration routes to handle user authentication.\n\n📚 Reference: http://www.passportjs.org/",
        "start_char": 0,
        "end_char": 764,
        "key_answer": "Steps to implement user authentication in Node.js using Passport.js:\n\n1. Install Passport.js and its local strategy:\n```bash\nnpm install passport passport-local\n```\n\n2. Set up Passport.js in your Express app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Verify username and password\n  // Call done() with the user object or false if authentication fails\n}));\n```\n\n3. Initialize Passport and use it as middleware:\n```javascript\napp.use(passport.initialize());\napp.use(passport.session());\n```\n\n4. Create login and registration routes to handle user authentication.\n\n📚 Reference: http://www.passportjs.org/"
    },
    {
        "question": "How to implement file upload in a Node.js application?",
        "label": "nodejs, file-upload, multer",
        "language": "en",
        "context": "File uploads are essential for applications that need to handle media, documents, or other large files from users.",
        "answer": "Steps to implement file upload in Node.js:\n\n1. Install `multer` package for handling multipart form-data:\n```bash\nnpm install multer\n```\n\n2. Set up file upload middleware with Multer:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Use the middleware in your route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n4. Make sure to create an 'uploads' directory for storing uploaded files.\n\n📚 Reference: https://www.npmjs.com/package/multer",
        "start_char": 0,
        "end_char": 822,
        "key_answer": "Steps to implement file upload in Node.js:\n\n1. Install `multer` package for handling multipart form-data:\n```bash\nnpm install multer\n```\n\n2. Set up file upload middleware with Multer:\n```javascript\nconst multer = require('multer');\n\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, 'uploads/');\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + '-' + file.originalname);\n  }\n});\n\nconst upload = multer({ storage: storage });\n```\n\n3. Use the middleware in your route to handle file uploads:\n```javascript\napp.post('/upload', upload.single('file'), (req, res) => {\n  res.send('File uploaded successfully!');\n});\n```\n\n4. Make sure to create an 'uploads' directory for storing uploaded files.\n\n📚 Reference: https://www.npmjs.com/package/multer"
    },
    {
        "question": "How to create a CRUD API using Node.js and MongoDB?",
        "label": "nodejs, mongodb, crud",
        "language": "en",
        "context": "A CRUD (Create, Read, Update, Delete) API allows you to interact with a database to perform basic operations.",
        "answer": "Steps to create a CRUD API using Node.js and MongoDB:\n\n1. Install necessary packages:\n```bash\nnpm install express mongoose\n```\n\n2. Set up the Express app and MongoDB connection:\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb');\nconst app = express();\napp.use(express.json());\n```\n\n3. Define a model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Implement CRUD routes:\n```javascript\n// Create\napp.post('/users', (req, res) => {\n  const user = new User(req.body);\n  user.save().then(() => res.status(201).send(user));\n});\n\n// Read\napp.get('/users', (req, res) => {\n  User.find().then(users => res.json(users));\n});\n\n// Update\napp.put('/users/:id', (req, res) => {\n  User.findByIdAndUpdate(req.params.id, req.body, { new: true }).then(user => res.json(user));\n});\n\n// Delete\napp.delete('/users/:id', (req, res) => {\n  User.findByIdAndDelete(req.params.id).then(() => res.status(204).send());\n});\n```\n\n📚 Reference: https://expressjs.com/",
        "start_char": 0,
        "end_char": 1179,
        "key_answer": "Steps to create a CRUD API using Node.js and MongoDB:\n\n1. Install necessary packages:\n```bash\nnpm install express mongoose\n```\n\n2. Set up the Express app and MongoDB connection:\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb');\nconst app = express();\napp.use(express.json());\n```\n\n3. Define a model:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Implement CRUD routes:\n```javascript\n// Create\napp.post('/users', (req, res) => {\n  const user = new User(req.body);\n  user.save().then(() => res.status(201).send(user));\n});\n\n// Read\napp.get('/users', (req, res) => {\n  User.find().then(users => res.json(users));\n});\n\n// Update\napp.put('/users/:id', (req, res) => {\n  User.findByIdAndUpdate(req.params.id, req.body, { new: true }).then(user => res.json(user));\n});\n\n// Delete\napp.delete('/users/:id', (req, res) => {\n  User.findByIdAndDelete(req.params.id).then(() => res.status(204).send());\n});\n```\n\n📚 Reference: https://expressjs.com/"
    },
    {
        "question": "How to optimize performance in a Node.js application?",
        "label": "nodejs, performance, optimization",
        "language": "en",
        "context": "Optimizing the performance of a Node.js application can reduce response times and resource usage, improving scalability and user experience.",
        "answer": "Steps to optimize performance in a Node.js application:\n\n1. Use asynchronous I/O operations to prevent blocking the event loop.\n2. Optimize database queries and use caching mechanisms like Redis for frequently accessed data.\n3. Minimize the use of synchronous functions in critical paths.\n4. Enable compression to reduce the size of HTTP responses.\n5. Use a reverse proxy like Nginx to handle static content.\n6. Monitor and profile performance with tools like `clinic.js` or `node-inspect`.\n\n📚 Reference: https://nodejs.org/en/docs/guides/",
        "start_char": 0,
        "end_char": 548,
        "key_answer": "Steps to optimize performance in a Node.js application:\n\n1. Use asynchronous I/O operations to prevent blocking the event loop.\n2. Optimize database queries and use caching mechanisms like Redis for frequently accessed data.\n3. Minimize the use of synchronous functions in critical paths.\n4. Enable compression to reduce the size of HTTP responses.\n5. Use a reverse proxy like Nginx to handle static content.\n6. Monitor and profile performance with tools like `clinic.js` or `node-inspect`.\n\n📚 Reference: https://nodejs.org/en/docs/guides/"
    },
    {
        "question": "How to handle environment variables in a Node.js application?",
        "label": "nodejs, environment-variables, configuration",
        "language": "en",
        "context": "Environment variables help configure a Node.js application for different environments like development, testing, and production.",
        "answer": "Steps to handle environment variables in Node.js:\n\n1. Install `dotenv` package to load environment variables from a `.env` file:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=password\n```\n\n3. Load the environment variables at the beginning of your app:\n```javascript\nrequire('dotenv').config();\n```\n\n4. Access environment variables using `process.env`:\n```javascript\nconsole.log(process.env.DB_HOST); // 'localhost'\n```\n\n📚 Reference: https://www.npmjs.com/package/dotenv",
        "start_char": 0,
        "end_char": 579,
        "key_answer": "Steps to handle environment variables in Node.js:\n\n1. Install `dotenv` package to load environment variables from a `.env` file:\n```bash\nnpm install dotenv\n```\n\n2. Create a `.env` file in the root of your project:\n```env\nDB_HOST=localhost\nDB_USER=root\nDB_PASS=password\n```\n\n3. Load the environment variables at the beginning of your app:\n```javascript\nrequire('dotenv').config();\n```\n\n4. Access environment variables using `process.env`:\n```javascript\nconsole.log(process.env.DB_HOST); // 'localhost'\n```\n\n📚 Reference: https://www.npmjs.com/package/dotenv"
    },
    {
        "question": "How to manage sessions in a Node.js application?",
        "label": "nodejs, session-management, express",
        "language": "en",
        "context": "Session management allows you to track and manage user states in your application.",
        "answer": "Steps to manage sessions in Node.js:\n\n1. Install the `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware in your Express app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Use the session object to store user data across requests:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'username';\n  res.send('Logged in');\n});\n```\n\n4. Destroy the session when the user logs out:\n```javascript\napp.get('/logout', (req, res) => {\n  req.session.destroy();\n  res.send('Logged out');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session",
        "start_char": 0,
        "end_char": 755,
        "key_answer": "Steps to manage sessions in Node.js:\n\n1. Install the `express-session` package:\n```bash\nnpm install express-session\n```\n\n2. Set up session middleware in your Express app:\n```javascript\nconst session = require('express-session');\n\napp.use(session({\n  secret: 'your_secret_key',\n  resave: false,\n  saveUninitialized: true\n}));\n```\n\n3. Use the session object to store user data across requests:\n```javascript\napp.get('/login', (req, res) => {\n  req.session.user = 'username';\n  res.send('Logged in');\n});\n```\n\n4. Destroy the session when the user logs out:\n```javascript\napp.get('/logout', (req, res) => {\n  req.session.destroy();\n  res.send('Logged out');\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/express-session"
    },
    {
        "question": "How to work with MongoDB in Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database that stores data in JSON-like documents. It's easy to work with in Node.js using the Mongoose library.",
        "answer": "Steps to work with MongoDB in Node.js:\n\n1. Install Mongoose to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Perform CRUD operations on your database:\n```javascript\nUser.create({ name: 'John Doe', email: 'john@example.com' });\nUser.find().then(users => console.log(users));\n```\n\n📚 Reference: https://mongoosejs.com/",
        "start_char": 0,
        "end_char": 734,
        "key_answer": "Steps to work with MongoDB in Node.js:\n\n1. Install Mongoose to interact with MongoDB:\n```bash\nnpm install mongoose\n```\n\n2. Connect to MongoDB database:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('mongodb://localhost:27017/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema for your data:\n```javascript\nconst userSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\n\nconst User = mongoose.model('User', userSchema);\n```\n\n4. Perform CRUD operations on your database:\n```javascript\nUser.create({ name: 'John Doe', email: 'john@example.com' });\nUser.find().then(users => console.log(users));\n```\n\n📚 Reference: https://mongoosejs.com/"
    },
    {
        "question": "How to create an Express middleware?",
        "label": "nodejs, express, middleware",
        "language": "en",
        "context": "Middleware functions in Express are functions that have access to the request, response, and the next middleware function in the application’s request-response cycle.",
        "answer": "Steps to create an Express middleware:\n\n1. Define a middleware function:\n```javascript\nconst myMiddleware = (req, res, next) => {\n  console.log('Request received');\n  next();\n};\n```\n\n2. Use the middleware in your Express app:\n```javascript\napp.use(myMiddleware);\n```\n\n3. You can also apply middleware to specific routes:\n```javascript\napp.get('/specific', myMiddleware, (req, res) => {\n  res.send('This is a specific route');\n});\n```\n\n4. Middleware can be used for tasks like logging, authentication, or modifying the request/response.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html",
        "start_char": 0,
        "end_char": 626,
        "key_answer": "Steps to create an Express middleware:\n\n1. Define a middleware function:\n```javascript\nconst myMiddleware = (req, res, next) => {\n  console.log('Request received');\n  next();\n};\n```\n\n2. Use the middleware in your Express app:\n```javascript\napp.use(myMiddleware);\n```\n\n3. You can also apply middleware to specific routes:\n```javascript\napp.get('/specific', myMiddleware, (req, res) => {\n  res.send('This is a specific route');\n});\n```\n\n4. Middleware can be used for tasks like logging, authentication, or modifying the request/response.\n\n📚 Reference: https://expressjs.com/en/guide/using-middleware.html"
    },
    {
        "question": "How to implement authentication in a Node.js API?",
        "label": "nodejs, authentication, api",
        "language": "en",
        "context": "Authentication is essential to secure your API and restrict access to authenticated users.",
        "answer": "Steps to implement authentication in a Node.js API:\n\n1. Install `passport` and `passport-local` for local authentication:\n```bash\nnpm install passport passport-local\n```\n\n2. Configure Passport in your app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Validate username and password\n}));\n\napp.use(passport.initialize());\n```\n\n3. Implement login and signup routes using Passport.\n4. Secure routes by checking if the user is authenticated using `passport.authenticate('local')`.\n\n📚 Reference: https://www.passportjs.org/",
        "start_char": 0,
        "end_char": 673,
        "key_answer": "Steps to implement authentication in a Node.js API:\n\n1. Install `passport` and `passport-local` for local authentication:\n```bash\nnpm install passport passport-local\n```\n\n2. Configure Passport in your app:\n```javascript\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\n\npassport.use(new LocalStrategy((username, password, done) => {\n  // Validate username and password\n}));\n\napp.use(passport.initialize());\n```\n\n3. Implement login and signup routes using Passport.\n4. Secure routes by checking if the user is authenticated using `passport.authenticate('local')`.\n\n📚 Reference: https://www.passportjs.org/"
    },
    {
        "question": "How to set up a MongoDB Atlas cluster and connect it to a Node.js application?",
        "label": "nodejs, mongodb, atlas",
        "language": "en",
        "context": "MongoDB Atlas is a cloud-based database service that allows you to host and manage MongoDB databases easily.",
        "answer": "Steps to set up MongoDB Atlas and connect it to Node.js:\n\n1. Create an account and set up a cluster on MongoDB Atlas at https://cloud.mongodb.com.\n2. In the Atlas dashboard, create a new database and a new user with appropriate permissions.\n3. Get the connection string from the Atlas dashboard:\n```mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority\n```\n\n4. Install Mongoose in your Node.js app:\n```bash\nnpm install mongoose\n```\n\n5. Connect to the MongoDB Atlas cluster:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('<connection-string>', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n📚 Reference: https://www.mongodb.com/cloud/atlas",
        "start_char": 0,
        "end_char": 734,
        "key_answer": "Steps to set up MongoDB Atlas and connect it to Node.js:\n\n1. Create an account and set up a cluster on MongoDB Atlas at https://cloud.mongodb.com.\n2. In the Atlas dashboard, create a new database and a new user with appropriate permissions.\n3. Get the connection string from the Atlas dashboard:\n```mongodb+srv://<username>:<password>@cluster0.mongodb.net/<dbname>?retryWrites=true&w=majority\n```\n\n4. Install Mongoose in your Node.js app:\n```bash\nnpm install mongoose\n```\n\n5. Connect to the MongoDB Atlas cluster:\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('<connection-string>', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n📚 Reference: https://www.mongodb.com/cloud/atlas"
    },
    {
        "question": "How to create a RESTful API with Node.js and Express?",
        "label": "nodejs, express, api",
        "language": "en",
        "context": "RESTful APIs are widely used for building scalable, flexible web services. Express makes it easy to set up RESTful endpoints.",
        "answer": "Steps to create a RESTful API with Node.js and Express:\n\n1. Initialize a new Node.js project and install Express:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/users', (req, res) => {\n  res.json([{ name: 'John Doe' }, { name: 'Jane Doe' }]);\n});\n\napp.post('/api/users', (req, res) => {\n  res.status(201).json({ name: 'New User' });\n});\n\napp.listen(3000, () => console.log('API is running on http://localhost:3000'));```\n\n3. Test your API endpoints using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 692,
        "key_answer": "Steps to create a RESTful API with Node.js and Express:\n\n1. Initialize a new Node.js project and install Express:\n```bash\nnpm init -y\nnpm install express\n```\n\n2. Create an Express app and define routes:\n```javascript\nconst express = require('express');\nconst app = express();\n\napp.get('/api/users', (req, res) => {\n  res.json([{ name: 'John Doe' }, { name: 'Jane Doe' }]);\n});\n\napp.post('/api/users', (req, res) => {\n  res.status(201).json({ name: 'New User' });\n});\n\napp.listen(3000, () => console.log('API is running on http://localhost:3000'));```\n\n3. Test your API endpoints using Postman or cURL.\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to handle errors in Node.js applications?",
        "label": "nodejs, error-handling",
        "language": "en",
        "context": "Error handling is essential for building robust Node.js applications and improving their reliability.",
        "answer": "Steps to handle errors in Node.js:\n\n1. Use try-catch blocks for synchronous code:\n```javascript\ntry {\n  // Some code\n} catch (err) {\n  console.error('Error occurred:', err);\n}\n```\n\n2. Handle asynchronous errors with `callback` pattern or Promises:\n```javascript\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error occurred:', err);\n  } else {\n    console.log(data);\n  }\n});\n```\n\n3. Handle global unhandled errors by listening to the `uncaughtException` event:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Unhandled error:', err);\n});\n```\n\n📚 Reference: https://nodejs.org/api/process.html#process_event_uncaughtexception",
        "start_char": 0,
        "end_char": 712,
        "key_answer": "Steps to handle errors in Node.js:\n\n1. Use try-catch blocks for synchronous code:\n```javascript\ntry {\n  // Some code\n} catch (err) {\n  console.error('Error occurred:', err);\n}\n```\n\n2. Handle asynchronous errors with `callback` pattern or Promises:\n```javascript\nfs.readFile('file.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error('Error occurred:', err);\n  } else {\n    console.log(data);\n  }\n});\n```\n\n3. Handle global unhandled errors by listening to the `uncaughtException` event:\n```javascript\nprocess.on('uncaughtException', (err) => {\n  console.error('Unhandled error:', err);\n});\n```\n\n📚 Reference: https://nodejs.org/api/process.html#process_event_uncaughtexception"
    },
    {
        "question": "How to create a file upload feature in React?",
        "label": "react, file-upload, frontend",
        "language": "en",
        "context": "Allowing users to upload files through a React frontend is common for features like image uploads or document submission.",
        "answer": "Steps to create a file upload feature in React:\n\n1. Create a file input element in your component:\n```jsx\n<input type='file' onChange={handleFileChange} />\n```\n\n2. Handle file input change and store the file:\n```jsx\nconst handleFileChange = (e) => {\n  const file = e.target.files[0];\n  setFile(file);\n};\n```\n\n3. Send the file to the server using a POST request:\n```jsx\nconst handleSubmit = async () => {\n  const formData = new FormData();\n  formData.append('file', file);\n  await fetch('/upload', { method: 'POST', body: formData });\n};\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 614,
        "key_answer": "Steps to create a file upload feature in React:\n\n1. Create a file input element in your component:\n```jsx\n<input type='file' onChange={handleFileChange} />\n```\n\n2. Handle file input change and store the file:\n```jsx\nconst handleFileChange = (e) => {\n  const file = e.target.files[0];\n  setFile(file);\n};\n```\n\n3. Send the file to the server using a POST request:\n```jsx\nconst handleSubmit = async () => {\n  const formData = new FormData();\n  formData.append('file', file);\n  await fetch('/upload', { method: 'POST', body: formData });\n};\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to set up a WebSocket connection in a Node.js application?",
        "label": "nodejs, websocket, real-time",
        "language": "en",
        "context": "WebSockets allow you to establish a persistent connection between the client and server for real-time communication.",
        "answer": "Steps to set up a WebSocket connection in Node.js:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.send('Hello, client!');\n  ws.on('message', (message) => {\n    console.log(`Received: ${message}`);\n  });\n});\n```\n\n3. Connect to the WebSocket server from the client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\nsocket.onopen = () => {\n  socket.send('Hello, server!');\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws",
        "start_char": 0,
        "end_char": 640,
        "key_answer": "Steps to set up a WebSocket connection in Node.js:\n\n1. Install `ws` package:\n```bash\nnpm install ws\n```\n\n2. Create a WebSocket server:\n```javascript\nconst WebSocket = require('ws');\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', (ws) => {\n  ws.send('Hello, client!');\n  ws.on('message', (message) => {\n    console.log(`Received: ${message}`);\n  });\n});\n```\n\n3. Connect to the WebSocket server from the client:\n```javascript\nconst socket = new WebSocket('ws://localhost:8080');\nsocket.onopen = () => {\n  socket.send('Hello, server!');\n};\n```\n\n📚 Reference: https://www.npmjs.com/package/ws"
    },
    {
        "question": "How to use React Context for global state management?",
        "label": "react, context, state-management",
        "language": "en",
        "context": "React Context allows you to pass data through the component tree without manually passing props at every level.",
        "answer": "Steps to use React Context for global state management:\n\n1. Create a context with `React.createContext()`:\n```javascript\nconst AppContext = React.createContext();\n```\n\n2. Create a provider component that holds the global state:\n```javascript\nconst AppProvider = ({ children }) => {\n  const [state, setState] = useState({ user: 'John' });\n  return (\n    <AppContext.Provider value={{ state, setState }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n```\n\n3. Use the context in any child component with `useContext()`:\n```javascript\nconst { state } = useContext(AppContext);\n```\n\n📚 Reference: https://reactjs.org/docs/context.html",
        "start_char": 0,
        "end_char": 658,
        "key_answer": "Steps to use React Context for global state management:\n\n1. Create a context with `React.createContext()`:\n```javascript\nconst AppContext = React.createContext();\n```\n\n2. Create a provider component that holds the global state:\n```javascript\nconst AppProvider = ({ children }) => {\n  const [state, setState] = useState({ user: 'John' });\n  return (\n    <AppContext.Provider value={{ state, setState }}>\n      {children}\n    </AppContext.Provider>\n  );\n};\n```\n\n3. Use the context in any child component with `useContext()`:\n```javascript\nconst { state } = useContext(AppContext);\n```\n\n📚 Reference: https://reactjs.org/docs/context.html"
    },
    {
        "question": "How to implement role-based access control in Express?",
        "label": "express, access-control, roles",
        "language": "en",
        "context": "Role-based access control (RBAC) helps manage who can access specific parts of an application based on their role.",
        "answer": "Steps to implement RBAC in Express:\n\n1. Define roles and permissions:\n```javascript\nconst roles = ['admin', 'user'];\nconst permissions = {\n  admin: ['read', 'write', 'delete'],\n  user: ['read']\n};\n```\n\n2. Create a middleware to check the user's role and permissions:\n```javascript\nconst checkPermission = (role, permission) => (req, res, next) => {\n  if (!permissions[role].includes(permission)) {\n    return res.status(403).send('Forbidden');\n  }\n  next();\n};\n```\n\n3. Use the middleware in routes:\n```javascript\napp.post('/admin', checkPermission('admin', 'write'), (req, res) => {\n  res.send('Admin route');\n});\n```\n\n📚 Reference: https://en.wikipedia.org/wiki/Role-based_access_control",
        "start_char": 0,
        "end_char": 715,
        "key_answer": "Steps to implement RBAC in Express:\n\n1. Define roles and permissions:\n```javascript\nconst roles = ['admin', 'user'];\nconst permissions = {\n  admin: ['read', 'write', 'delete'],\n  user: ['read']\n};\n```\n\n2. Create a middleware to check the user's role and permissions:\n```javascript\nconst checkPermission = (role, permission) => (req, res, next) => {\n  if (!permissions[role].includes(permission)) {\n    return res.status(403).send('Forbidden');\n  }\n  next();\n};\n```\n\n3. Use the middleware in routes:\n```javascript\napp.post('/admin', checkPermission('admin', 'write'), (req, res) => {\n  res.send('Admin route');\n});\n```\n\n📚 Reference: https://en.wikipedia.org/wiki/Role-based_access_control"
    },
    {
        "question": "How to create a RESTful API with Express?",
        "label": "express, api, rest",
        "language": "en",
        "context": "A RESTful API follows the principles of Representational State Transfer and allows communication between client and server.",
        "answer": "Steps to create a RESTful API with Express:\n\n1. Install Express package:\n```bash\nnpm install express\n```\n\n2. Create an Express application:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n\n3. Define RESTful routes (GET, POST, PUT, DELETE):\n```javascript\napp.get('/items', (req, res) => {\n  res.json(items);\n});\n\napp.post('/items', (req, res) => {\n  const newItem = req.body;\n  items.push(newItem);\n  res.status(201).json(newItem);\n});\n\napp.put('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === req.params.id);\n  item.name = req.body.name;\n  res.json(item);\n});\n\napp.delete('/items/:id', (req, res) => {\n  const index = items.findIndex(i => i.id === req.params.id);\n  items.splice(index, 1);\n  res.status(204).send();\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('API running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html",
        "start_char": 0,
        "end_char": 1022,
        "key_answer": "Steps to create a RESTful API with Express:\n\n1. Install Express package:\n```bash\nnpm install express\n```\n\n2. Create an Express application:\n```javascript\nconst express = require('express');\nconst app = express();\napp.use(express.json());\n```\n\n3. Define RESTful routes (GET, POST, PUT, DELETE):\n```javascript\napp.get('/items', (req, res) => {\n  res.json(items);\n});\n\napp.post('/items', (req, res) => {\n  const newItem = req.body;\n  items.push(newItem);\n  res.status(201).json(newItem);\n});\n\napp.put('/items/:id', (req, res) => {\n  const item = items.find(i => i.id === req.params.id);\n  item.name = req.body.name;\n  res.json(item);\n});\n\napp.delete('/items/:id', (req, res) => {\n  const index = items.findIndex(i => i.id === req.params.id);\n  items.splice(index, 1);\n  res.status(204).send();\n});\n```\n\n4. Start the server:\n```javascript\napp.listen(3000, () => {\n  console.log('API running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/basic-routing.html"
    },
    {
        "question": "How to use React Router for navigation in a React app?",
        "label": "react, router, navigation",
        "language": "en",
        "context": "React Router allows for dynamic routing and enables navigation between different views or pages in a React app.",
        "answer": "Steps to use React Router for navigation in a React app:\n\n1. Install `react-router-dom` package:\n```bash\nnpm install react-router-dom\n```\n\n2. Define routes in your app:\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Use `Link` or `NavLink` to navigate between routes:\n```jsx\n<Link to='/home'>Home</Link>\n<NavLink to='/about'>About</NavLink>\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 647,
        "key_answer": "Steps to use React Router for navigation in a React app:\n\n1. Install `react-router-dom` package:\n```bash\nnpm install react-router-dom\n```\n\n2. Define routes in your app:\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Use `Link` or `NavLink` to navigate between routes:\n```jsx\n<Link to='/home'>Home</Link>\n<NavLink to='/about'>About</NavLink>\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to set up a basic Express server?",
        "label": "express, server, nodejs",
        "language": "en",
        "context": "Express is a minimal and flexible Node.js web application framework that simplifies the creation of robust APIs and servers.",
        "answer": "Steps to set up a basic Express server:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Import Express and create an app instance:\n```javascript\nconst express = require('express');\nconst app = express();\n```\n\n3. Set up a route to handle requests:\n```javascript\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n```\n\n4. Start the server on a specific port:\n```javascript\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 561,
        "key_answer": "Steps to set up a basic Express server:\n\n1. Install Express:\n```bash\nnpm install express\n```\n\n2. Import Express and create an app instance:\n```javascript\nconst express = require('express');\nconst app = express();\n```\n\n3. Set up a route to handle requests:\n```javascript\napp.get('/', (req, res) => {\n  res.send('Hello World');\n});\n```\n\n4. Start the server on a specific port:\n```javascript\napp.listen(3000, () => {\n  console.log('Server is running on port 3000');\n});\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to integrate a MongoDB database with a Node.js application?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database, and Node.js can easily interact with it using the `mongoose` library to perform database operations.",
        "answer": "Steps to integrate MongoDB with Node.js:\n\n1. Install MongoDB and Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to the MongoDB database using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema and model:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Perform CRUD operations (Create, Read, Update, Delete):\n```javascript\nconst user = new User({ name: 'Alice', email: 'alice@example.com' });\nawait user.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 733,
        "key_answer": "Steps to integrate MongoDB with Node.js:\n\n1. Install MongoDB and Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to the MongoDB database using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema and model:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Perform CRUD operations (Create, Read, Update, Delete):\n```javascript\nconst user = new User({ name: 'Alice', email: 'alice@example.com' });\nawait user.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to deploy a React app to GitHub Pages?",
        "label": "react, deployment, github-pages",
        "language": "en",
        "context": "GitHub Pages is a simple way to deploy your static React application to the web.",
        "answer": "Steps to deploy a React app to GitHub Pages:\n\n1. Install `gh-pages` package:\n```bash\nnpm install gh-pages --save-dev\n```\n\n2. Add a `homepage` field in your `package.json`:\n```json\n\"homepage\": \"https://username.github.io/repository-name\"\n```\n\n3. Modify the `scripts` in `package.json` for deployment:\n```json\n\"scripts\": {\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n}\n```\n\n4. Deploy the app:\n```bash\nnpm run deploy\n```\n\n📚 Reference: https://create-react-app.dev/docs/deployment/#github-pages",
        "start_char": 0,
        "end_char": 549,
        "key_answer": "Steps to deploy a React app to GitHub Pages:\n\n1. Install `gh-pages` package:\n```bash\nnpm install gh-pages --save-dev\n```\n\n2. Add a `homepage` field in your `package.json`:\n```json\n\"homepage\": \"https://username.github.io/repository-name\"\n```\n\n3. Modify the `scripts` in `package.json` for deployment:\n```json\n\"scripts\": {\n  \"predeploy\": \"npm run build\",\n  \"deploy\": \"gh-pages -d build\"\n}\n```\n\n4. Deploy the app:\n```bash\nnpm run deploy\n```\n\n📚 Reference: https://create-react-app.dev/docs/deployment/#github-pages"
    },
    {
        "question": "How to send an email from a Node.js application?",
        "label": "nodejs, email, nodemailer",
        "language": "en",
        "context": "Sending emails from a Node.js application is often required for notifications, confirmations, etc.",
        "answer": "Steps to send an email in Node.js using `nodemailer`:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n\n2. Create a transporter with SMTP settings:\n```javascript\nconst nodemailer = require('nodemailer');\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Define email options and send email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello from Node.js'\n};\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log('Error:', error);\n  } else {\n    console.log('Email sent:', info.response);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/nodemailer",
        "start_char": 0,
        "end_char": 840,
        "key_answer": "Steps to send an email in Node.js using `nodemailer`:\n\n1. Install `nodemailer` package:\n```bash\nnpm install nodemailer\n```\n\n2. Create a transporter with SMTP settings:\n```javascript\nconst nodemailer = require('nodemailer');\nconst transporter = nodemailer.createTransport({\n  service: 'gmail',\n  auth: {\n    user: 'your-email@gmail.com',\n    pass: 'your-email-password'\n  }\n});\n```\n\n3. Define email options and send email:\n```javascript\nconst mailOptions = {\n  from: 'your-email@gmail.com',\n  to: 'recipient@example.com',\n  subject: 'Test Email',\n  text: 'Hello from Node.js'\n};\ntransporter.sendMail(mailOptions, (error, info) => {\n  if (error) {\n    console.log('Error:', error);\n  } else {\n    console.log('Email sent:', info.response);\n  }\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/nodemailer"
    },
    {
        "question": "How to handle form submissions in React?",
        "label": "react, forms, submission",
        "language": "en",
        "context": "Handling form submissions is crucial for capturing user input and processing it in React applications.",
        "answer": "Steps to handle form submissions in React:\n\n1. Create a form element and use state to track input values:\n```jsx\nconst [inputValue, setInputValue] = useState('');\n\nconst handleChange = (e) => {\n  setInputValue(e.target.value);\n};\n```\n\n2. Handle form submission by preventing default behavior and sending data to the backend:\n```jsx\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  // Send data to backend\n};\n```\n\n3. Submit the form on a button click:\n```jsx\n<form onSubmit={handleSubmit}>\n  <input type='text' value={inputValue} onChange={handleChange} />\n  <button type='submit'>Submit</button>\n</form>\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html",
        "start_char": 0,
        "end_char": 689,
        "key_answer": "Steps to handle form submissions in React:\n\n1. Create a form element and use state to track input values:\n```jsx\nconst [inputValue, setInputValue] = useState('');\n\nconst handleChange = (e) => {\n  setInputValue(e.target.value);\n};\n```\n\n2. Handle form submission by preventing default behavior and sending data to the backend:\n```jsx\nconst handleSubmit = (e) => {\n  e.preventDefault();\n  // Send data to backend\n};\n```\n\n3. Submit the form on a button click:\n```jsx\n<form onSubmit={handleSubmit}>\n  <input type='text' value={inputValue} onChange={handleChange} />\n  <button type='submit'>Submit</button>\n</form>\n```\n\n📚 Reference: https://reactjs.org/docs/forms.html"
    },
    {
        "question": "How to handle state management in a React application?",
        "label": "react, state-management, hooks",
        "language": "en",
        "context": "State management in React is essential to manage and update the application's state efficiently.",
        "answer": "Steps for state management in React using hooks:\n\n1. Use `useState` to create state variables and update them:\n```jsx\nconst [count, setCount] = useState(0);\nconst increment = () => setCount(count + 1);\n```\n\n2. Use `useEffect` to perform side effects when state changes:\n```jsx\nuseEffect(() => {\n  console.log('Count updated:', count);\n}, [count]);\n```\n\n3. For global state management, consider using Context API or third-party libraries like Redux.\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html",
        "start_char": 0,
        "end_char": 521,
        "key_answer": "Steps for state management in React using hooks:\n\n1. Use `useState` to create state variables and update them:\n```jsx\nconst [count, setCount] = useState(0);\nconst increment = () => setCount(count + 1);\n```\n\n2. Use `useEffect` to perform side effects when state changes:\n```jsx\nuseEffect(() => {\n  console.log('Count updated:', count);\n}, [count]);\n```\n\n3. For global state management, consider using Context API or third-party libraries like Redux.\n\n📚 Reference: https://reactjs.org/docs/hooks-state.html"
    },
    {
        "question": "How to implement React Router in a React application?",
        "label": "react, router, navigation",
        "language": "en",
        "context": "React Router enables navigation among different views or pages within a React application.",
        "answer": "Steps to implement React Router:\n\n1. Install `react-router-dom`:\n```bash\nnpm install react-router-dom\n```\n\n2. Import and set up the Router in your app:\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Use `Link` to navigate between pages:\n```jsx\n<Link to='/home'>Home</Link>\n<Link to='/about'>About</Link>\n```\n\n📚 Reference: https://reactrouter.com/",
        "start_char": 0,
        "end_char": 610,
        "key_answer": "Steps to implement React Router:\n\n1. Install `react-router-dom`:\n```bash\nnpm install react-router-dom\n```\n\n2. Import and set up the Router in your app:\n```jsx\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path='/home' component={Home} />\n        <Route path='/about' component={About} />\n      </Switch>\n    </Router>\n  );\n}\n```\n\n3. Use `Link` to navigate between pages:\n```jsx\n<Link to='/home'>Home</Link>\n<Link to='/about'>About</Link>\n```\n\n📚 Reference: https://reactrouter.com/"
    },
    {
        "question": "How to optimize performance in a React application?",
        "label": "react, performance, optimization",
        "language": "en",
        "context": "Performance optimization in React is essential for improving load times and overall user experience.",
        "answer": "Steps to optimize performance in React:\n\n1. Use `React.memo` to prevent unnecessary re-renders of functional components:\n```jsx\nconst MemoizedComponent = React.memo(Component);\n```\n\n2. Implement lazy loading for large components or routes:\n```jsx\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\n<Suspense fallback={<div>Loading...</div>}>\n  <LazyComponent />\n</Suspense>\n```\n\n3. Avoid anonymous functions in render methods to reduce re-renders:\n```jsx\n<button onClick={this.handleClick}>Click Me</button>\n```\n\n📚 Reference: https://reactjs.org/docs/optimizing-performance.html",
        "start_char": 0,
        "end_char": 616,
        "key_answer": "Steps to optimize performance in React:\n\n1. Use `React.memo` to prevent unnecessary re-renders of functional components:\n```jsx\nconst MemoizedComponent = React.memo(Component);\n```\n\n2. Implement lazy loading for large components or routes:\n```jsx\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\n\n<Suspense fallback={<div>Loading...</div>}>\n  <LazyComponent />\n</Suspense>\n```\n\n3. Avoid anonymous functions in render methods to reduce re-renders:\n```jsx\n<button onClick={this.handleClick}>Click Me</button>\n```\n\n📚 Reference: https://reactjs.org/docs/optimizing-performance.html"
    },
    {
        "question": "How to handle authentication in a React application?",
        "label": "react, authentication, jwt",
        "language": "en",
        "context": "Authentication in React apps is typically handled using JWT (JSON Web Tokens) or other methods like OAuth.",
        "answer": "Steps to handle authentication with JWT in React:\n\n1. Send login request to the server and get the token:\n```javascript\nconst response = await fetch('/api/login', { method: 'POST', body: credentials });\nconst { token } = await response.json();\n```\n\n2. Store the JWT token in `localStorage` or `sessionStorage`:\n```javascript\nlocalStorage.setItem('token', token);\n```\n\n3. Include the token in the authorization header for subsequent requests:\n```javascript\nconst token = localStorage.getItem('token');\nconst response = await fetch('/api/data', {\n  headers: { Authorization: `Bearer ${token}` }\n});\n```\n\n📚 Reference: https://jwt.io/introduction/",
        "start_char": 0,
        "end_char": 664,
        "key_answer": "Steps to handle authentication with JWT in React:\n\n1. Send login request to the server and get the token:\n```javascript\nconst response = await fetch('/api/login', { method: 'POST', body: credentials });\nconst { token } = await response.json();\n```\n\n2. Store the JWT token in `localStorage` or `sessionStorage`:\n```javascript\nlocalStorage.setItem('token', token);\n```\n\n3. Include the token in the authorization header for subsequent requests:\n```javascript\nconst token = localStorage.getItem('token');\nconst response = await fetch('/api/data', {\n  headers: { Authorization: `Bearer ${token}` }\n});\n```\n\n📚 Reference: https://jwt.io/introduction/"
    },
    {
        "question": "How to integrate Firebase authentication into a React application?",
        "label": "react, firebase, authentication",
        "language": "en",
        "context": "Firebase provides a simple way to handle user authentication in React applications using Firebase Authentication.",
        "answer": "Steps to integrate Firebase authentication in React:\n\n1. Install Firebase:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your React app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = { ... };\nfirebase.initializeApp(firebaseConfig);\n```\n\n3. Create authentication functions (e.g., login, signup):\n```javascript\nconst signUp = async (email, password) => {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n};\n```\n\n4. Handle user login and logout:\n```javascript\nconst signIn = async (email, password) => {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n};\n\nconst signOut = () => {\n  firebase.auth().signOut();\n};\n```\n\n📚 Reference: https://firebase.google.com/docs/auth/web/start",
        "start_char": 0,
        "end_char": 820,
        "key_answer": "Steps to integrate Firebase authentication in React:\n\n1. Install Firebase:\n```bash\nnpm install firebase\n```\n\n2. Initialize Firebase in your React app:\n```javascript\nimport firebase from 'firebase/app';\nimport 'firebase/auth';\n\nconst firebaseConfig = { ... };\nfirebase.initializeApp(firebaseConfig);\n```\n\n3. Create authentication functions (e.g., login, signup):\n```javascript\nconst signUp = async (email, password) => {\n  await firebase.auth().createUserWithEmailAndPassword(email, password);\n};\n```\n\n4. Handle user login and logout:\n```javascript\nconst signIn = async (email, password) => {\n  await firebase.auth().signInWithEmailAndPassword(email, password);\n};\n\nconst signOut = () => {\n  firebase.auth().signOut();\n};\n```\n\n📚 Reference: https://firebase.google.com/docs/auth/web/start"
    },
    {
        "question": "How to set up a MongoDB database with Mongoose in Node.js?",
        "label": "nodejs, mongodb, mongoose",
        "language": "en",
        "context": "Mongoose is an ODM (Object Data Modeling) library for MongoDB and Node.js.",
        "answer": "Steps to set up MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to the MongoDB database using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema and model:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Perform CRUD operations:\n```javascript\nconst user = new User({ name: 'Alice', email: 'alice@example.com' });\nawait user.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/",
        "start_char": 0,
        "end_char": 693,
        "key_answer": "Steps to set up MongoDB with Mongoose in Node.js:\n\n1. Install Mongoose:\n```bash\nnpm install mongoose\n```\n\n2. Connect to the MongoDB database using Mongoose:\n```javascript\nconst mongoose = require('mongoose');\nmongoose.connect('mongodb://localhost/mydb', { useNewUrlParser: true, useUnifiedTopology: true });\n```\n\n3. Define a schema and model:\n```javascript\nconst UserSchema = new mongoose.Schema({\n  name: String,\n  email: String\n});\nconst User = mongoose.model('User', UserSchema);\n```\n\n4. Perform CRUD operations:\n```javascript\nconst user = new User({ name: 'Alice', email: 'alice@example.com' });\nawait user.save();\n```\n\n📚 Reference: https://mongoosejs.com/docs/"
    },
    {
        "question": "How to optimize MongoDB queries for better performance?",
        "label": "mongodb, performance, optimization",
        "language": "en",
        "context": "Optimizing MongoDB queries ensures that the database performs well even under heavy load.",
        "answer": "Steps to optimize MongoDB queries:\n\n1. Use indexes for fast lookups:\n```javascript\ndb.users.createIndex({ email: 1 });\n```\n\n2. Limit the number of documents returned by the query:\n```javascript\ndb.users.find({}).limit(10);\n```\n\n3. Avoid using regular expressions or wildcards in queries, as they can be slow.\n\n4. Use projections to return only the fields needed:\n```javascript\ndb.users.find({}, { name: 1, email: 1 });\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/db.collection.find/",
        "start_char": 0,
        "end_char": 524,
        "key_answer": "Steps to optimize MongoDB queries:\n\n1. Use indexes for fast lookups:\n```javascript\ndb.users.createIndex({ email: 1 });\n```\n\n2. Limit the number of documents returned by the query:\n```javascript\ndb.users.find({}).limit(10);\n```\n\n3. Avoid using regular expressions or wildcards in queries, as they can be slow.\n\n4. Use projections to return only the fields needed:\n```javascript\ndb.users.find({}, { name: 1, email: 1 });\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/db.collection.find/"
    },
    {
        "question": "How to set up OAuth2 authentication in Node.js?",
        "label": "nodejs, oauth2, authentication",
        "language": "en",
        "context": "OAuth2 is a protocol for authorization, allowing secure access to resources from a third-party service.",
        "answer": "Steps to set up OAuth2 authentication in Node.js:\n\n1. Install `passport` and `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up Passport and OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use('oauth2', new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth2/auth',\n  tokenURL: 'https://example.com/oauth2/token',\n  clientID: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  callbackURL: 'https://localhost:3000/auth/callback'\n}, (accessToken, refreshToken, profile, cb) => {\n  return cb(null, profile);\n}));\n```\n\n3. Set up authentication routes:\n```javascript\napp.get('/auth', passport.authenticate('oauth2'));\napp.get('/auth/callback', passport.authenticate('oauth2', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n📚 Reference: https://www.passportjs.org/packages/passport-oauth2/",
        "start_char": 0,
        "end_char": 971,
        "key_answer": "Steps to set up OAuth2 authentication in Node.js:\n\n1. Install `passport` and `passport-oauth2`:\n```bash\nnpm install passport passport-oauth2\n```\n\n2. Set up Passport and OAuth2 strategy:\n```javascript\nconst passport = require('passport');\nconst OAuth2Strategy = require('passport-oauth2');\n\npassport.use('oauth2', new OAuth2Strategy({\n  authorizationURL: 'https://example.com/oauth2/auth',\n  tokenURL: 'https://example.com/oauth2/token',\n  clientID: 'YOUR_CLIENT_ID',\n  clientSecret: 'YOUR_CLIENT_SECRET',\n  callbackURL: 'https://localhost:3000/auth/callback'\n}, (accessToken, refreshToken, profile, cb) => {\n  return cb(null, profile);\n}));\n```\n\n3. Set up authentication routes:\n```javascript\napp.get('/auth', passport.authenticate('oauth2'));\napp.get('/auth/callback', passport.authenticate('oauth2', { failureRedirect: '/' }), (req, res) => {\n  res.redirect('/');\n});\n```\n\n📚 Reference: https://www.passportjs.org/packages/passport-oauth2/"
    },
    {
        "question": "How to secure your Node.js application with HTTPS?",
        "label": "nodejs, https, security",
        "language": "en",
        "context": "HTTPS ensures that data transferred between the client and server is encrypted.",
        "answer": "Steps to secure your Node.js application with HTTPS:\n\n1. Install `https` module:\n```bash\nnpm install https\n```\n\n2. Set up an HTTPS server with a valid SSL certificate:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private.key'),\n  cert: fs.readFileSync('certificate.crt')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello HTTPS');\n}).listen(3000);\n```\n\n3. Redirect HTTP traffic to HTTPS:\n```javascript\nconst http = require('http');\nhttp.createServer((req, res) => {\n  res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` });\n  res.end();\n}).listen(80);\n```\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/https.html",
        "start_char": 0,
        "end_char": 783,
        "key_answer": "Steps to secure your Node.js application with HTTPS:\n\n1. Install `https` module:\n```bash\nnpm install https\n```\n\n2. Set up an HTTPS server with a valid SSL certificate:\n```javascript\nconst https = require('https');\nconst fs = require('fs');\n\nconst options = {\n  key: fs.readFileSync('private.key'),\n  cert: fs.readFileSync('certificate.crt')\n};\n\nhttps.createServer(options, (req, res) => {\n  res.writeHead(200);\n  res.end('Hello HTTPS');\n}).listen(3000);\n```\n\n3. Redirect HTTP traffic to HTTPS:\n```javascript\nconst http = require('http');\nhttp.createServer((req, res) => {\n  res.writeHead(301, { Location: `https://${req.headers.host}${req.url}` });\n  res.end();\n}).listen(80);\n```\n\n📚 Reference: https://nodejs.org/dist/latest-v16.x/docs/api/https.html"
    },
    {
        "question": "How to implement pagination in MongoDB queries?",
        "label": "mongodb, pagination, queries",
        "language": "en",
        "context": "Pagination is useful for efficiently handling large datasets by breaking them into smaller chunks.",
        "answer": "Steps to implement pagination in MongoDB:\n\n1. Define the page number and page size:\n```javascript\nconst page = 1;\nconst pageSize = 10;\n```\n\n2. Skip the documents from previous pages and limit the number of documents:\n```javascript\ndb.users.find().skip((page - 1) * pageSize).limit(pageSize);\n```\n\n3. Optionally, add sorting:\n```javascript\ndb.users.find().skip((page - 1) * pageSize).limit(pageSize).sort({ name: 1 });\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/",
        "start_char": 0,
        "end_char": 515,
        "key_answer": "Steps to implement pagination in MongoDB:\n\n1. Define the page number and page size:\n```javascript\nconst page = 1;\nconst pageSize = 10;\n```\n\n2. Skip the documents from previous pages and limit the number of documents:\n```javascript\ndb.users.find().skip((page - 1) * pageSize).limit(pageSize);\n```\n\n3. Optionally, add sorting:\n```javascript\ndb.users.find().skip((page - 1) * pageSize).limit(pageSize).sort({ name: 1 });\n```\n\n📚 Reference: https://docs.mongodb.com/manual/reference/method/cursor.skip/"
    },
    {
        "question": "How to implement a RESTful API in Express.js?",
        "label": "express, api, restful",
        "language": "en",
        "context": "Express.js is a minimal and flexible Node.js web application framework that simplifies building RESTful APIs.",
        "answer": "Steps to create a RESTful API in Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up a basic Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\napp.listen(port, () => console.log(`App listening at http://localhost:${port}`));\n```\n\n3. Create RESTful routes (e.g., GET, POST, PUT, DELETE):\n```javascript\napp.get('/users', (req, res) => { ... });\napp.post('/users', (req, res) => { ... });\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html",
        "start_char": 0,
        "end_char": 618,
        "key_answer": "Steps to create a RESTful API in Express.js:\n\n1. Install Express.js:\n```bash\nnpm install express\n```\n\n2. Set up a basic Express server:\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => res.send('Hello World!'));\n\napp.listen(port, () => console.log(`App listening at http://localhost:${port}`));\n```\n\n3. Create RESTful routes (e.g., GET, POST, PUT, DELETE):\n```javascript\napp.get('/users', (req, res) => { ... });\napp.post('/users', (req, res) => { ... });\n```\n\n📚 Reference: https://expressjs.com/en/starter/hello-world.html"
    },
    {
        "question": "How to enable logging in Node.js using Winston?",
        "label": "nodejs, logging, winston",
        "language": "en",
        "context": "Winston is a versatile logging library for Node.js applications.",
        "answer": "Steps to enable logging using Winston in Node.js:\n\n1. Install Winston:\n```bash\nnpm install winston\n```\n\n2. Set up Winston logger:\n```javascript\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Use logger to log messages:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://github.com/winstonjs/winston",
        "start_char": 0,
        "end_char": 565,
        "key_answer": "Steps to enable logging using Winston in Node.js:\n\n1. Install Winston:\n```bash\nnpm install winston\n```\n\n2. Set up Winston logger:\n```javascript\nconst winston = require('winston');\nconst logger = winston.createLogger({\n  level: 'info',\n  transports: [\n    new winston.transports.Console(),\n    new winston.transports.File({ filename: 'app.log' })\n  ]\n});\n```\n\n3. Use logger to log messages:\n```javascript\nlogger.info('This is an info message');\nlogger.error('This is an error message');\n```\n\n📚 Reference: https://github.com/winstonjs/winston"
    },
    {
        "question": "How to use Sequelize ORM for PostgreSQL in Node.js?",
        "label": "nodejs, sequelize, postgresql",
        "language": "en",
        "context": "Sequelize is a promise-based Node.js ORM for Postgres, MySQL, MariaDB, and SQLite.",
        "answer": "Steps to use Sequelize with PostgreSQL in Node.js:\n\n1. Install Sequelize and PostgreSQL package:\n```bash\nnpm install sequelize pg pg-hstore\n```\n\n2. Set up Sequelize instance and connect to PostgreSQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('postgres://user:password@localhost:5432/mydb');\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING }\n});\n```\n\n4. Sync models with database and perform queries:\n```javascript\nawait sequelize.sync();\nconst users = await User.findAll();\n```\n\n📚 Reference: https://sequelize.org/",
        "start_char": 0,
        "end_char": 690,
        "key_answer": "Steps to use Sequelize with PostgreSQL in Node.js:\n\n1. Install Sequelize and PostgreSQL package:\n```bash\nnpm install sequelize pg pg-hstore\n```\n\n2. Set up Sequelize instance and connect to PostgreSQL:\n```javascript\nconst { Sequelize } = require('sequelize');\nconst sequelize = new Sequelize('postgres://user:password@localhost:5432/mydb');\n```\n\n3. Define a model:\n```javascript\nconst User = sequelize.define('User', {\n  name: { type: Sequelize.STRING },\n  email: { type: Sequelize.STRING }\n});\n```\n\n4. Sync models with database and perform queries:\n```javascript\nawait sequelize.sync();\nconst users = await User.findAll();\n```\n\n📚 Reference: https://sequelize.org/"
    },
    {
        "question": "How to implement caching with Redis in a Node.js application?",
        "label": "nodejs, redis, caching",
        "language": "en",
        "context": "Caching frequently accessed data using Redis can significantly improve the performance of your application.",
        "answer": "Steps to implement Redis caching in a Node.js application:\n\n1. Install Redis and Redis client:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client and connect:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set cache data:\n```javascript\nclient.set('key', 'value', redis.print);\n```\n\n4. Get cached data:\n```javascript\nclient.get('key', (err, reply) => {\n  console.log(reply); // will print 'value'\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis",
        "start_char": 0,
        "end_char": 603,
        "key_answer": "Steps to implement Redis caching in a Node.js application:\n\n1. Install Redis and Redis client:\n```bash\nnpm install redis\n```\n\n2. Set up Redis client and connect:\n```javascript\nconst redis = require('redis');\nconst client = redis.createClient();\nclient.on('connect', function() {\n  console.log('Connected to Redis');\n});\n```\n\n3. Set cache data:\n```javascript\nclient.set('key', 'value', redis.print);\n```\n\n4. Get cached data:\n```javascript\nclient.get('key', (err, reply) => {\n  console.log(reply); // will print 'value'\n});\n```\n\n📚 Reference: https://www.npmjs.com/package/redis"
    },
    {
        "question": "What is the difference between GET and POST HTTP methods?",
        "label": "http, get, post, methods",
        "language": "en",
        "context": "GET and POST are two commonly used HTTP methods that perform different actions in a web application.",
        "answer": "Differences between GET and POST HTTP methods:\n\n1. GET method:\n   - Used to retrieve data from the server.\n   - Parameters are sent in the URL (in query string).\n   - Data is visible in the browser's address bar.\n   - Can be cached and bookmarked.\n\n2. POST method:\n   - Used to send data to the server (e.g., form submission).\n   - Parameters are sent in the request body, not the URL.\n   - Data is not visible in the browser's address bar.\n   - Cannot be cached or bookmarked.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
        "start_char": 0,
        "end_char": 563,
        "key_answer": "Differences between GET and POST HTTP methods:\n\n1. GET method:\n   - Used to retrieve data from the server.\n   - Parameters are sent in the URL (in query string).\n   - Data is visible in the browser's address bar.\n   - Can be cached and bookmarked.\n\n2. POST method:\n   - Used to send data to the server (e.g., form submission).\n   - Parameters are sent in the request body, not the URL.\n   - Data is not visible in the browser's address bar.\n   - Cannot be cached or bookmarked.\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"
    },
    {
        "question": "What is the difference between synchronous and asynchronous code in JavaScript?",
        "label": "javascript, synchronous, asynchronous",
        "language": "en",
        "context": "Understanding synchronous and asynchronous code is crucial for handling operations that may take time, like file reading or network requests.",
        "answer": "Differences between synchronous and asynchronous code:\n\n1. Synchronous code:\n   - Executes line by line, blocking the next line until the current one finishes.\n   - Can lead to performance issues if tasks are time-consuming.\n   - Example:\n   ```javascript\n   console.log('Start');\n   console.log('End');\n   ```\n   - Output: 'Start', 'End'\n\n2. Asynchronous code:\n   - Executes tasks in parallel without blocking the next line of code.\n   - Ideal for tasks that take time (e.g., I/O operations, network requests).\n   - Example:\n   ```javascript\n   setTimeout(() => {\n     console.log('This runs after 1 second');\n   }, 1000);\n   console.log('This runs immediately');\n   ```\n   - Output: 'This runs immediately', 'This runs after 1 second'\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",
        "start_char": 0,
        "end_char": 845,
        "key_answer": "Differences between synchronous and asynchronous code:\n\n1. Synchronous code:\n   - Executes line by line, blocking the next line until the current one finishes.\n   - Can lead to performance issues if tasks are time-consuming.\n   - Example:\n   ```javascript\n   console.log('Start');\n   console.log('End');\n   ```\n   - Output: 'Start', 'End'\n\n2. Asynchronous code:\n   - Executes tasks in parallel without blocking the next line of code.\n   - Ideal for tasks that take time (e.g., I/O operations, network requests).\n   - Example:\n   ```javascript\n   setTimeout(() => {\n     console.log('This runs after 1 second');\n   }, 1000);\n   console.log('This runs immediately');\n   ```\n   - Output: 'This runs immediately', 'This runs after 1 second'\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"
    },
    {
        "question": "How to handle CORS (Cross-Origin Resource Sharing) in Express.js?",
        "label": "express, cors",
        "language": "en",
        "context": "CORS is a security feature implemented by browsers to prevent malicious websites from accessing resources from a different origin.",
        "answer": "Steps to handle CORS in Express.js:\n\n1. Install `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use CORS in your Express app:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n\n3. Optionally, configure CORS for specific origins:\n```javascript\napp.use(cors({ origin: 'https://example.com' }));\n```\n\n4. You can also restrict methods and headers:\n```javascript\napp.use(cors({\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n```\n\n📚 Reference: https://www.npmjs.com/package/cors",
        "start_char": 0,
        "end_char": 555,
        "key_answer": "Steps to handle CORS in Express.js:\n\n1. Install `cors` middleware:\n```bash\nnpm install cors\n```\n\n2. Use CORS in your Express app:\n```javascript\nconst cors = require('cors');\napp.use(cors());\n```\n\n3. Optionally, configure CORS for specific origins:\n```javascript\napp.use(cors({ origin: 'https://example.com' }));\n```\n\n4. You can also restrict methods and headers:\n```javascript\napp.use(cors({\n  methods: ['GET', 'POST'],\n  allowedHeaders: ['Content-Type', 'Authorization']\n}));\n```\n\n📚 Reference: https://www.npmjs.com/package/cors"
    },
    {
        "question": "How to connect to a MongoDB database from Node.js?",
        "label": "nodejs, mongodb, database",
        "language": "en",
        "context": "MongoDB is a NoSQL database that is commonly used with Node.js for storing and retrieving data.",
        "answer": "Steps to connect to MongoDB from Node.js:\n\n1. Install the MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Set up a MongoDB client and connect:\n```javascript\nconst { MongoClient } = require('mongodb');\nconst client = new MongoClient('mongodb://localhost:27017');\n\nclient.connect().then(() => {\n  console.log('Connected to MongoDB');\n});\n```\n\n3. Perform database operations (e.g., insert, find):\n```javascript\nconst db = client.db('mydb');\nconst users = db.collection('users');\nawait users.insertOne({ name: 'John' });\nconst user = await users.findOne({ name: 'John' });\nconsole.log(user);\n```\n\n📚 Reference: https://www.mongodb.com/docs/drivers/node/current/",
        "start_char": 0,
        "end_char": 694,
        "key_answer": "Steps to connect to MongoDB from Node.js:\n\n1. Install the MongoDB Node.js driver:\n```bash\nnpm install mongodb\n```\n\n2. Set up a MongoDB client and connect:\n```javascript\nconst { MongoClient } = require('mongodb');\nconst client = new MongoClient('mongodb://localhost:27017');\n\nclient.connect().then(() => {\n  console.log('Connected to MongoDB');\n});\n```\n\n3. Perform database operations (e.g., insert, find):\n```javascript\nconst db = client.db('mydb');\nconst users = db.collection('users');\nawait users.insertOne({ name: 'John' });\nconst user = await users.findOne({ name: 'John' });\nconsole.log(user);\n```\n\n📚 Reference: https://www.mongodb.com/docs/drivers/node/current/"
    },
    {
        "question": "What is the difference between SQL and NoSQL databases?",
        "label": "sql, nosql, databases",
        "language": "en",
        "context": "SQL and NoSQL are two types of databases that differ in their structure, flexibility, and use cases.",
        "answer": "Differences between SQL and NoSQL databases:\n\n1. SQL Databases:\n   - Structured query language (SQL) is used to manage and query data.\n   - Data is stored in structured tables (rows and columns).\n   - Follows ACID properties (Atomicity, Consistency, Isolation, Durability).\n   - Examples: MySQL, PostgreSQL.\n\n2. NoSQL Databases:\n   - No fixed schema; data can be unstructured or semi-structured.\n   - Scalable and flexible for large-scale data, especially for modern web applications.\n   - Examples: MongoDB, Cassandra, Redis.\n\n📚 Reference: https://www.mongodb.com/nosql-explained",
        "start_char": 0,
        "end_char": 593,
        "key_answer": "Differences between SQL and NoSQL databases:\n\n1. SQL Databases:\n   - Structured query language (SQL) is used to manage and query data.\n   - Data is stored in structured tables (rows and columns).\n   - Follows ACID properties (Atomicity, Consistency, Isolation, Durability).\n   - Examples: MySQL, PostgreSQL.\n\n2. NoSQL Databases:\n   - No fixed schema; data can be unstructured or semi-structured.\n   - Scalable and flexible for large-scale data, especially for modern web applications.\n   - Examples: MongoDB, Cassandra, Redis.\n\n📚 Reference: https://www.mongodb.com/nosql-explained"
    },
    {
        "question": "What is an API (Application Programming Interface) and how is it used in web development?",
        "label": "api, web-development",
        "language": "en",
        "context": "An API is a set of rules that allow different software programs to communicate with each other, acting as an interface for the interaction between systems.",
        "answer": "An API (Application Programming Interface) is a set of protocols and tools that allow different software applications to interact with each other.\n\nIn web development, APIs are commonly used to send and receive data between the frontend and backend.\n\n1. A REST API exposes endpoints that allow clients to perform CRUD (Create, Read, Update, Delete) operations on resources.\n2. Clients (e.g., browsers, mobile apps) can make HTTP requests (GET, POST, PUT, DELETE) to API endpoints to interact with the server.\n\nExample of using a REST API with Fetch in JavaScript:\n```javascript\nfetch('https://api.example.com/users')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://restfulapi.net/",
        "start_char": 0,
        "end_char": 745,
        "key_answer": "An API (Application Programming Interface) is a set of protocols and tools that allow different software applications to interact with each other.\n\nIn web development, APIs are commonly used to send and receive data between the frontend and backend.\n\n1. A REST API exposes endpoints that allow clients to perform CRUD (Create, Read, Update, Delete) operations on resources.\n2. Clients (e.g., browsers, mobile apps) can make HTTP requests (GET, POST, PUT, DELETE) to API endpoints to interact with the server.\n\nExample of using a REST API with Fetch in JavaScript:\n```javascript\nfetch('https://api.example.com/users')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://restfulapi.net/"
    },
    {
        "question": "What is the purpose of the `bind()` method in JavaScript?",
        "label": "javascript, bind, method",
        "language": "en",
        "context": "The `bind()` method in JavaScript is used to set the value of `this` for a function and returns a new function.",
        "answer": "The `bind()` method is used to create a new function that, when called, has its `this` value set to a specific value.\n\nThis is particularly useful when you want to pass a function as a callback, but ensure that `this` refers to a particular object.\n\nExample:\n```javascript\nconst person = { name: 'John' };\nconst greet = function() {\n  console.log('Hello, ' + this.name);\n};\n\nconst greetPerson = greet.bind(person);\ngreetPerson(); // Output: 'Hello, John'\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind",
        "start_char": 0,
        "end_char": 582,
        "key_answer": "The `bind()` method is used to create a new function that, when called, has its `this` value set to a specific value.\n\nThis is particularly useful when you want to pass a function as a callback, but ensure that `this` refers to a particular object.\n\nExample:\n```javascript\nconst person = { name: 'John' };\nconst greet = function() {\n  console.log('Hello, ' + this.name);\n};\n\nconst greetPerson = greet.bind(person);\ngreetPerson(); // Output: 'Hello, John'\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind"
    },
    {
        "question": "What is the use of the `reduce()` method in JavaScript?",
        "label": "javascript, reduce, array-method",
        "language": "en",
        "context": "The `reduce()` method in JavaScript is used to apply a function to each element of an array to reduce it to a single value.",
        "answer": "The `reduce()` method applies a function to each element of an array and accumulates a single result.\n\nSyntax:\n```javascript\narray.reduce((accumulator, currentValue, index, array) => {\n  return accumulator + currentValue;\n}, initialValue);\n```\n\nExample:\n```javascript\nconst numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // Output: 10\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce",
        "start_char": 0,
        "end_char": 513,
        "key_answer": "The `reduce()` method applies a function to each element of an array and accumulates a single result.\n\nSyntax:\n```javascript\narray.reduce((accumulator, currentValue, index, array) => {\n  return accumulator + currentValue;\n}, initialValue);\n```\n\nExample:\n```javascript\nconst numbers = [1, 2, 3, 4];\nconst sum = numbers.reduce((acc, num) => acc + num, 0);\nconsole.log(sum); // Output: 10\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"
    },
    {
        "question": "What is the purpose of the `async/await` syntax in JavaScript?",
        "label": "javascript, async, await, promises",
        "language": "en",
        "context": "The `async/await` syntax in JavaScript provides a way to work with asynchronous code in a synchronous-like manner.",
        "answer": "`async/await` is used to handle asynchronous operations in JavaScript more easily, making the code more readable.\n\n1. `async` marks a function as asynchronous and returns a promise.\n2. `await` can only be used inside `async` functions and pauses the execution of the function until the promise resolves.\n\nExample:\n```javascript\nconst fetchData = async () => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n};\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function",
        "start_char": 0,
        "end_char": 623,
        "key_answer": "`async/await` is used to handle asynchronous operations in JavaScript more easily, making the code more readable.\n\n1. `async` marks a function as asynchronous and returns a promise.\n2. `await` can only be used inside `async` functions and pauses the execution of the function until the promise resolves.\n\nExample:\n```javascript\nconst fetchData = async () => {\n  const response = await fetch('https://api.example.com/data');\n  const data = await response.json();\n  console.log(data);\n};\nfetchData();\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"
    },
    {
        "question": "How to handle errors in asynchronous code in Node.js?",
        "label": "nodejs, asynchronous, error-handling",
        "language": "en",
        "context": "Error handling is crucial in asynchronous code to ensure that the application doesn't crash or behave unexpectedly.",
        "answer": "To handle errors in asynchronous code:\n\n1. Use try-catch blocks with `async/await`:\n```javascript\ntry {\n  const data = await fetchData();\n} catch (err) {\n  console.log('Error:', err);\n}\n```\n\n2. Use `.catch()` with promises:\n```javascript\nfetchData().catch(err => {\n  console.log('Error:', err);\n});\n```\n\n3. Handle errors in callback functions:\n```javascript\nfs.readFile('file.txt', (err, data) => {\n  if (err) {\n    console.log('Error reading file:', err);\n  } else {\n    console.log('File data:', data);\n  }\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling",
        "start_char": 0,
        "end_char": 653,
        "key_answer": "To handle errors in asynchronous code:\n\n1. Use try-catch blocks with `async/await`:\n```javascript\ntry {\n  const data = await fetchData();\n} catch (err) {\n  console.log('Error:', err);\n}\n```\n\n2. Use `.catch()` with promises:\n```javascript\nfetchData().catch(err => {\n  console.log('Error:', err);\n});\n```\n\n3. Handle errors in callback functions:\n```javascript\nfs.readFile('file.txt', (err, data) => {\n  if (err) {\n    console.log('Error reading file:', err);\n  } else {\n    console.log('File data:', data);\n  }\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Control_flow_and_error_handling"
    },
    {
        "question": "What is a promise in JavaScript?",
        "label": "javascript, promise",
        "language": "en",
        "context": "A Promise is an object representing the eventual completion or failure of an asynchronous operation in JavaScript.",
        "answer": "A promise is an object that represents the result of an asynchronous operation.\n\nA promise has three states:\n1. Pending: The operation is still ongoing.\n2. Fulfilled: The operation completed successfully.\n3. Rejected: The operation failed.\n\nExample of using a promise:\n```javascript\nconst fetchData = new Promise((resolve, reject) => {\n  const data = 'Hello, world!';\n  resolve(data);\n});\n\nfetchData.then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 556,
        "key_answer": "A promise is an object that represents the result of an asynchronous operation.\n\nA promise has three states:\n1. Pending: The operation is still ongoing.\n2. Fulfilled: The operation completed successfully.\n3. Rejected: The operation failed.\n\nExample of using a promise:\n```javascript\nconst fetchData = new Promise((resolve, reject) => {\n  const data = 'Hello, world!';\n  resolve(data);\n});\n\nfetchData.then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "What is a RESTful API?",
        "label": "api, restful, web-development",
        "language": "en",
        "context": "RESTful APIs follow the principles of Representational State Transfer (REST) architecture, commonly used for building web services.",
        "answer": "A RESTful API is an API that adheres to the principles of REST architecture. REST stands for Representational State Transfer and uses standard HTTP methods (GET, POST, PUT, DELETE).\n\nKey principles of RESTful APIs:\n1. Stateless: Every request is independent, with no session state stored on the server.\n2. Client-Server: The client and server are separate entities that communicate via HTTP.\n3. Resource-Based: Resources (such as data objects) are identified by URIs (Uniform Resource Identifiers).\n\nExample of a RESTful API request:\n```javascript\nfetch('https://api.example.com/users')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://restfulapi.net/",
        "start_char": 0,
        "end_char": 715,
        "key_answer": "A RESTful API is an API that adheres to the principles of REST architecture. REST stands for Representational State Transfer and uses standard HTTP methods (GET, POST, PUT, DELETE).\n\nKey principles of RESTful APIs:\n1. Stateless: Every request is independent, with no session state stored on the server.\n2. Client-Server: The client and server are separate entities that communicate via HTTP.\n3. Resource-Based: Resources (such as data objects) are identified by URIs (Uniform Resource Identifiers).\n\nExample of a RESTful API request:\n```javascript\nfetch('https://api.example.com/users')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://restfulapi.net/"
    },
    {
        "question": "What is the difference between `null` and `undefined` in JavaScript?",
        "label": "javascript, null, undefined",
        "language": "en",
        "context": "Both `null` and `undefined` are used to represent absence of value, but they are used in different contexts.",
        "answer": "The differences between `null` and `undefined` are:\n\n1. `undefined`: A variable that has been declared but not assigned a value is `undefined` by default.\n   Example:\n   ```javascript\n   let x;\n   console.log(x); // Output: undefined\n   ```\n2. `null`: `null` is an explicit assignment that represents no value or an empty object reference.\n   Example:\n   ```javascript\n   let y = null;\n   console.log(y); // Output: null\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
        "start_char": 0,
        "end_char": 542,
        "key_answer": "The differences between `null` and `undefined` are:\n\n1. `undefined`: A variable that has been declared but not assigned a value is `undefined` by default.\n   Example:\n   ```javascript\n   let x;\n   console.log(x); // Output: undefined\n   ```\n2. `null`: `null` is an explicit assignment that represents no value or an empty object reference.\n   Example:\n   ```javascript\n   let y = null;\n   console.log(y); // Output: null\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null"
    },
    {
        "question": "How to create a simple HTTP server in Node.js?",
        "label": "nodejs, http-server",
        "language": "en",
        "context": "Node.js allows you to create an HTTP server to handle incoming requests and send responses.",
        "answer": "To create a simple HTTP server in Node.js:\n\n1. Require the `http` module:\n```javascript\nconst http = require('http');\n```\n\n2. Create the server and define the request handler:\n```javascript\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n```\n\n3. Start the server to listen on a port:\n```javascript\nserver.listen(3000, () => {\n  console.log('Server is running on http://localhost:3000');\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/",
        "start_char": 0,
        "end_char": 547,
        "key_answer": "To create a simple HTTP server in Node.js:\n\n1. Require the `http` module:\n```javascript\nconst http = require('http');\n```\n\n2. Create the server and define the request handler:\n```javascript\nconst server = http.createServer((req, res) => {\n  res.writeHead(200, { 'Content-Type': 'text/plain' });\n  res.end('Hello, World!');\n});\n```\n\n3. Start the server to listen on a port:\n```javascript\nserver.listen(3000, () => {\n  console.log('Server is running on http://localhost:3000');\n});\n```\n\n📚 Reference: https://nodejs.org/en/docs/"
    },
    {
        "question": "What is the difference between `let`, `const`, and `var` in JavaScript?",
        "label": "javascript, let, const, var",
        "language": "en",
        "context": "`let`, `const`, and `var` are used to declare variables, but they behave differently in terms of scope, hoisting, and reassignment.",
        "answer": "The differences between `let`, `const`, and `var` are:\n\n1. `let`: Used to declare variables with block scope, meaning the variable is limited to the block (e.g., within loops or conditionals).\n   Example:\n   ```javascript\n   let x = 5;\n   if (true) {\n     let x = 10;\n     console.log(x); // Output: 10\n   }\n   console.log(x); // Output: 5\n   ```\n2. `const`: Used to declare constants that cannot be reassigned. It also has block scope.\n   Example:\n   ```javascript\n   const x = 5;\n   x = 10; // Error: Assignment to constant variable.\n   ```\n3. `var`: Used to declare variables with function scope, meaning the variable is limited to the function, or globally if not in a function.\n   Example:\n   ```javascript\n   var x = 5;\n   if (true) {\n     var x = 10;\n   }\n   console.log(x); // Output: 10\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let",
        "start_char": 0,
        "end_char": 925,
        "key_answer": "The differences between `let`, `const`, and `var` are:\n\n1. `let`: Used to declare variables with block scope, meaning the variable is limited to the block (e.g., within loops or conditionals).\n   Example:\n   ```javascript\n   let x = 5;\n   if (true) {\n     let x = 10;\n     console.log(x); // Output: 10\n   }\n   console.log(x); // Output: 5\n   ```\n2. `const`: Used to declare constants that cannot be reassigned. It also has block scope.\n   Example:\n   ```javascript\n   const x = 5;\n   x = 10; // Error: Assignment to constant variable.\n   ```\n3. `var`: Used to declare variables with function scope, meaning the variable is limited to the function, or globally if not in a function.\n   Example:\n   ```javascript\n   var x = 5;\n   if (true) {\n     var x = 10;\n   }\n   console.log(x); // Output: 10\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"
    },
    {
        "question": "What is the purpose of `localStorage` and `sessionStorage` in web development?",
        "label": "web-development, localStorage, sessionStorage",
        "language": "en",
        "context": "`localStorage` and `sessionStorage` are both web storage objects that allow you to store data on the client-side.",
        "answer": "The differences between `localStorage` and `sessionStorage` are:\n\n1. `localStorage`: Stores data with no expiration time. The data persists even after the browser is closed and reopened.\n   Example:\n   ```javascript\n   localStorage.setItem('username', 'John');\n   console.log(localStorage.getItem('username')); // Output: John\n   ```\n2. `sessionStorage`: Stores data for the duration of the page session. Data is lost when the page or browser is closed.\n   Example:\n   ```javascript\n   sessionStorage.setItem('session_id', '12345');\n   console.log(sessionStorage.getItem('session_id')); // Output: 12345\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage",
        "start_char": 0,
        "end_char": 708,
        "key_answer": "The differences between `localStorage` and `sessionStorage` are:\n\n1. `localStorage`: Stores data with no expiration time. The data persists even after the browser is closed and reopened.\n   Example:\n   ```javascript\n   localStorage.setItem('username', 'John');\n   console.log(localStorage.getItem('username')); // Output: John\n   ```\n2. `sessionStorage`: Stores data for the duration of the page session. Data is lost when the page or browser is closed.\n   Example:\n   ```javascript\n   sessionStorage.setItem('session_id', '12345');\n   console.log(sessionStorage.getItem('session_id')); // Output: 12345\n   ```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"
    },
    {
        "question": "What is the purpose of the `fetch()` API in JavaScript?",
        "label": "javascript, fetch, api",
        "language": "en",
        "context": "`fetch()` is a modern JavaScript API for making asynchronous HTTP requests.",
        "answer": "The `fetch()` API is used to make HTTP requests from JavaScript. It returns a promise that resolves to the response of the request.\n\nSyntax:\n```javascript\nfetch(url, options)\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.log('Error:', error));\n```\nExample of making a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API",
        "start_char": 0,
        "end_char": 550,
        "key_answer": "The `fetch()` API is used to make HTTP requests from JavaScript. It returns a promise that resolves to the response of the request.\n\nSyntax:\n```javascript\nfetch(url, options)\n  .then(response => response.json())\n  .then(data => console.log(data))\n  .catch(error => console.log('Error:', error));\n```\nExample of making a GET request:\n```javascript\nfetch('https://api.example.com/data')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API"
    },
    {
        "question": "What is an event loop in JavaScript?",
        "label": "javascript, event-loop, asynchronous",
        "language": "en",
        "context": "The event loop is a fundamental concept in JavaScript that enables asynchronous behavior by handling events and executing code in a non-blocking manner.",
        "answer": "The event loop is responsible for executing JavaScript code in a non-blocking, asynchronous manner. It continuously checks the call stack and the message queue to execute code that is ready.\n\n1. When synchronous code is executed, it is placed in the call stack.\n2. Asynchronous code (e.g., promises or setTimeout) is handled by the event loop, which places the callback functions in the message queue.\n3. The event loop executes the message queue only when the call stack is empty.\n\nExample:\n```javascript\nconsole.log('Start');\nsetTimeout(() => { console.log('Asynchronous code'); }, 0);\nconsole.log('End');\n```\nOutput: `Start` -> `End` -> `Asynchronous code`\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop",
        "start_char": 0,
        "end_char": 753,
        "key_answer": "The event loop is responsible for executing JavaScript code in a non-blocking, asynchronous manner. It continuously checks the call stack and the message queue to execute code that is ready.\n\n1. When synchronous code is executed, it is placed in the call stack.\n2. Asynchronous code (e.g., promises or setTimeout) is handled by the event loop, which places the callback functions in the message queue.\n3. The event loop executes the message queue only when the call stack is empty.\n\nExample:\n```javascript\nconsole.log('Start');\nsetTimeout(() => { console.log('Asynchronous code'); }, 0);\nconsole.log('End');\n```\nOutput: `Start` -> `End` -> `Asynchronous code`\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop"
    },
    {
        "question": "What is the purpose of the `this` keyword in JavaScript?",
        "label": "javascript, this",
        "language": "en",
        "context": "The `this` keyword refers to the context in which the current code is executing, often referring to the object that called the method.",
        "answer": "`this` refers to the object that is executing the current function or method.\n\nIn global scope, `this` refers to the global object (in the browser, it's `window`). Inside a function, `this` refers to the object that called the function. In an event handler, `this` refers to the element that triggered the event.\n\nExample:\n```javascript\nconst person = { name: 'John', greet: function() { console.log(this.name); } };\nperson.greet(); // Output: John\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this",
        "start_char": 0,
        "end_char": 557,
        "key_answer": "`this` refers to the object that is executing the current function or method.\n\nIn global scope, `this` refers to the global object (in the browser, it's `window`). Inside a function, `this` refers to the object that called the function. In an event handler, `this` refers to the element that triggered the event.\n\nExample:\n```javascript\nconst person = { name: 'John', greet: function() { console.log(this.name); } };\nperson.greet(); // Output: John\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this"
    },
    {
        "question": "What is the difference between synchronous and asynchronous programming?",
        "label": "javascript, synchronous, asynchronous",
        "language": "en",
        "context": "Synchronous and asynchronous are two types of programming models used to handle operations and events in JavaScript.",
        "answer": "Synchronous programming executes code in a sequential manner, where each operation must be completed before the next one starts. In contrast, asynchronous programming allows the program to continue executing other code while waiting for an operation (like reading a file or making a network request) to complete.\n\nExample of synchronous code:\n```javascript\nconsole.log('Start');\nconsole.log('End');\n// Output: Start -> End\n```\nExample of asynchronous code using `setTimeout`:\n```javascript\nconsole.log('Start');\nsetTimeout(() => { console.log('Asynchronous operation'); }, 1000);\nconsole.log('End');\n// Output: Start -> End -> Asynchronous operation\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous",
        "start_char": 0,
        "end_char": 754,
        "key_answer": "Synchronous programming executes code in a sequential manner, where each operation must be completed before the next one starts. In contrast, asynchronous programming allows the program to continue executing other code while waiting for an operation (like reading a file or making a network request) to complete.\n\nExample of synchronous code:\n```javascript\nconsole.log('Start');\nconsole.log('End');\n// Output: Start -> End\n```\nExample of asynchronous code using `setTimeout`:\n```javascript\nconsole.log('Start');\nsetTimeout(() => { console.log('Asynchronous operation'); }, 1000);\nconsole.log('End');\n// Output: Start -> End -> Asynchronous operation\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous"
    },
    {
        "question": "What is a higher-order function in JavaScript?",
        "label": "javascript, higher-order-function",
        "language": "en",
        "context": "A higher-order function is a function that takes another function as an argument or returns a function as a result.",
        "answer": "A higher-order function is a function that can accept a function as an argument, return a function as a result, or both.\n\nExample of passing a function as an argument:\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\nfunction processGreeting(fn, name) {\n  console.log(fn(name));\n}\nprocessGreeting(greet, 'John'); // Output: Hello, John!\n```\n\nExample of returning a function:\n```javascript\nfunction multiplyBy(x) {\n  return function(y) {\n    return x * y;\n  };\n}\nconst multiplyByTwo = multiplyBy(2);\nconsole.log(multiplyByTwo(5)); // Output: 10\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions",
        "start_char": 0,
        "end_char": 679,
        "key_answer": "A higher-order function is a function that can accept a function as an argument, return a function as a result, or both.\n\nExample of passing a function as an argument:\n```javascript\nfunction greet(name) {\n  return `Hello, ${name}!`;\n}\nfunction processGreeting(fn, name) {\n  console.log(fn(name));\n}\nprocessGreeting(greet, 'John'); // Output: Hello, John!\n```\n\nExample of returning a function:\n```javascript\nfunction multiplyBy(x) {\n  return function(y) {\n    return x * y;\n  };\n}\nconst multiplyByTwo = multiplyBy(2);\nconsole.log(multiplyByTwo(5)); // Output: 10\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions"
    },
    {
        "question": "What is the difference between `GET` and `POST` methods in HTTP?",
        "label": "web-development, http, methods",
        "language": "en",
        "context": "`GET` and `POST` are two commonly used HTTP methods for retrieving and sending data in web applications.",
        "answer": "`GET` is used to request data from a specified resource, and the data is sent in the URL (query string). It is considered a safe and idempotent method. `POST`, on the other hand, is used to send data to a server, typically for creating or updating resources. The data is sent in the body of the request.\n\nExample of GET request:\n```javascript\nfetch('https://api.example.com/resource?name=John')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\nExample of POST request:\n```javascript\nfetch('https://api.example.com/resource', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ name: 'John' })\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods",
        "start_char": 0,
        "end_char": 769,
        "key_answer": "`GET` is used to request data from a specified resource, and the data is sent in the URL (query string). It is considered a safe and idempotent method. `POST`, on the other hand, is used to send data to a server, typically for creating or updating resources. The data is sent in the body of the request.\n\nExample of GET request:\n```javascript\nfetch('https://api.example.com/resource?name=John')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\nExample of POST request:\n```javascript\nfetch('https://api.example.com/resource', {\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({ name: 'John' })\n});\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods"
    },
    {
        "question": "What is the difference between `deep copy` and `shallow copy` in JavaScript?",
        "label": "javascript, deep-copy, shallow-copy",
        "language": "en",
        "context": "In JavaScript, copying objects or arrays can be done in different ways: deep copy and shallow copy.",
        "answer": "A shallow copy creates a new object, but the nested objects or arrays are still references to the original ones. A deep copy creates a new object, including copies of all nested objects or arrays.\n\nExample of shallow copy:\n```javascript\nconst obj1 = { a: 1, b: { c: 2 } };\nconst shallowCopy = { ...obj1 };\nshallowCopy.b.c = 3;\nconsole.log(obj1.b.c); // 3\n```\nExample of deep copy:\n```javascript\nconst obj1 = { a: 1, b: { c: 2 } };\nconst deepCopy = JSON.parse(JSON.stringify(obj1));\ndeepCopy.b.c = 3;\nconsole.log(obj1.b.c); // 2\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign",
        "start_char": 0,
        "end_char": 657,
        "key_answer": "A shallow copy creates a new object, but the nested objects or arrays are still references to the original ones. A deep copy creates a new object, including copies of all nested objects or arrays.\n\nExample of shallow copy:\n```javascript\nconst obj1 = { a: 1, b: { c: 2 } };\nconst shallowCopy = { ...obj1 };\nshallowCopy.b.c = 3;\nconsole.log(obj1.b.c); // 3\n```\nExample of deep copy:\n```javascript\nconst obj1 = { a: 1, b: { c: 2 } };\nconst deepCopy = JSON.parse(JSON.stringify(obj1));\ndeepCopy.b.c = 3;\nconsole.log(obj1.b.c); // 2\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"
    },
    {
        "question": "What is CORS (Cross-Origin Resource Sharing)?",
        "label": "web-development, cors, security",
        "language": "en",
        "context": "CORS is a security feature implemented by browsers to prevent unauthorized cross-origin requests.",
        "answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that allows servers to specify who can access their resources. It prevents malicious websites from making unauthorized requests to a different domain. A server specifies allowed origins using the `Access-Control-Allow-Origin` header.\n\nExample:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'GET',\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS",
        "start_char": 0,
        "end_char": 594,
        "key_answer": "CORS (Cross-Origin Resource Sharing) is a security mechanism that allows servers to specify who can access their resources. It prevents malicious websites from making unauthorized requests to a different domain. A server specifies allowed origins using the `Access-Control-Allow-Origin` header.\n\nExample:\n```javascript\nfetch('https://api.example.com/data', {\n  method: 'GET',\n  headers: {\n    'Access-Control-Allow-Origin': '*'\n  }\n})\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS"
    },
    {
        "question": "What are JavaScript promises?",
        "label": "javascript, promises, async",
        "language": "en",
        "context": "A JavaScript promise is an object representing the eventual completion or failure of an asynchronous operation.",
        "answer": "A promise allows you to associate handlers with an asynchronous operation's eventual success or failure. It can be in one of three states: pending, resolved, or rejected.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if(success) {\n    resolve('Success!');\n  } else {\n    reject('Failure!');\n  }\n});\npromise.then(result => console.log(result))\n       .catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 560,
        "key_answer": "A promise allows you to associate handlers with an asynchronous operation's eventual success or failure. It can be in one of three states: pending, resolved, or rejected.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if(success) {\n    resolve('Success!');\n  } else {\n    reject('Failure!');\n  }\n});\npromise.then(result => console.log(result))\n       .catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "How to create a promise in JavaScript?",
        "label": "javascript, promise, async",
        "language": "en",
        "context": "A `Promise` is used for deferred and asynchronous computations in JavaScript.",
        "answer": "Promises are created using the `new Promise()` constructor, which accepts a function with `resolve` and `reject` parameters.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Operation successful');\n  } else {\n    reject('Operation failed');\n  }\n});\npromise.then(result => console.log(result)).catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 526,
        "key_answer": "Promises are created using the `new Promise()` constructor, which accepts a function with `resolve` and `reject` parameters.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Operation successful');\n  } else {\n    reject('Operation failed');\n  }\n});\npromise.then(result => console.log(result)).catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "What are JavaScript Promises?",
        "label": "javascript, promises, asynchronous",
        "language": "en",
        "context": "A JavaScript Promise represents the eventual completion or failure of an asynchronous operation.",
        "answer": "Promises are used to handle asynchronous operations and allow chaining of methods with `.then()` and `.catch()` for success and error handling.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Success');\n  } else {\n    reject('Failure');\n  }\n});\npromise.then(result => console.log(result)).catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
        "start_char": 0,
        "end_char": 523,
        "key_answer": "Promises are used to handle asynchronous operations and allow chaining of methods with `.then()` and `.catch()` for success and error handling.\n\nExample:\n```javascript\nlet promise = new Promise((resolve, reject) => {\n  let success = true;\n  if (success) {\n    resolve('Success');\n  } else {\n    reject('Failure');\n  }\n});\npromise.then(result => console.log(result)).catch(error => console.log(error));\n```\n\n📚 Reference: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"
    },
    {
        "question": "How to resolve 'ValueError: could not convert string to float' in Python?",
        "label": "python, valueerror, debugging",
        "language": "en",
        "context": "Occurs when trying to convert a non-numeric string to float.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ValueError: could not convert string to float` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 545,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ValueError: could not convert string to float` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'TypeError: unsupported operand type(s)' in Python?",
        "label": "python, typeerror, debugging",
        "language": "en",
        "context": "Trying to use incompatible types in operations.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: unsupported operand type(s)` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 538,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: unsupported operand type(s)` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'IndexError: list index out of range' in Python?",
        "label": "python, indexerror, debugging",
        "language": "en",
        "context": "Accessing an index that doesn't exist in a list.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndexError: list index out of range` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 535,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndexError: list index out of range` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'ModuleNotFoundError: No module named 'xyz'' in Python?",
        "label": "python, modulenotfounderror, debugging",
        "language": "en",
        "context": "Happens when importing a non-existent or uninstalled module.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ModuleNotFoundError: No module named 'xyz'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 542,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ModuleNotFoundError: No module named 'xyz'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'IndentationError: expected an indented block' in Python?",
        "label": "python, indentationerror, debugging",
        "language": "en",
        "context": "Occurs when code indentation is incorrect.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndentationError: expected an indented block` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 544,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndentationError: expected an indented block` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'TypeError: undefined is not a function' in JavaScript?",
        "label": "javascript, typeerror, debugging",
        "language": "en",
        "context": "Calling a variable that is not a function.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: undefined is not a function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 538,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: undefined is not a function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'ReferenceError: x is not defined' in JavaScript?",
        "label": "javascript, referenceerror, debugging",
        "language": "en",
        "context": "Using a variable that hasn't been declared.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ReferenceError: x is not defined` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 532,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ReferenceError: x is not defined` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'SyntaxError: Unexpected token' in JavaScript?",
        "label": "javascript, syntaxerror, debugging",
        "language": "en",
        "context": "Usually a typo or invalid syntax in JS code.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `SyntaxError: Unexpected token` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 529,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `SyntaxError: Unexpected token` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'RangeError: Maximum call stack size exceeded' in JavaScript?",
        "label": "javascript, rangeerror, debugging",
        "language": "en",
        "context": "Caused by infinite recursion or loops.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `RangeError: Maximum call stack size exceeded` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 544,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `RangeError: Maximum call stack size exceeded` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'TypeError: Cannot read property 'x' of null' in JavaScript?",
        "label": "javascript, typeerror, debugging",
        "language": "en",
        "context": "Trying to access a property of a null object.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: Cannot read property 'x' of null` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 543,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: Cannot read property 'x' of null` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'NullPointerException' in Java?",
        "label": "java, nullpointerexception, debugging",
        "language": "en",
        "context": "Trying to use a null object reference.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NullPointerException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 520,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NullPointerException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'ArrayIndexOutOfBoundsException' in Java?",
        "label": "java, arrayindexoutofboundsexception, debugging",
        "language": "en",
        "context": "Indexing beyond array bounds.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ArrayIndexOutOfBoundsException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 530,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ArrayIndexOutOfBoundsException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'ClassNotFoundException' in Java?",
        "label": "java, classnotfoundexception, debugging",
        "language": "en",
        "context": "Trying to load a class that isn't available.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ClassNotFoundException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 522,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ClassNotFoundException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'IllegalArgumentException' in Java?",
        "label": "java, illegalargumentexception, debugging",
        "language": "en",
        "context": "A method received an inappropriate argument.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IllegalArgumentException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 524,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IllegalArgumentException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'NumberFormatException' in Java?",
        "label": "java, numberformatexception, debugging",
        "language": "en",
        "context": "Converting non-numeric string to number.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NumberFormatException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 521,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NumberFormatException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'NullReferenceException' in C#?",
        "label": "c#, nullreferenceexception, debugging",
        "language": "en",
        "context": "Using a null object reference.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NullReferenceException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 522,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NullReferenceException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'IndexOutOfRangeException' in C#?",
        "label": "c#, indexoutofrangeexception, debugging",
        "language": "en",
        "context": "Accessing array index out of bounds.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndexOutOfRangeException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 524,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `IndexOutOfRangeException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'InvalidCastException' in C#?",
        "label": "c#, invalidcastexception, debugging",
        "language": "en",
        "context": "Trying to cast to an incompatible type.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `InvalidCastException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 520,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `InvalidCastException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'DivideByZeroException' in C#?",
        "label": "c#, dividebyzeroexception, debugging",
        "language": "en",
        "context": "Dividing a number by zero.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `DivideByZeroException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 521,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `DivideByZeroException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'FormatException' in C#?",
        "label": "c#, formatexception, debugging",
        "language": "en",
        "context": "Invalid format when parsing a string.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `FormatException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 515,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `FormatException` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Segmentation fault' in C++?",
        "label": "c++, segmentation-fault, debugging",
        "language": "en",
        "context": "Accessing memory that doesn't belong to you.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Segmentation fault` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 518,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Segmentation fault` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Undefined reference to 'function'' in C++?",
        "label": "c++, undefined-reference-to-'function', debugging",
        "language": "en",
        "context": "Linker error due to missing implementation.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Undefined reference to 'function'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 533,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Undefined reference to 'function'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Stack overflow' in C++?",
        "label": "c++, stack-overflow, debugging",
        "language": "en",
        "context": "Usually due to infinite recursion.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Stack overflow` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 514,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Stack overflow` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Use of undeclared identifier' in C++?",
        "label": "c++, use-of-undeclared-identifier, debugging",
        "language": "en",
        "context": "Using a variable or function not declared.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Use of undeclared identifier` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 528,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Use of undeclared identifier` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Expected ';' before '}'' in C++?",
        "label": "c++, expected-';'-before-'}', debugging",
        "language": "en",
        "context": "Syntax error due to missing semicolon.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Expected ';' before '}'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 523,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Expected ';' before '}'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Cannot find name' in TypeScript?",
        "label": "typescript, cannot-find-name, debugging",
        "language": "en",
        "context": "Using an undeclared variable or import.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Cannot find name` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 516,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Cannot find name` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Type 'x' is not assignable to type 'y'' in TypeScript?",
        "label": "typescript, type-'x'-is-not-assignable-to-type-'y', debugging",
        "language": "en",
        "context": "Type mismatch in assignment.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Type 'x' is not assignable to type 'y'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 538,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Type 'x' is not assignable to type 'y'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Property 'x' does not exist on type' in TypeScript?",
        "label": "typescript, property-'x'-does-not-exist-on-type, debugging",
        "language": "en",
        "context": "Accessing non-existing properties.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Property 'x' does not exist on type` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 535,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Property 'x' does not exist on type` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Argument of type 'x' is not assignable' in TypeScript?",
        "label": "typescript, argument-of-type-'x'-is-not-assignable, debugging",
        "language": "en",
        "context": "Passing wrong type to function.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Argument of type 'x' is not assignable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 538,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Argument of type 'x' is not assignable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'A function whose declared type is neither 'void'' in TypeScript?",
        "label": "typescript, a-function-whose-declared-type-is-neither-'void', debugging",
        "language": "en",
        "context": "Mismatch in function return type.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `A function whose declared type is neither 'void'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 548,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `A function whose declared type is neither 'void'` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'undefined: x' in Go?",
        "label": "go, undefined, debugging",
        "language": "en",
        "context": "Using a variable or package not declared.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `undefined: x` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 512,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `undefined: x` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'cannot use x (type int) as string' in Go?",
        "label": "go, cannot-use-x-(type-int)-as-string, debugging",
        "language": "en",
        "context": "Type mismatch error.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `cannot use x (type int) as string` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 533,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `cannot use x (type int) as string` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'index out of range' in Go?",
        "label": "go, index-out-of-range, debugging",
        "language": "en",
        "context": "Accessing invalid index.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `index out of range` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 518,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `index out of range` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'panic: runtime error' in Go?",
        "label": "go, panic, debugging",
        "language": "en",
        "context": "General runtime panic.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `panic: runtime error` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 520,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `panic: runtime error` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'imported and not used' in Go?",
        "label": "go, imported-and-not-used, debugging",
        "language": "en",
        "context": "Importing packages but not using them.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `imported and not used` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 521,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `imported and not used` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'NameError: undefined local variable or method' in Ruby?",
        "label": "ruby, nameerror, debugging",
        "language": "en",
        "context": "Using a variable/method not defined.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NameError: undefined local variable or method` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 545,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NameError: undefined local variable or method` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'NoMethodError: undefined method' in Ruby?",
        "label": "ruby, nomethoderror, debugging",
        "language": "en",
        "context": "Calling method that doesn't exist.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NoMethodError: undefined method` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 531,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `NoMethodError: undefined method` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'TypeError: no implicit conversion' in Ruby?",
        "label": "ruby, typeerror, debugging",
        "language": "en",
        "context": "Trying to use incompatible types.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: no implicit conversion` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 533,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `TypeError: no implicit conversion` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'ArgumentError: wrong number of arguments' in Ruby?",
        "label": "ruby, argumenterror, debugging",
        "language": "en",
        "context": "Passing wrong arguments to method.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ArgumentError: wrong number of arguments` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 540,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `ArgumentError: wrong number of arguments` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'SyntaxError: unexpected keyword_end' in Ruby?",
        "label": "ruby, syntaxerror, debugging",
        "language": "en",
        "context": "Syntax issues in Ruby script.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `SyntaxError: unexpected keyword_end` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 535,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `SyntaxError: unexpected keyword_end` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Undefined variable' in PHP?",
        "label": "php, undefined-variable, debugging",
        "language": "en",
        "context": "Accessing variable that hasn't been defined.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Undefined variable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 518,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Undefined variable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Call to undefined function' in PHP?",
        "label": "php, call-to-undefined-function, debugging",
        "language": "en",
        "context": "Calling function that doesn't exist.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Call to undefined function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 526,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Call to undefined function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Parse error: syntax error' in PHP?",
        "label": "php, parse-error, debugging",
        "language": "en",
        "context": "General syntax error.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Parse error: syntax error` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 525,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Parse error: syntax error` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Fatal error: Cannot redeclare function' in PHP?",
        "label": "php, fatal-error, debugging",
        "language": "en",
        "context": "Redefining a function that already exists.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Fatal error: Cannot redeclare function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 538,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Fatal error: Cannot redeclare function` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'Warning: Division by zero' in PHP?",
        "label": "php, warning, debugging",
        "language": "en",
        "context": "Dividing by zero.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Warning: Division by zero` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 525,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `Warning: Division by zero` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'cannot borrow as mutable' in Rust?",
        "label": "rust, cannot-borrow-as-mutable, debugging",
        "language": "en",
        "context": "Borrow checker prevents unsafe access.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `cannot borrow as mutable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 524,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `cannot borrow as mutable` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'mismatched types' in Rust?",
        "label": "rust, mismatched-types, debugging",
        "language": "en",
        "context": "Assigning wrong types.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `mismatched types` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 516,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `mismatched types` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'use of moved value' in Rust?",
        "label": "rust, use-of-moved-value, debugging",
        "language": "en",
        "context": "Using a variable after it’s been moved.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `use of moved value` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 518,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `use of moved value` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'expected identifier, found keyword' in Rust?",
        "label": "rust, expected-identifier,-found-keyword, debugging",
        "language": "en",
        "context": "Using reserved word incorrectly.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `expected identifier, found keyword` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 534,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `expected identifier, found keyword` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    },
    {
        "question": "How to resolve 'attempt to divide by zero' in Rust?",
        "label": "rust, attempt-to-divide-by-zero, debugging",
        "language": "en",
        "context": "Mathematical zero division error.",
        "answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `attempt to divide by zero` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums.",
        "start_char": 0,
        "end_char": 525,
        "key_answer": "Step-by-step fix:\n\n1. **Understand the error**: Read and interpret the message — `attempt to divide by zero` gives a clue.\n2. **Locate the error line**: Use line number from stack trace or IDE.\n3. **Inspect surrounding code**: Identify what could lead to this error.\n4. **Apply the fix**: Adjust syntax, logic, or type to resolve it.\n5. **Test your fix**: Rerun the program to ensure the error is resolved.\n\n🛠️ Tip: Use documentation and search engines effectively.\n📚 Reference: Refer to the official docs or forums."
    }
]